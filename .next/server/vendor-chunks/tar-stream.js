/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tar-stream";
exports.ids = ["vendor-chunks/tar-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/tar-stream/extract.js":
/*!********************************************!*\
  !*** ./node_modules/tar-stream/extract.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! util */ \"util\");\nvar bl = __webpack_require__(/*! bl */ \"(rsc)/./node_modules/bl/bl.js\");\nvar headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/tar-stream/headers.js\");\nvar Writable = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").Writable);\nvar PassThrough = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").PassThrough);\nvar noop = function() {};\nvar overflow = function(size) {\n    size &= 511;\n    return size && 512 - size;\n};\nvar emptyStream = function(self, offset) {\n    var s = new Source(self, offset);\n    s.end();\n    return s;\n};\nvar mixinPax = function(header, pax) {\n    if (pax.path) header.name = pax.path;\n    if (pax.linkpath) header.linkname = pax.linkpath;\n    if (pax.size) header.size = parseInt(pax.size, 10);\n    header.pax = pax;\n    return header;\n};\nvar Source = function(self, offset) {\n    this._parent = self;\n    this.offset = offset;\n    PassThrough.call(this, {\n        autoDestroy: false\n    });\n};\nutil.inherits(Source, PassThrough);\nSource.prototype.destroy = function(err) {\n    this._parent.destroy(err);\n};\nvar Extract = function(opts) {\n    if (!(this instanceof Extract)) return new Extract(opts);\n    Writable.call(this, opts);\n    opts = opts || {};\n    this._offset = 0;\n    this._buffer = bl();\n    this._missing = 0;\n    this._partial = false;\n    this._onparse = noop;\n    this._header = null;\n    this._stream = null;\n    this._overflow = null;\n    this._cb = null;\n    this._locked = false;\n    this._destroyed = false;\n    this._pax = null;\n    this._paxGlobal = null;\n    this._gnuLongPath = null;\n    this._gnuLongLinkPath = null;\n    var self = this;\n    var b = self._buffer;\n    var oncontinue = function() {\n        self._continue();\n    };\n    var onunlock = function(err) {\n        self._locked = false;\n        if (err) return self.destroy(err);\n        if (!self._stream) oncontinue();\n    };\n    var onstreamend = function() {\n        self._stream = null;\n        var drain = overflow(self._header.size);\n        if (drain) self._parse(drain, ondrain);\n        else self._parse(512, onheader);\n        if (!self._locked) oncontinue();\n    };\n    var ondrain = function() {\n        self._buffer.consume(overflow(self._header.size));\n        self._parse(512, onheader);\n        oncontinue();\n    };\n    var onpaxglobalheader = function() {\n        var size = self._header.size;\n        self._paxGlobal = headers.decodePax(b.slice(0, size));\n        b.consume(size);\n        onstreamend();\n    };\n    var onpaxheader = function() {\n        var size = self._header.size;\n        self._pax = headers.decodePax(b.slice(0, size));\n        if (self._paxGlobal) self._pax = Object.assign({}, self._paxGlobal, self._pax);\n        b.consume(size);\n        onstreamend();\n    };\n    var ongnulongpath = function() {\n        var size = self._header.size;\n        this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);\n        b.consume(size);\n        onstreamend();\n    };\n    var ongnulonglinkpath = function() {\n        var size = self._header.size;\n        this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);\n        b.consume(size);\n        onstreamend();\n    };\n    var onheader = function() {\n        var offset = self._offset;\n        var header;\n        try {\n            header = self._header = headers.decode(b.slice(0, 512), opts.filenameEncoding, opts.allowUnknownFormat);\n        } catch (err) {\n            self.emit(\"error\", err);\n        }\n        b.consume(512);\n        if (!header) {\n            self._parse(512, onheader);\n            oncontinue();\n            return;\n        }\n        if (header.type === \"gnu-long-path\") {\n            self._parse(header.size, ongnulongpath);\n            oncontinue();\n            return;\n        }\n        if (header.type === \"gnu-long-link-path\") {\n            self._parse(header.size, ongnulonglinkpath);\n            oncontinue();\n            return;\n        }\n        if (header.type === \"pax-global-header\") {\n            self._parse(header.size, onpaxglobalheader);\n            oncontinue();\n            return;\n        }\n        if (header.type === \"pax-header\") {\n            self._parse(header.size, onpaxheader);\n            oncontinue();\n            return;\n        }\n        if (self._gnuLongPath) {\n            header.name = self._gnuLongPath;\n            self._gnuLongPath = null;\n        }\n        if (self._gnuLongLinkPath) {\n            header.linkname = self._gnuLongLinkPath;\n            self._gnuLongLinkPath = null;\n        }\n        if (self._pax) {\n            self._header = header = mixinPax(header, self._pax);\n            self._pax = null;\n        }\n        self._locked = true;\n        if (!header.size || header.type === \"directory\") {\n            self._parse(512, onheader);\n            self.emit(\"entry\", header, emptyStream(self, offset), onunlock);\n            return;\n        }\n        self._stream = new Source(self, offset);\n        self.emit(\"entry\", header, self._stream, onunlock);\n        self._parse(header.size, onstreamend);\n        oncontinue();\n    };\n    this._onheader = onheader;\n    this._parse(512, onheader);\n};\nutil.inherits(Extract, Writable);\nExtract.prototype.destroy = function(err) {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    if (err) this.emit(\"error\", err);\n    this.emit(\"close\");\n    if (this._stream) this._stream.emit(\"close\");\n};\nExtract.prototype._parse = function(size, onparse) {\n    if (this._destroyed) return;\n    this._offset += size;\n    this._missing = size;\n    if (onparse === this._onheader) this._partial = false;\n    this._onparse = onparse;\n};\nExtract.prototype._continue = function() {\n    if (this._destroyed) return;\n    var cb = this._cb;\n    this._cb = noop;\n    if (this._overflow) this._write(this._overflow, undefined, cb);\n    else cb();\n};\nExtract.prototype._write = function(data, enc, cb) {\n    if (this._destroyed) return;\n    var s = this._stream;\n    var b = this._buffer;\n    var missing = this._missing;\n    if (data.length) this._partial = true;\n    // we do not reach end-of-chunk now. just forward it\n    if (data.length < missing) {\n        this._missing -= data.length;\n        this._overflow = null;\n        if (s) return s.write(data, cb);\n        b.append(data);\n        return cb();\n    }\n    // end-of-chunk. the parser should call cb.\n    this._cb = cb;\n    this._missing = 0;\n    var overflow = null;\n    if (data.length > missing) {\n        overflow = data.slice(missing);\n        data = data.slice(0, missing);\n    }\n    if (s) s.end(data);\n    else b.append(data);\n    this._overflow = overflow;\n    this._onparse();\n};\nExtract.prototype._final = function(cb) {\n    if (this._partial) return this.destroy(new Error(\"Unexpected end of data\"));\n    cb();\n};\nmodule.exports = Extract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/extract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/headers.js":
/*!********************************************!*\
  !*** ./node_modules/tar-stream/headers.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var alloc = Buffer.alloc;\nvar ZEROS = \"0000000000000000000\";\nvar SEVENS = \"7777777777777777777\";\nvar ZERO_OFFSET = \"0\".charCodeAt(0);\nvar USTAR_MAGIC = Buffer.from(\"ustar\\x00\", \"binary\");\nvar USTAR_VER = Buffer.from(\"00\", \"binary\");\nvar GNU_MAGIC = Buffer.from(\"ustar \", \"binary\");\nvar GNU_VER = Buffer.from(\" \\x00\", \"binary\");\nvar MASK = parseInt(\"7777\", 8);\nvar MAGIC_OFFSET = 257;\nvar VERSION_OFFSET = 263;\nvar clamp = function(index, len, defaultValue) {\n    if (typeof index !== \"number\") return defaultValue;\n    index = ~~index // Coerce to integer.\n    ;\n    if (index >= len) return len;\n    if (index >= 0) return index;\n    index += len;\n    if (index >= 0) return index;\n    return 0;\n};\nvar toType = function(flag) {\n    switch(flag){\n        case 0:\n            return \"file\";\n        case 1:\n            return \"link\";\n        case 2:\n            return \"symlink\";\n        case 3:\n            return \"character-device\";\n        case 4:\n            return \"block-device\";\n        case 5:\n            return \"directory\";\n        case 6:\n            return \"fifo\";\n        case 7:\n            return \"contiguous-file\";\n        case 72:\n            return \"pax-header\";\n        case 55:\n            return \"pax-global-header\";\n        case 27:\n            return \"gnu-long-link-path\";\n        case 28:\n        case 30:\n            return \"gnu-long-path\";\n    }\n    return null;\n};\nvar toTypeflag = function(flag) {\n    switch(flag){\n        case \"file\":\n            return 0;\n        case \"link\":\n            return 1;\n        case \"symlink\":\n            return 2;\n        case \"character-device\":\n            return 3;\n        case \"block-device\":\n            return 4;\n        case \"directory\":\n            return 5;\n        case \"fifo\":\n            return 6;\n        case \"contiguous-file\":\n            return 7;\n        case \"pax-header\":\n            return 72;\n    }\n    return 0;\n};\nvar indexOf = function(block, num, offset, end) {\n    for(; offset < end; offset++){\n        if (block[offset] === num) return offset;\n    }\n    return end;\n};\nvar cksum = function(block) {\n    var sum = 8 * 32;\n    for(var i = 0; i < 148; i++)sum += block[i];\n    for(var j = 156; j < 512; j++)sum += block[j];\n    return sum;\n};\nvar encodeOct = function(val, n) {\n    val = val.toString(8);\n    if (val.length > n) return SEVENS.slice(0, n) + \" \";\n    else return ZEROS.slice(0, n - val.length) + val + \" \";\n};\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */ function parse256(buf) {\n    // first byte MUST be either 80 or FF\n    // 80 for positive, FF for 2's comp\n    var positive;\n    if (buf[0] === 0x80) positive = true;\n    else if (buf[0] === 0xFF) positive = false;\n    else return null;\n    // build up a base-256 tuple from the least sig to the highest\n    var tuple = [];\n    for(var i = buf.length - 1; i > 0; i--){\n        var byte = buf[i];\n        if (positive) tuple.push(byte);\n        else tuple.push(0xFF - byte);\n    }\n    var sum = 0;\n    var l = tuple.length;\n    for(i = 0; i < l; i++){\n        sum += tuple[i] * Math.pow(256, i);\n    }\n    return positive ? sum : -1 * sum;\n}\nvar decodeOct = function(val, offset, length) {\n    val = val.slice(offset, offset + length);\n    offset = 0;\n    // If prefixed with 0x80 then parse as a base-256 integer\n    if (val[offset] & 0x80) {\n        return parse256(val);\n    } else {\n        // Older versions of tar can prefix with spaces\n        while(offset < val.length && val[offset] === 32)offset++;\n        var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n        while(offset < end && val[offset] === 0)offset++;\n        if (end === offset) return 0;\n        return parseInt(val.slice(offset, end).toString(), 8);\n    }\n};\nvar decodeStr = function(val, offset, length, encoding) {\n    return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);\n};\nvar addLength = function(str) {\n    var len = Buffer.byteLength(str);\n    var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;\n    if (len + digits >= Math.pow(10, digits)) digits++;\n    return len + digits + str;\n};\nexports.decodeLongPath = function(buf, encoding) {\n    return decodeStr(buf, 0, buf.length, encoding);\n};\nexports.encodePax = function(opts) {\n    var result = \"\";\n    if (opts.name) result += addLength(\" path=\" + opts.name + \"\\n\");\n    if (opts.linkname) result += addLength(\" linkpath=\" + opts.linkname + \"\\n\");\n    var pax = opts.pax;\n    if (pax) {\n        for(var key in pax){\n            result += addLength(\" \" + key + \"=\" + pax[key] + \"\\n\");\n        }\n    }\n    return Buffer.from(result);\n};\nexports.decodePax = function(buf) {\n    var result = {};\n    while(buf.length){\n        var i = 0;\n        while(i < buf.length && buf[i] !== 32)i++;\n        var len = parseInt(buf.slice(0, i).toString(), 10);\n        if (!len) return result;\n        var b = buf.slice(i + 1, len - 1).toString();\n        var keyIndex = b.indexOf(\"=\");\n        if (keyIndex === -1) return result;\n        result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n        buf = buf.slice(len);\n    }\n    return result;\n};\nexports.encode = function(opts) {\n    var buf = alloc(512);\n    var name = opts.name;\n    var prefix = \"\";\n    if (opts.typeflag === 5 && name[name.length - 1] !== \"/\") name += \"/\";\n    if (Buffer.byteLength(name) !== name.length) return null // utf-8\n    ;\n    while(Buffer.byteLength(name) > 100){\n        var i = name.indexOf(\"/\");\n        if (i === -1) return null;\n        prefix += prefix ? \"/\" + name.slice(0, i) : name.slice(0, i);\n        name = name.slice(i + 1);\n    }\n    if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155) return null;\n    if (opts.linkname && Buffer.byteLength(opts.linkname) > 100) return null;\n    buf.write(name);\n    buf.write(encodeOct(opts.mode & MASK, 6), 100);\n    buf.write(encodeOct(opts.uid, 6), 108);\n    buf.write(encodeOct(opts.gid, 6), 116);\n    buf.write(encodeOct(opts.size, 11), 124);\n    buf.write(encodeOct(opts.mtime.getTime() / 1000 | 0, 11), 136);\n    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);\n    if (opts.linkname) buf.write(opts.linkname, 157);\n    USTAR_MAGIC.copy(buf, MAGIC_OFFSET);\n    USTAR_VER.copy(buf, VERSION_OFFSET);\n    if (opts.uname) buf.write(opts.uname, 265);\n    if (opts.gname) buf.write(opts.gname, 297);\n    buf.write(encodeOct(opts.devmajor || 0, 6), 329);\n    buf.write(encodeOct(opts.devminor || 0, 6), 337);\n    if (prefix) buf.write(prefix, 345);\n    buf.write(encodeOct(cksum(buf), 6), 148);\n    return buf;\n};\nexports.decode = function(buf, filenameEncoding, allowUnknownFormat) {\n    var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;\n    var name = decodeStr(buf, 0, 100, filenameEncoding);\n    var mode = decodeOct(buf, 100, 8);\n    var uid = decodeOct(buf, 108, 8);\n    var gid = decodeOct(buf, 116, 8);\n    var size = decodeOct(buf, 124, 12);\n    var mtime = decodeOct(buf, 136, 12);\n    var type = toType(typeflag);\n    var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);\n    var uname = decodeStr(buf, 265, 32);\n    var gname = decodeStr(buf, 297, 32);\n    var devmajor = decodeOct(buf, 329, 8);\n    var devminor = decodeOct(buf, 337, 8);\n    var c = cksum(buf);\n    // checksum is still initial value if header was null.\n    if (c === 8 * 32) return null;\n    // valid checksum\n    if (c !== decodeOct(buf, 148, 8)) throw new Error(\"Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?\");\n    if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {\n        // ustar (posix) format.\n        // prepend prefix, if present.\n        if (buf[345]) name = decodeStr(buf, 345, 155, filenameEncoding) + \"/\" + name;\n    } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 && GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n    } else {\n        if (!allowUnknownFormat) {\n            throw new Error(\"Invalid tar header: unknown format.\");\n        }\n    }\n    // to support old tar versions that use trailing / to indicate dirs\n    if (typeflag === 0 && name && name[name.length - 1] === \"/\") typeflag = 5;\n    return {\n        name,\n        mode,\n        uid,\n        gid,\n        size,\n        mtime: new Date(1000 * mtime),\n        type,\n        linkname,\n        uname,\n        gname,\n        devmajor,\n        devminor\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/index.js":
/*!******************************************!*\
  !*** ./node_modules/tar-stream/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.extract = __webpack_require__(/*! ./extract */ \"(rsc)/./node_modules/tar-stream/extract.js\");\nexports.pack = __webpack_require__(/*! ./pack */ \"(rsc)/./node_modules/tar-stream/pack.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFyLXN0cmVhbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsb0dBQTBCO0FBQzFCQSwyRkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lc2hlZXQtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL3Rhci1zdHJlYW0vaW5kZXguanM/ZjNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmV4dHJhY3QgPSByZXF1aXJlKCcuL2V4dHJhY3QnKVxuZXhwb3J0cy5wYWNrID0gcmVxdWlyZSgnLi9wYWNrJylcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZXh0cmFjdCIsInJlcXVpcmUiLCJwYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/pack.js":
/*!*****************************************!*\
  !*** ./node_modules/tar-stream/pack.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var constants = __webpack_require__(/*! fs-constants */ \"(rsc)/./node_modules/fs-constants/index.js\");\nvar eos = __webpack_require__(/*! end-of-stream */ \"(rsc)/./node_modules/end-of-stream/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar alloc = Buffer.alloc;\nvar Readable = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").Readable);\nvar Writable = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").Writable);\nvar StringDecoder = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\nvar headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/tar-stream/headers.js\");\nvar DMODE = parseInt(\"755\", 8);\nvar FMODE = parseInt(\"644\", 8);\nvar END_OF_TAR = alloc(1024);\nvar noop = function() {};\nvar overflow = function(self, size) {\n    size &= 511;\n    if (size) self.push(END_OF_TAR.slice(0, 512 - size));\n};\nfunction modeToType(mode) {\n    switch(mode & constants.S_IFMT){\n        case constants.S_IFBLK:\n            return \"block-device\";\n        case constants.S_IFCHR:\n            return \"character-device\";\n        case constants.S_IFDIR:\n            return \"directory\";\n        case constants.S_IFIFO:\n            return \"fifo\";\n        case constants.S_IFLNK:\n            return \"symlink\";\n    }\n    return \"file\";\n}\nvar Sink = function(to) {\n    Writable.call(this);\n    this.written = 0;\n    this._to = to;\n    this._destroyed = false;\n};\ninherits(Sink, Writable);\nSink.prototype._write = function(data, enc, cb) {\n    this.written += data.length;\n    if (this._to.push(data)) return cb();\n    this._to._drain = cb;\n};\nSink.prototype.destroy = function() {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this.emit(\"close\");\n};\nvar LinkSink = function() {\n    Writable.call(this);\n    this.linkname = \"\";\n    this._decoder = new StringDecoder(\"utf-8\");\n    this._destroyed = false;\n};\ninherits(LinkSink, Writable);\nLinkSink.prototype._write = function(data, enc, cb) {\n    this.linkname += this._decoder.write(data);\n    cb();\n};\nLinkSink.prototype.destroy = function() {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this.emit(\"close\");\n};\nvar Void = function() {\n    Writable.call(this);\n    this._destroyed = false;\n};\ninherits(Void, Writable);\nVoid.prototype._write = function(data, enc, cb) {\n    cb(new Error(\"No body allowed for this entry\"));\n};\nVoid.prototype.destroy = function() {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this.emit(\"close\");\n};\nvar Pack = function(opts) {\n    if (!(this instanceof Pack)) return new Pack(opts);\n    Readable.call(this, opts);\n    this._drain = noop;\n    this._finalized = false;\n    this._finalizing = false;\n    this._destroyed = false;\n    this._stream = null;\n};\ninherits(Pack, Readable);\nPack.prototype.entry = function(header, buffer, callback) {\n    if (this._stream) throw new Error(\"already piping an entry\");\n    if (this._finalized || this._destroyed) return;\n    if (typeof buffer === \"function\") {\n        callback = buffer;\n        buffer = null;\n    }\n    if (!callback) callback = noop;\n    var self = this;\n    if (!header.size || header.type === \"symlink\") header.size = 0;\n    if (!header.type) header.type = modeToType(header.mode);\n    if (!header.mode) header.mode = header.type === \"directory\" ? DMODE : FMODE;\n    if (!header.uid) header.uid = 0;\n    if (!header.gid) header.gid = 0;\n    if (!header.mtime) header.mtime = new Date();\n    if (typeof buffer === \"string\") buffer = Buffer.from(buffer);\n    if (Buffer.isBuffer(buffer)) {\n        header.size = buffer.length;\n        this._encode(header);\n        var ok = this.push(buffer);\n        overflow(self, header.size);\n        if (ok) process.nextTick(callback);\n        else this._drain = callback;\n        return new Void();\n    }\n    if (header.type === \"symlink\" && !header.linkname) {\n        var linkSink = new LinkSink();\n        eos(linkSink, function(err) {\n            if (err) {\n                self.destroy();\n                return callback(err);\n            }\n            header.linkname = linkSink.linkname;\n            self._encode(header);\n            callback();\n        });\n        return linkSink;\n    }\n    this._encode(header);\n    if (header.type !== \"file\" && header.type !== \"contiguous-file\") {\n        process.nextTick(callback);\n        return new Void();\n    }\n    var sink = new Sink(this);\n    this._stream = sink;\n    eos(sink, function(err) {\n        self._stream = null;\n        if (err) {\n            self.destroy();\n            return callback(err);\n        }\n        if (sink.written !== header.size) {\n            self.destroy();\n            return callback(new Error(\"size mismatch\"));\n        }\n        overflow(self, header.size);\n        if (self._finalizing) self.finalize();\n        callback();\n    });\n    return sink;\n};\nPack.prototype.finalize = function() {\n    if (this._stream) {\n        this._finalizing = true;\n        return;\n    }\n    if (this._finalized) return;\n    this._finalized = true;\n    this.push(END_OF_TAR);\n    this.push(null);\n};\nPack.prototype.destroy = function(err) {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    if (err) this.emit(\"error\", err);\n    this.emit(\"close\");\n    if (this._stream && this._stream.destroy) this._stream.destroy();\n};\nPack.prototype._encode = function(header) {\n    if (!header.pax) {\n        var buf = headers.encode(header);\n        if (buf) {\n            this.push(buf);\n            return;\n        }\n    }\n    this._encodePax(header);\n};\nPack.prototype._encodePax = function(header) {\n    var paxHeader = headers.encodePax({\n        name: header.name,\n        linkname: header.linkname,\n        pax: header.pax\n    });\n    var newHeader = {\n        name: \"PaxHeader\",\n        mode: header.mode,\n        uid: header.uid,\n        gid: header.gid,\n        size: paxHeader.length,\n        mtime: header.mtime,\n        type: \"pax-header\",\n        linkname: header.linkname && \"PaxHeader\",\n        uname: header.uname,\n        gname: header.gname,\n        devmajor: header.devmajor,\n        devminor: header.devminor\n    };\n    this.push(headers.encode(newHeader));\n    this.push(paxHeader);\n    overflow(this, paxHeader.length);\n    newHeader.size = header.size;\n    newHeader.type = header.type;\n    this.push(headers.encode(newHeader));\n};\nPack.prototype._read = function(n) {\n    var drain = this._drain;\n    this._drain = noop;\n    drain();\n};\nmodule.exports = Pack;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/pack.js\n");

/***/ })

};
;