/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/brace-expansion";
exports.ids = ["vendor-chunks/brace-expansion"];
exports.modules = {

/***/ "(rsc)/./node_modules/brace-expansion/index.js":
/*!***********************************************!*\
  !*** ./node_modules/brace-expansion/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var concatMap = __webpack_require__(/*! concat-map */ \"(rsc)/./node_modules/concat-map/index.js\");\nvar balanced = __webpack_require__(/*! balanced-match */ \"(rsc)/./node_modules/balanced-match/index.js\");\nmodule.exports = expandTop;\nvar escSlash = \"\\x00SLASH\" + Math.random() + \"\\x00\";\nvar escOpen = \"\\x00OPEN\" + Math.random() + \"\\x00\";\nvar escClose = \"\\x00CLOSE\" + Math.random() + \"\\x00\";\nvar escComma = \"\\x00COMMA\" + Math.random() + \"\\x00\";\nvar escPeriod = \"\\x00PERIOD\" + Math.random() + \"\\x00\";\nfunction numeric(str) {\n    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);\n}\nfunction escapeBraces(str) {\n    return str.split(\"\\\\\\\\\").join(escSlash).split(\"\\\\{\").join(escOpen).split(\"\\\\}\").join(escClose).split(\"\\\\,\").join(escComma).split(\"\\\\.\").join(escPeriod);\n}\nfunction unescapeBraces(str) {\n    return str.split(escSlash).join(\"\\\\\").split(escOpen).join(\"{\").split(escClose).join(\"}\").split(escComma).join(\",\").split(escPeriod).join(\".\");\n}\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n    if (!str) return [\n        \"\"\n    ];\n    var parts = [];\n    var m = balanced(\"{\", \"}\", str);\n    if (!m) return str.split(\",\");\n    var pre = m.pre;\n    var body = m.body;\n    var post = m.post;\n    var p = pre.split(\",\");\n    p[p.length - 1] += \"{\" + body + \"}\";\n    var postParts = parseCommaParts(post);\n    if (post.length) {\n        p[p.length - 1] += postParts.shift();\n        p.push.apply(p, postParts);\n    }\n    parts.push.apply(parts, p);\n    return parts;\n}\nfunction expandTop(str) {\n    if (!str) return [];\n    // I don't know why Bash 4.3 does this, but it does.\n    // Anything starting with {} will have the first two bytes preserved\n    // but *only* at the top level, so {},a}b will not expand to anything,\n    // but a{},b}c will be expanded to [a}c,abc].\n    // One could argue that this is a bug in Bash, but since the goal of\n    // this module is to match Bash's rules, we escape a leading {}\n    if (str.substr(0, 2) === \"{}\") {\n        str = \"\\\\{\\\\}\" + str.substr(2);\n    }\n    return expand(escapeBraces(str), true).map(unescapeBraces);\n}\nfunction identity(e) {\n    return e;\n}\nfunction embrace(str) {\n    return \"{\" + str + \"}\";\n}\nfunction isPadded(el) {\n    return /^-?0\\d/.test(el);\n}\nfunction lte(i, y) {\n    return i <= y;\n}\nfunction gte(i, y) {\n    return i >= y;\n}\nfunction expand(str, isTop) {\n    var expansions = [];\n    var m = balanced(\"{\", \"}\", str);\n    if (!m || /\\$$/.test(m.pre)) return [\n        str\n    ];\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(\",\") >= 0;\n    if (!isSequence && !isOptions) {\n        // {a},b}\n        if (m.post.match(/,.*\\}/)) {\n            str = m.pre + \"{\" + m.body + escClose + m.post;\n            return expand(str);\n        }\n        return [\n            str\n        ];\n    }\n    var n;\n    if (isSequence) {\n        n = m.body.split(/\\.\\./);\n    } else {\n        n = parseCommaParts(m.body);\n        if (n.length === 1) {\n            // x{{a,b}}y ==> x{a}y x{b}y\n            n = expand(n[0], false).map(embrace);\n            if (n.length === 1) {\n                var post = m.post.length ? expand(m.post, false) : [\n                    \"\"\n                ];\n                return post.map(function(p) {\n                    return m.pre + n[0] + p;\n                });\n            }\n        }\n    }\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    // no need to expand pre, since it is guaranteed to be free of brace-sets\n    var pre = m.pre;\n    var post = m.post.length ? expand(m.post, false) : [\n        \"\"\n    ];\n    var N;\n    if (isSequence) {\n        var x = numeric(n[0]);\n        var y = numeric(n[1]);\n        var width = Math.max(n[0].length, n[1].length);\n        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;\n        var test = lte;\n        var reverse = y < x;\n        if (reverse) {\n            incr *= -1;\n            test = gte;\n        }\n        var pad = n.some(isPadded);\n        N = [];\n        for(var i = x; test(i, y); i += incr){\n            var c;\n            if (isAlphaSequence) {\n                c = String.fromCharCode(i);\n                if (c === \"\\\\\") c = \"\";\n            } else {\n                c = String(i);\n                if (pad) {\n                    var need = width - c.length;\n                    if (need > 0) {\n                        var z = new Array(need + 1).join(\"0\");\n                        if (i < 0) c = \"-\" + z + c.slice(1);\n                        else c = z + c;\n                    }\n                }\n            }\n            N.push(c);\n        }\n    } else {\n        N = concatMap(n, function(el) {\n            return expand(el, false);\n        });\n    }\n    for(var j = 0; j < N.length; j++){\n        for(var k = 0; k < post.length; k++){\n            var expansion = pre + N[j] + post[k];\n            if (!isTop || isSequence || expansion) expansions.push(expansion);\n        }\n    }\n    return expansions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/brace-expansion/index.js\n");

/***/ })

};
;