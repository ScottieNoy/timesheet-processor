/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fstream";
exports.ids = ["vendor-chunks/fstream"];
exports.modules = {

/***/ "(rsc)/./node_modules/fstream/fstream.js":
/*!*****************************************!*\
  !*** ./node_modules/fstream/fstream.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Abstract = __webpack_require__(/*! ./lib/abstract.js */ \"(rsc)/./node_modules/fstream/lib/abstract.js\");\nexports.Reader = __webpack_require__(/*! ./lib/reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\nexports.Writer = __webpack_require__(/*! ./lib/writer.js */ \"(rsc)/./node_modules/fstream/lib/writer.js\");\nexports.File = {\n    Reader: __webpack_require__(/*! ./lib/file-reader.js */ \"(rsc)/./node_modules/fstream/lib/file-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/file-writer.js */ \"(rsc)/./node_modules/fstream/lib/file-writer.js\")\n};\nexports.Dir = {\n    Reader: __webpack_require__(/*! ./lib/dir-reader.js */ \"(rsc)/./node_modules/fstream/lib/dir-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/dir-writer.js */ \"(rsc)/./node_modules/fstream/lib/dir-writer.js\")\n};\nexports.Link = {\n    Reader: __webpack_require__(/*! ./lib/link-reader.js */ \"(rsc)/./node_modules/fstream/lib/link-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/link-writer.js */ \"(rsc)/./node_modules/fstream/lib/link-writer.js\")\n};\nexports.Proxy = {\n    Reader: __webpack_require__(/*! ./lib/proxy-reader.js */ \"(rsc)/./node_modules/fstream/lib/proxy-reader.js\"),\n    Writer: __webpack_require__(/*! ./lib/proxy-writer.js */ \"(rsc)/./node_modules/fstream/lib/proxy-writer.js\")\n};\nexports.Reader.Dir = exports.DirReader = exports.Dir.Reader;\nexports.Reader.File = exports.FileReader = exports.File.Reader;\nexports.Reader.Link = exports.LinkReader = exports.Link.Reader;\nexports.Reader.Proxy = exports.ProxyReader = exports.Proxy.Reader;\nexports.Writer.Dir = exports.DirWriter = exports.Dir.Writer;\nexports.Writer.File = exports.FileWriter = exports.File.Writer;\nexports.Writer.Link = exports.LinkWriter = exports.Link.Writer;\nexports.Writer.Proxy = exports.ProxyWriter = exports.Proxy.Writer;\nexports.collect = __webpack_require__(/*! ./lib/collect.js */ \"(rsc)/./node_modules/fstream/lib/collect.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9mc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBQSwrR0FBMkI7QUFDM0JBLHlHQUF5QjtBQUN6QkEseUdBQXlCO0FBRXpCQSxZQUFZLEdBQUc7SUFDYkcsUUFBUUQsbUJBQU9BLENBQUM7SUFDaEJFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ2xCO0FBRUFGLFdBQVcsR0FBRztJQUNaRyxRQUFRRCxtQkFBT0EsQ0FBQztJQUNoQkUsUUFBUUYsbUJBQU9BLENBQUM7QUFDbEI7QUFFQUYsWUFBWSxHQUFHO0lBQ2JHLFFBQVFELG1CQUFPQSxDQUFDO0lBQ2hCRSxRQUFRRixtQkFBT0EsQ0FBQztBQUNsQjtBQUVBRixhQUFhLEdBQUc7SUFDZEcsUUFBUUQsbUJBQU9BLENBQUM7SUFDaEJFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ2xCO0FBRUFGLGtCQUFrQixHQUFHQSxpQkFBaUIsR0FBR0EsUUFBUU0sR0FBRyxDQUFDSCxNQUFNO0FBQzNESCxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLFFBQVFLLElBQUksQ0FBQ0YsTUFBTTtBQUM5REgsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxRQUFRTyxJQUFJLENBQUNKLE1BQU07QUFDOURILG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBR0EsUUFBUVEsS0FBSyxDQUFDTCxNQUFNO0FBRWpFSCxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLFFBQVFNLEdBQUcsQ0FBQ0YsTUFBTTtBQUMzREosbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxRQUFRSyxJQUFJLENBQUNELE1BQU07QUFDOURKLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsUUFBUU8sSUFBSSxDQUFDSCxNQUFNO0FBQzlESixvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUdBLFFBQVFRLEtBQUssQ0FBQ0osTUFBTTtBQUVqRUosNEdBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltZXNoZWV0LXByb2Nlc3Nvci8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2ZzdHJlYW0uanM/MWY1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLkFic3RyYWN0ID0gcmVxdWlyZSgnLi9saWIvYWJzdHJhY3QuanMnKVxuZXhwb3J0cy5SZWFkZXIgPSByZXF1aXJlKCcuL2xpYi9yZWFkZXIuanMnKVxuZXhwb3J0cy5Xcml0ZXIgPSByZXF1aXJlKCcuL2xpYi93cml0ZXIuanMnKVxuXG5leHBvcnRzLkZpbGUgPSB7XG4gIFJlYWRlcjogcmVxdWlyZSgnLi9saWIvZmlsZS1yZWFkZXIuanMnKSxcbiAgV3JpdGVyOiByZXF1aXJlKCcuL2xpYi9maWxlLXdyaXRlci5qcycpXG59XG5cbmV4cG9ydHMuRGlyID0ge1xuICBSZWFkZXI6IHJlcXVpcmUoJy4vbGliL2Rpci1yZWFkZXIuanMnKSxcbiAgV3JpdGVyOiByZXF1aXJlKCcuL2xpYi9kaXItd3JpdGVyLmpzJylcbn1cblxuZXhwb3J0cy5MaW5rID0ge1xuICBSZWFkZXI6IHJlcXVpcmUoJy4vbGliL2xpbmstcmVhZGVyLmpzJyksXG4gIFdyaXRlcjogcmVxdWlyZSgnLi9saWIvbGluay13cml0ZXIuanMnKVxufVxuXG5leHBvcnRzLlByb3h5ID0ge1xuICBSZWFkZXI6IHJlcXVpcmUoJy4vbGliL3Byb3h5LXJlYWRlci5qcycpLFxuICBXcml0ZXI6IHJlcXVpcmUoJy4vbGliL3Byb3h5LXdyaXRlci5qcycpXG59XG5cbmV4cG9ydHMuUmVhZGVyLkRpciA9IGV4cG9ydHMuRGlyUmVhZGVyID0gZXhwb3J0cy5EaXIuUmVhZGVyXG5leHBvcnRzLlJlYWRlci5GaWxlID0gZXhwb3J0cy5GaWxlUmVhZGVyID0gZXhwb3J0cy5GaWxlLlJlYWRlclxuZXhwb3J0cy5SZWFkZXIuTGluayA9IGV4cG9ydHMuTGlua1JlYWRlciA9IGV4cG9ydHMuTGluay5SZWFkZXJcbmV4cG9ydHMuUmVhZGVyLlByb3h5ID0gZXhwb3J0cy5Qcm94eVJlYWRlciA9IGV4cG9ydHMuUHJveHkuUmVhZGVyXG5cbmV4cG9ydHMuV3JpdGVyLkRpciA9IGV4cG9ydHMuRGlyV3JpdGVyID0gZXhwb3J0cy5EaXIuV3JpdGVyXG5leHBvcnRzLldyaXRlci5GaWxlID0gZXhwb3J0cy5GaWxlV3JpdGVyID0gZXhwb3J0cy5GaWxlLldyaXRlclxuZXhwb3J0cy5Xcml0ZXIuTGluayA9IGV4cG9ydHMuTGlua1dyaXRlciA9IGV4cG9ydHMuTGluay5Xcml0ZXJcbmV4cG9ydHMuV3JpdGVyLlByb3h5ID0gZXhwb3J0cy5Qcm94eVdyaXRlciA9IGV4cG9ydHMuUHJveHkuV3JpdGVyXG5cbmV4cG9ydHMuY29sbGVjdCA9IHJlcXVpcmUoJy4vbGliL2NvbGxlY3QuanMnKVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJBYnN0cmFjdCIsInJlcXVpcmUiLCJSZWFkZXIiLCJXcml0ZXIiLCJGaWxlIiwiRGlyIiwiTGluayIsIlByb3h5IiwiRGlyUmVhZGVyIiwiRmlsZVJlYWRlciIsIkxpbmtSZWFkZXIiLCJQcm94eVJlYWRlciIsIkRpcldyaXRlciIsIkZpbGVXcml0ZXIiLCJMaW5rV3JpdGVyIiwiUHJveHlXcml0ZXIiLCJjb2xsZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/fstream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/abstract.js":
/*!**********************************************!*\
  !*** ./node_modules/fstream/lib/abstract.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// the parent class for all fstreams.\nmodule.exports = Abstract;\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nfunction Abstract() {\n    Stream.call(this);\n}\ninherits(Abstract, Stream);\nAbstract.prototype.on = function(ev, fn) {\n    if (ev === \"ready\" && this.ready) {\n        process.nextTick(fn.bind(this));\n    } else {\n        Stream.prototype.on.call(this, ev, fn);\n    }\n    return this;\n};\nAbstract.prototype.abort = function() {\n    this._aborted = true;\n    this.emit(\"abort\");\n};\nAbstract.prototype.destroy = function() {};\nAbstract.prototype.warn = function(msg, code) {\n    var self = this;\n    var er = decorate(msg, code, self);\n    if (!self.listeners(\"warn\")) {\n        console.error(\"%s %s\\n\" + \"path = %s\\n\" + \"syscall = %s\\n\" + \"fstream_type = %s\\n\" + \"fstream_path = %s\\n\" + \"fstream_unc_path = %s\\n\" + \"fstream_class = %s\\n\" + \"fstream_stack =\\n%s\\n\", code || \"UNKNOWN\", er.stack, er.path, er.syscall, er.fstream_type, er.fstream_path, er.fstream_unc_path, er.fstream_class, er.fstream_stack.join(\"\\n\"));\n    } else {\n        self.emit(\"warn\", er);\n    }\n};\nAbstract.prototype.info = function(msg, code) {\n    this.emit(\"info\", msg, code);\n};\nAbstract.prototype.error = function(msg, code, th) {\n    var er = decorate(msg, code, this);\n    if (th) throw er;\n    else this.emit(\"error\", er);\n};\nfunction decorate(er, code, self) {\n    if (!(er instanceof Error)) er = new Error(er);\n    er.code = er.code || code;\n    er.path = er.path || self.path;\n    er.fstream_type = er.fstream_type || self.type;\n    er.fstream_path = er.fstream_path || self.path;\n    if (self._path !== self.path) {\n        er.fstream_unc_path = er.fstream_unc_path || self._path;\n    }\n    if (self.linkpath) {\n        er.fstream_linkpath = er.fstream_linkpath || self.linkpath;\n    }\n    er.fstream_class = er.fstream_class || self.constructor.name;\n    er.fstream_stack = er.fstream_stack || new Error().stack.split(/\\n/).slice(3).map(function(s) {\n        return s.replace(/^ {4}at /, \"\");\n    });\n    return er;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvYWJzdHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBRXJDQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG9EQUF3QjtBQUNyQyxJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2QixTQUFTRjtJQUNQQyxPQUFPRyxJQUFJLENBQUMsSUFBSTtBQUNsQjtBQUVBRCxTQUFTSCxVQUFVQztBQUVuQkQsU0FBU0ssU0FBUyxDQUFDQyxFQUFFLEdBQUcsU0FBVUMsRUFBRSxFQUFFQyxFQUFFO0lBQ3RDLElBQUlELE9BQU8sV0FBVyxJQUFJLENBQUNFLEtBQUssRUFBRTtRQUNoQ0MsUUFBUUMsUUFBUSxDQUFDSCxHQUFHSSxJQUFJLENBQUMsSUFBSTtJQUMvQixPQUFPO1FBQ0xYLE9BQU9JLFNBQVMsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFRyxJQUFJQztJQUNyQztJQUNBLE9BQU8sSUFBSTtBQUNiO0FBRUFSLFNBQVNLLFNBQVMsQ0FBQ1EsS0FBSyxHQUFHO0lBQ3pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ2hCLElBQUksQ0FBQ0MsSUFBSSxDQUFDO0FBQ1o7QUFFQWYsU0FBU0ssU0FBUyxDQUFDVyxPQUFPLEdBQUcsWUFBYTtBQUUxQ2hCLFNBQVNLLFNBQVMsQ0FBQ1ksSUFBSSxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsSUFBSTtJQUMzQyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQyxLQUFLQyxTQUFTSixLQUFLQyxNQUFNQztJQUM3QixJQUFJLENBQUNBLEtBQUtHLFNBQVMsQ0FBQyxTQUFTO1FBQzNCQyxRQUFRQyxLQUFLLENBQUMsWUFDZCxnQkFDQSxtQkFDQSx3QkFDQSx3QkFDQSw0QkFDQSx5QkFDQSx5QkFDRU4sUUFBUSxXQUNSRSxHQUFHSyxLQUFLLEVBQ1JMLEdBQUdNLElBQUksRUFDUE4sR0FBR08sT0FBTyxFQUNWUCxHQUFHUSxZQUFZLEVBQ2ZSLEdBQUdTLFlBQVksRUFDZlQsR0FBR1UsZ0JBQWdCLEVBQ25CVixHQUFHVyxhQUFhLEVBQ2hCWCxHQUFHWSxhQUFhLENBQUNDLElBQUksQ0FBQztJQUMxQixPQUFPO1FBQ0xkLEtBQUtMLElBQUksQ0FBQyxRQUFRTTtJQUNwQjtBQUNGO0FBRUFyQixTQUFTSyxTQUFTLENBQUM4QixJQUFJLEdBQUcsU0FBVWpCLEdBQUcsRUFBRUMsSUFBSTtJQUMzQyxJQUFJLENBQUNKLElBQUksQ0FBQyxRQUFRRyxLQUFLQztBQUN6QjtBQUVBbkIsU0FBU0ssU0FBUyxDQUFDb0IsS0FBSyxHQUFHLFNBQVVQLEdBQUcsRUFBRUMsSUFBSSxFQUFFaUIsRUFBRTtJQUNoRCxJQUFJZixLQUFLQyxTQUFTSixLQUFLQyxNQUFNLElBQUk7SUFDakMsSUFBSWlCLElBQUksTUFBTWY7U0FDVCxJQUFJLENBQUNOLElBQUksQ0FBQyxTQUFTTTtBQUMxQjtBQUVBLFNBQVNDLFNBQVVELEVBQUUsRUFBRUYsSUFBSSxFQUFFQyxJQUFJO0lBQy9CLElBQUksQ0FBRUMsQ0FBQUEsY0FBY2dCLEtBQUksR0FBSWhCLEtBQUssSUFBSWdCLE1BQU1oQjtJQUMzQ0EsR0FBR0YsSUFBSSxHQUFHRSxHQUFHRixJQUFJLElBQUlBO0lBQ3JCRSxHQUFHTSxJQUFJLEdBQUdOLEdBQUdNLElBQUksSUFBSVAsS0FBS08sSUFBSTtJQUM5Qk4sR0FBR1EsWUFBWSxHQUFHUixHQUFHUSxZQUFZLElBQUlULEtBQUtrQixJQUFJO0lBQzlDakIsR0FBR1MsWUFBWSxHQUFHVCxHQUFHUyxZQUFZLElBQUlWLEtBQUtPLElBQUk7SUFDOUMsSUFBSVAsS0FBS21CLEtBQUssS0FBS25CLEtBQUtPLElBQUksRUFBRTtRQUM1Qk4sR0FBR1UsZ0JBQWdCLEdBQUdWLEdBQUdVLGdCQUFnQixJQUFJWCxLQUFLbUIsS0FBSztJQUN6RDtJQUNBLElBQUluQixLQUFLb0IsUUFBUSxFQUFFO1FBQ2pCbkIsR0FBR29CLGdCQUFnQixHQUFHcEIsR0FBR29CLGdCQUFnQixJQUFJckIsS0FBS29CLFFBQVE7SUFDNUQ7SUFDQW5CLEdBQUdXLGFBQWEsR0FBR1gsR0FBR1csYUFBYSxJQUFJWixLQUFLc0IsV0FBVyxDQUFDQyxJQUFJO0lBQzVEdEIsR0FBR1ksYUFBYSxHQUFHWixHQUFHWSxhQUFhLElBQ2pDLElBQUlJLFFBQVFYLEtBQUssQ0FBQ2tCLEtBQUssQ0FBQyxNQUFNQyxLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDLFNBQVVDLENBQUM7UUFDcEQsT0FBT0EsRUFBRUMsT0FBTyxDQUFDLFlBQVk7SUFDL0I7SUFFRixPQUFPM0I7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RpbWVzaGVldC1wcm9jZXNzb3IvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvYWJzdHJhY3QuanM/NjRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGUgcGFyZW50IGNsYXNzIGZvciBhbGwgZnN0cmVhbXMuXG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RcblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBBYnN0cmFjdCAoKSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpXG59XG5cbmluaGVyaXRzKEFic3RyYWN0LCBTdHJlYW0pXG5cbkFic3RyYWN0LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgaWYgKGV2ID09PSAncmVhZHknICYmIHRoaXMucmVhZHkpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZuLmJpbmQodGhpcykpXG4gIH0gZWxzZSB7XG4gICAgU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5BYnN0cmFjdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2Fib3J0ZWQgPSB0cnVlXG4gIHRoaXMuZW1pdCgnYWJvcnQnKVxufVxuXG5BYnN0cmFjdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9XG5cbkFic3RyYWN0LnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKG1zZywgY29kZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGVyID0gZGVjb3JhdGUobXNnLCBjb2RlLCBzZWxmKVxuICBpZiAoIXNlbGYubGlzdGVuZXJzKCd3YXJuJykpIHtcbiAgICBjb25zb2xlLmVycm9yKCclcyAlc1xcbicgK1xuICAgICdwYXRoID0gJXNcXG4nICtcbiAgICAnc3lzY2FsbCA9ICVzXFxuJyArXG4gICAgJ2ZzdHJlYW1fdHlwZSA9ICVzXFxuJyArXG4gICAgJ2ZzdHJlYW1fcGF0aCA9ICVzXFxuJyArXG4gICAgJ2ZzdHJlYW1fdW5jX3BhdGggPSAlc1xcbicgK1xuICAgICdmc3RyZWFtX2NsYXNzID0gJXNcXG4nICtcbiAgICAnZnN0cmVhbV9zdGFjayA9XFxuJXNcXG4nLFxuICAgICAgY29kZSB8fCAnVU5LTk9XTicsXG4gICAgICBlci5zdGFjayxcbiAgICAgIGVyLnBhdGgsXG4gICAgICBlci5zeXNjYWxsLFxuICAgICAgZXIuZnN0cmVhbV90eXBlLFxuICAgICAgZXIuZnN0cmVhbV9wYXRoLFxuICAgICAgZXIuZnN0cmVhbV91bmNfcGF0aCxcbiAgICAgIGVyLmZzdHJlYW1fY2xhc3MsXG4gICAgICBlci5mc3RyZWFtX3N0YWNrLmpvaW4oJ1xcbicpKVxuICB9IGVsc2Uge1xuICAgIHNlbGYuZW1pdCgnd2FybicsIGVyKVxuICB9XG59XG5cbkFic3RyYWN0LnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKG1zZywgY29kZSkge1xuICB0aGlzLmVtaXQoJ2luZm8nLCBtc2csIGNvZGUpXG59XG5cbkFic3RyYWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChtc2csIGNvZGUsIHRoKSB7XG4gIHZhciBlciA9IGRlY29yYXRlKG1zZywgY29kZSwgdGhpcylcbiAgaWYgKHRoKSB0aHJvdyBlclxuICBlbHNlIHRoaXMuZW1pdCgnZXJyb3InLCBlcilcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGUgKGVyLCBjb2RlLCBzZWxmKSB7XG4gIGlmICghKGVyIGluc3RhbmNlb2YgRXJyb3IpKSBlciA9IG5ldyBFcnJvcihlcilcbiAgZXIuY29kZSA9IGVyLmNvZGUgfHwgY29kZVxuICBlci5wYXRoID0gZXIucGF0aCB8fCBzZWxmLnBhdGhcbiAgZXIuZnN0cmVhbV90eXBlID0gZXIuZnN0cmVhbV90eXBlIHx8IHNlbGYudHlwZVxuICBlci5mc3RyZWFtX3BhdGggPSBlci5mc3RyZWFtX3BhdGggfHwgc2VsZi5wYXRoXG4gIGlmIChzZWxmLl9wYXRoICE9PSBzZWxmLnBhdGgpIHtcbiAgICBlci5mc3RyZWFtX3VuY19wYXRoID0gZXIuZnN0cmVhbV91bmNfcGF0aCB8fCBzZWxmLl9wYXRoXG4gIH1cbiAgaWYgKHNlbGYubGlua3BhdGgpIHtcbiAgICBlci5mc3RyZWFtX2xpbmtwYXRoID0gZXIuZnN0cmVhbV9saW5rcGF0aCB8fCBzZWxmLmxpbmtwYXRoXG4gIH1cbiAgZXIuZnN0cmVhbV9jbGFzcyA9IGVyLmZzdHJlYW1fY2xhc3MgfHwgc2VsZi5jb25zdHJ1Y3Rvci5uYW1lXG4gIGVyLmZzdHJlYW1fc3RhY2sgPSBlci5mc3RyZWFtX3N0YWNrIHx8XG4gICAgbmV3IEVycm9yKCkuc3RhY2suc3BsaXQoL1xcbi8pLnNsaWNlKDMpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXiB7NH1hdCAvLCAnJylcbiAgICB9KVxuXG4gIHJldHVybiBlclxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJBYnN0cmFjdCIsIlN0cmVhbSIsInJlcXVpcmUiLCJpbmhlcml0cyIsImNhbGwiLCJwcm90b3R5cGUiLCJvbiIsImV2IiwiZm4iLCJyZWFkeSIsInByb2Nlc3MiLCJuZXh0VGljayIsImJpbmQiLCJhYm9ydCIsIl9hYm9ydGVkIiwiZW1pdCIsImRlc3Ryb3kiLCJ3YXJuIiwibXNnIiwiY29kZSIsInNlbGYiLCJlciIsImRlY29yYXRlIiwibGlzdGVuZXJzIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJwYXRoIiwic3lzY2FsbCIsImZzdHJlYW1fdHlwZSIsImZzdHJlYW1fcGF0aCIsImZzdHJlYW1fdW5jX3BhdGgiLCJmc3RyZWFtX2NsYXNzIiwiZnN0cmVhbV9zdGFjayIsImpvaW4iLCJpbmZvIiwidGgiLCJFcnJvciIsInR5cGUiLCJfcGF0aCIsImxpbmtwYXRoIiwiZnN0cmVhbV9saW5rcGF0aCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInNwbGl0Iiwic2xpY2UiLCJtYXAiLCJzIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/abstract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/collect.js":
/*!*********************************************!*\
  !*** ./node_modules/fstream/lib/collect.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = collect;\nfunction collect(stream) {\n    if (stream._collected) return;\n    if (stream._paused) return stream.on(\"resume\", collect.bind(null, stream));\n    stream._collected = true;\n    stream.pause();\n    stream.on(\"data\", save);\n    stream.on(\"end\", save);\n    var buf = [];\n    function save(b) {\n        if (typeof b === \"string\") b = new Buffer(b);\n        if (Buffer.isBuffer(b) && !b.length) return;\n        buf.push(b);\n    }\n    stream.on(\"entry\", saveEntry);\n    var entryBuffer = [];\n    function saveEntry(e) {\n        collect(e);\n        entryBuffer.push(e);\n    }\n    stream.on(\"proxy\", proxyPause);\n    function proxyPause(p) {\n        p.pause();\n    }\n    // replace the pipe method with a new version that will\n    // unlock the buffered stuff.  if you just call .pipe()\n    // without a destination, then it'll re-play the events.\n    stream.pipe = function(orig) {\n        return function(dest) {\n            // console.error(' === open the pipes', dest && dest.path)\n            // let the entries flow through one at a time.\n            // Once they're all done, then we can resume completely.\n            var e = 0;\n            (function unblockEntry() {\n                var entry = entryBuffer[e++];\n                // console.error(\" ==== unblock entry\", entry && entry.path)\n                if (!entry) return resume();\n                entry.on(\"end\", unblockEntry);\n                if (dest) dest.add(entry);\n                else stream.emit(\"entry\", entry);\n            })();\n            function resume() {\n                stream.removeListener(\"entry\", saveEntry);\n                stream.removeListener(\"data\", save);\n                stream.removeListener(\"end\", save);\n                stream.pipe = orig;\n                if (dest) stream.pipe(dest);\n                buf.forEach(function(b) {\n                    if (b) stream.emit(\"data\", b);\n                    else stream.emit(\"end\");\n                });\n                stream.resume();\n            }\n            return dest;\n        };\n    }(stream.pipe);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lc2hlZXQtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2NvbGxlY3QuanM/NzU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3RcblxuZnVuY3Rpb24gY29sbGVjdCAoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW0uX2NvbGxlY3RlZCkgcmV0dXJuXG5cbiAgaWYgKHN0cmVhbS5fcGF1c2VkKSByZXR1cm4gc3RyZWFtLm9uKCdyZXN1bWUnLCBjb2xsZWN0LmJpbmQobnVsbCwgc3RyZWFtKSlcblxuICBzdHJlYW0uX2NvbGxlY3RlZCA9IHRydWVcbiAgc3RyZWFtLnBhdXNlKClcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBzYXZlKVxuICBzdHJlYW0ub24oJ2VuZCcsIHNhdmUpXG4gIHZhciBidWYgPSBbXVxuICBmdW5jdGlvbiBzYXZlIChiKSB7XG4gICAgaWYgKHR5cGVvZiBiID09PSAnc3RyaW5nJykgYiA9IG5ldyBCdWZmZXIoYilcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGIpICYmICFiLmxlbmd0aCkgcmV0dXJuXG4gICAgYnVmLnB1c2goYilcbiAgfVxuXG4gIHN0cmVhbS5vbignZW50cnknLCBzYXZlRW50cnkpXG4gIHZhciBlbnRyeUJ1ZmZlciA9IFtdXG4gIGZ1bmN0aW9uIHNhdmVFbnRyeSAoZSkge1xuICAgIGNvbGxlY3QoZSlcbiAgICBlbnRyeUJ1ZmZlci5wdXNoKGUpXG4gIH1cblxuICBzdHJlYW0ub24oJ3Byb3h5JywgcHJveHlQYXVzZSlcbiAgZnVuY3Rpb24gcHJveHlQYXVzZSAocCkge1xuICAgIHAucGF1c2UoKVxuICB9XG5cbiAgLy8gcmVwbGFjZSB0aGUgcGlwZSBtZXRob2Qgd2l0aCBhIG5ldyB2ZXJzaW9uIHRoYXQgd2lsbFxuICAvLyB1bmxvY2sgdGhlIGJ1ZmZlcmVkIHN0dWZmLiAgaWYgeW91IGp1c3QgY2FsbCAucGlwZSgpXG4gIC8vIHdpdGhvdXQgYSBkZXN0aW5hdGlvbiwgdGhlbiBpdCdsbCByZS1wbGF5IHRoZSBldmVudHMuXG4gIHN0cmVhbS5waXBlID0gKGZ1bmN0aW9uIChvcmlnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAvLyBjb25zb2xlLmVycm9yKCcgPT09IG9wZW4gdGhlIHBpcGVzJywgZGVzdCAmJiBkZXN0LnBhdGgpXG5cbiAgICAgIC8vIGxldCB0aGUgZW50cmllcyBmbG93IHRocm91Z2ggb25lIGF0IGEgdGltZS5cbiAgICAgIC8vIE9uY2UgdGhleSdyZSBhbGwgZG9uZSwgdGhlbiB3ZSBjYW4gcmVzdW1lIGNvbXBsZXRlbHkuXG4gICAgICB2YXIgZSA9IDBcbiAgICAgIDsoZnVuY3Rpb24gdW5ibG9ja0VudHJ5ICgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cnlCdWZmZXJbZSsrXVxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiID09PT0gdW5ibG9jayBlbnRyeVwiLCBlbnRyeSAmJiBlbnRyeS5wYXRoKVxuICAgICAgICBpZiAoIWVudHJ5KSByZXR1cm4gcmVzdW1lKClcbiAgICAgICAgZW50cnkub24oJ2VuZCcsIHVuYmxvY2tFbnRyeSlcbiAgICAgICAgaWYgKGRlc3QpIGRlc3QuYWRkKGVudHJ5KVxuICAgICAgICBlbHNlIHN0cmVhbS5lbWl0KCdlbnRyeScsIGVudHJ5KVxuICAgICAgfSkoKVxuXG4gICAgICBmdW5jdGlvbiByZXN1bWUgKCkge1xuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VudHJ5Jywgc2F2ZUVudHJ5KVxuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzYXZlKVxuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHNhdmUpXG5cbiAgICAgICAgc3RyZWFtLnBpcGUgPSBvcmlnXG4gICAgICAgIGlmIChkZXN0KSBzdHJlYW0ucGlwZShkZXN0KVxuXG4gICAgICAgIGJ1Zi5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgaWYgKGIpIHN0cmVhbS5lbWl0KCdkYXRhJywgYilcbiAgICAgICAgICBlbHNlIHN0cmVhbS5lbWl0KCdlbmQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5yZXN1bWUoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzdFxuICAgIH1cbiAgfSkoc3RyZWFtLnBpcGUpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbGxlY3QiLCJzdHJlYW0iLCJfY29sbGVjdGVkIiwiX3BhdXNlZCIsIm9uIiwiYmluZCIsInBhdXNlIiwic2F2ZSIsImJ1ZiIsImIiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImxlbmd0aCIsInB1c2giLCJzYXZlRW50cnkiLCJlbnRyeUJ1ZmZlciIsImUiLCJwcm94eVBhdXNlIiwicCIsInBpcGUiLCJvcmlnIiwiZGVzdCIsInVuYmxvY2tFbnRyeSIsImVudHJ5IiwicmVzdW1lIiwiYWRkIiwiZW1pdCIsInJlbW92ZUxpc3RlbmVyIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsUUFBU0MsTUFBTTtJQUN0QixJQUFJQSxPQUFPQyxVQUFVLEVBQUU7SUFFdkIsSUFBSUQsT0FBT0UsT0FBTyxFQUFFLE9BQU9GLE9BQU9HLEVBQUUsQ0FBQyxVQUFVSixRQUFRSyxJQUFJLENBQUMsTUFBTUo7SUFFbEVBLE9BQU9DLFVBQVUsR0FBRztJQUNwQkQsT0FBT0ssS0FBSztJQUVaTCxPQUFPRyxFQUFFLENBQUMsUUFBUUc7SUFDbEJOLE9BQU9HLEVBQUUsQ0FBQyxPQUFPRztJQUNqQixJQUFJQyxNQUFNLEVBQUU7SUFDWixTQUFTRCxLQUFNRSxDQUFDO1FBQ2QsSUFBSSxPQUFPQSxNQUFNLFVBQVVBLElBQUksSUFBSUMsT0FBT0Q7UUFDMUMsSUFBSUMsT0FBT0MsUUFBUSxDQUFDRixNQUFNLENBQUNBLEVBQUVHLE1BQU0sRUFBRTtRQUNyQ0osSUFBSUssSUFBSSxDQUFDSjtJQUNYO0lBRUFSLE9BQU9HLEVBQUUsQ0FBQyxTQUFTVTtJQUNuQixJQUFJQyxjQUFjLEVBQUU7SUFDcEIsU0FBU0QsVUFBV0UsQ0FBQztRQUNuQmhCLFFBQVFnQjtRQUNSRCxZQUFZRixJQUFJLENBQUNHO0lBQ25CO0lBRUFmLE9BQU9HLEVBQUUsQ0FBQyxTQUFTYTtJQUNuQixTQUFTQSxXQUFZQyxDQUFDO1FBQ3BCQSxFQUFFWixLQUFLO0lBQ1Q7SUFFQSx1REFBdUQ7SUFDdkQsdURBQXVEO0lBQ3ZELHdEQUF3RDtJQUN4REwsT0FBT2tCLElBQUksR0FBRyxBQUFDLFNBQVVDLElBQUk7UUFDM0IsT0FBTyxTQUFVQyxJQUFJO1lBQ25CLDBEQUEwRDtZQUUxRCw4Q0FBOEM7WUFDOUMsd0RBQXdEO1lBQ3hELElBQUlMLElBQUk7WUFDTixDQUFBLFNBQVNNO2dCQUNULElBQUlDLFFBQVFSLFdBQVcsQ0FBQ0MsSUFBSTtnQkFDNUIsNERBQTREO2dCQUM1RCxJQUFJLENBQUNPLE9BQU8sT0FBT0M7Z0JBQ25CRCxNQUFNbkIsRUFBRSxDQUFDLE9BQU9rQjtnQkFDaEIsSUFBSUQsTUFBTUEsS0FBS0ksR0FBRyxDQUFDRjtxQkFDZHRCLE9BQU95QixJQUFJLENBQUMsU0FBU0g7WUFDNUIsQ0FBQTtZQUVBLFNBQVNDO2dCQUNQdkIsT0FBTzBCLGNBQWMsQ0FBQyxTQUFTYjtnQkFDL0JiLE9BQU8wQixjQUFjLENBQUMsUUFBUXBCO2dCQUM5Qk4sT0FBTzBCLGNBQWMsQ0FBQyxPQUFPcEI7Z0JBRTdCTixPQUFPa0IsSUFBSSxHQUFHQztnQkFDZCxJQUFJQyxNQUFNcEIsT0FBT2tCLElBQUksQ0FBQ0U7Z0JBRXRCYixJQUFJb0IsT0FBTyxDQUFDLFNBQVVuQixDQUFDO29CQUNyQixJQUFJQSxHQUFHUixPQUFPeUIsSUFBSSxDQUFDLFFBQVFqQjt5QkFDdEJSLE9BQU95QixJQUFJLENBQUM7Z0JBQ25CO2dCQUVBekIsT0FBT3VCLE1BQU07WUFDZjtZQUVBLE9BQU9IO1FBQ1Q7SUFDRixFQUFHcEIsT0FBT2tCLElBQUk7QUFDaEIiLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvY29sbGVjdC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/collect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/dir-reader.js":
/*!************************************************!*\
  !*** ./node_modules/fstream/lib/dir-reader.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A thing that emits \"entry\" events with Reader objects\n// Pausing it causes it to stop emitting entry events, and also\n// pauses the current entry if there is one.\nmodule.exports = DirReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\nvar assert = (__webpack_require__(/*! assert */ \"assert\").ok);\ninherits(DirReader, Reader);\nfunction DirReader(props) {\n    var self = this;\n    if (!(self instanceof DirReader)) {\n        throw new Error(\"DirReader must be called as constructor.\");\n    }\n    // should already be established as a Directory type\n    if (props.type !== \"Directory\" || !props.Directory) {\n        throw new Error(\"Non-directory type \" + props.type);\n    }\n    self.entries = null;\n    self._index = -1;\n    self._paused = false;\n    self._length = -1;\n    if (props.sort) {\n        this.sort = props.sort;\n    }\n    Reader.call(this, props);\n}\nDirReader.prototype._getEntries = function() {\n    var self = this;\n    // race condition.  might pause() before calling _getEntries,\n    // and then resume, and try to get them a second time.\n    if (self._gotEntries) return;\n    self._gotEntries = true;\n    fs.readdir(self._path, function(er, entries) {\n        if (er) return self.error(er);\n        self.entries = entries;\n        self.emit(\"entries\", entries);\n        if (self._paused) self.once(\"resume\", processEntries);\n        else processEntries();\n        function processEntries() {\n            self._length = self.entries.length;\n            if (typeof self.sort === \"function\") {\n                self.entries = self.entries.sort(self.sort.bind(self));\n            }\n            self._read();\n        }\n    });\n};\n// start walking the dir, and emit an \"entry\" event for each one.\nDirReader.prototype._read = function() {\n    var self = this;\n    if (!self.entries) return self._getEntries();\n    if (self._paused || self._currentEntry || self._aborted) {\n        // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)\n        return;\n    }\n    self._index++;\n    if (self._index >= self.entries.length) {\n        if (!self._ended) {\n            self._ended = true;\n            self.emit(\"end\");\n            self.emit(\"close\");\n        }\n        return;\n    }\n    // ok, handle this one, then.\n    // save creating a proxy, by stat'ing the thing now.\n    var p = path.resolve(self._path, self.entries[self._index]);\n    assert(p !== self._path);\n    assert(self.entries[self._index]);\n    // set this to prevent trying to _read() again in the stat time.\n    self._currentEntry = p;\n    fs[self.props.follow ? \"stat\" : \"lstat\"](p, function(er, stat) {\n        if (er) return self.error(er);\n        var who = self._proxy || self;\n        stat.path = p;\n        stat.basename = path.basename(p);\n        stat.dirname = path.dirname(p);\n        var childProps = self.getChildProps.call(who, stat);\n        childProps.path = p;\n        childProps.basename = path.basename(p);\n        childProps.dirname = path.dirname(p);\n        var entry = Reader(childProps, stat);\n        // console.error(\"DR Entry\", p, stat.size)\n        self._currentEntry = entry;\n        // \"entry\" events are for direct entries in a specific dir.\n        // \"child\" events are for any and all children at all levels.\n        // This nomenclature is not completely final.\n        entry.on(\"pause\", function(who) {\n            if (!self._paused && !entry._disowned) {\n                self.pause(who);\n            }\n        });\n        entry.on(\"resume\", function(who) {\n            if (self._paused && !entry._disowned) {\n                self.resume(who);\n            }\n        });\n        entry.on(\"stat\", function(props) {\n            self.emit(\"_entryStat\", entry, props);\n            if (entry._aborted) return;\n            if (entry._paused) {\n                entry.once(\"resume\", function() {\n                    self.emit(\"entryStat\", entry, props);\n                });\n            } else self.emit(\"entryStat\", entry, props);\n        });\n        entry.on(\"ready\", function EMITCHILD() {\n            // console.error(\"DR emit child\", entry._path)\n            if (self._paused) {\n                // console.error(\"  DR emit child - try again later\")\n                // pause the child, and emit the \"entry\" event once we drain.\n                // console.error(\"DR pausing child entry\")\n                entry.pause(self);\n                return self.once(\"resume\", EMITCHILD);\n            }\n            // skip over sockets.  they can't be piped around properly,\n            // so there's really no sense even acknowledging them.\n            // if someone really wants to see them, they can listen to\n            // the \"socket\" events.\n            if (entry.type === \"Socket\") {\n                self.emit(\"socket\", entry);\n            } else {\n                self.emitEntry(entry);\n            }\n        });\n        var ended = false;\n        entry.on(\"close\", onend);\n        entry.on(\"disown\", onend);\n        function onend() {\n            if (ended) return;\n            ended = true;\n            self.emit(\"childEnd\", entry);\n            self.emit(\"entryEnd\", entry);\n            self._currentEntry = null;\n            if (!self._paused) {\n                self._read();\n            }\n        }\n        // XXX Remove this.  Works in node as of 0.6.2 or so.\n        // Long filenames should not break stuff.\n        entry.on(\"error\", function(er) {\n            if (entry._swallowErrors) {\n                self.warn(er);\n                entry.emit(\"end\");\n                entry.emit(\"close\");\n            } else {\n                self.emit(\"error\", er);\n            }\n        });\n        [\n            \"child\",\n            \"childEnd\",\n            \"warn\"\n        ].forEach(function(ev) {\n            entry.on(ev, self.emit.bind(self, ev));\n        });\n    });\n};\nDirReader.prototype.disown = function(entry) {\n    entry.emit(\"beforeDisown\");\n    entry._disowned = true;\n    entry.parent = entry.root = null;\n    if (entry === this._currentEntry) {\n        this._currentEntry = null;\n    }\n    entry.emit(\"disown\");\n};\nDirReader.prototype.getChildProps = function() {\n    return {\n        depth: this.depth + 1,\n        root: this.root || this,\n        parent: this,\n        follow: this.follow,\n        filter: this.filter,\n        sort: this.props.sort,\n        hardlinks: this.props.hardlinks\n    };\n};\nDirReader.prototype.pause = function(who) {\n    var self = this;\n    if (self._paused) return;\n    who = who || self;\n    self._paused = true;\n    if (self._currentEntry && self._currentEntry.pause) {\n        self._currentEntry.pause(who);\n    }\n    self.emit(\"pause\", who);\n};\nDirReader.prototype.resume = function(who) {\n    var self = this;\n    if (!self._paused) return;\n    who = who || self;\n    self._paused = false;\n    // console.error('DR Emit Resume', self._path)\n    self.emit(\"resume\", who);\n    if (self._paused) {\n        // console.error('DR Re-paused', self._path)\n        return;\n    }\n    if (self._currentEntry) {\n        if (self._currentEntry.resume) self._currentEntry.resume(who);\n    } else self._read();\n};\nDirReader.prototype.emitEntry = function(entry) {\n    this.emit(\"entry\", entry);\n    this.emit(\"child\", entry);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/dir-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/dir-writer.js":
/*!************************************************!*\
  !*** ./node_modules/fstream/lib/dir-writer.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// It is expected that, when .add() returns false, the consumer\n// of the DirWriter will pause until a \"drain\" event occurs. Note\n// that this is *almost always going to be the case*, unless the\n// thing being written is some sort of unsupported type, and thus\n// skipped over.\nmodule.exports = DirWriter;\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(rsc)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar mkdir = __webpack_require__(/*! mkdirp */ \"(rsc)/./node_modules/mkdirp/index.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar collect = __webpack_require__(/*! ./collect.js */ \"(rsc)/./node_modules/fstream/lib/collect.js\");\ninherits(DirWriter, Writer);\nfunction DirWriter(props) {\n    var self = this;\n    if (!(self instanceof DirWriter)) {\n        self.error(\"DirWriter must be called as constructor.\", null, true);\n    }\n    // should already be established as a Directory type\n    if (props.type !== \"Directory\" || !props.Directory) {\n        self.error(\"Non-directory type \" + props.type + \" \" + JSON.stringify(props), null, true);\n    }\n    Writer.call(this, props);\n}\nDirWriter.prototype._create = function() {\n    var self = this;\n    mkdir(self._path, Writer.dirmode, function(er) {\n        if (er) return self.error(er);\n        // ready to start getting entries!\n        self.ready = true;\n        self.emit(\"ready\");\n        self._process();\n    });\n};\n// a DirWriter has an add(entry) method, but its .write() doesn't\n// do anything.  Why a no-op rather than a throw?  Because this\n// leaves open the door for writing directory metadata for\n// gnu/solaris style dumpdirs.\nDirWriter.prototype.write = function() {\n    return true;\n};\nDirWriter.prototype.end = function() {\n    this._ended = true;\n    this._process();\n};\nDirWriter.prototype.add = function(entry) {\n    var self = this;\n    // console.error('\\tadd', entry._path, '->', self._path)\n    collect(entry);\n    if (!self.ready || self._currentEntry) {\n        self._buffer.push(entry);\n        return false;\n    }\n    // create a new writer, and pipe the incoming entry into it.\n    if (self._ended) {\n        return self.error(\"add after end\");\n    }\n    self._buffer.push(entry);\n    self._process();\n    return this._buffer.length === 0;\n};\nDirWriter.prototype._process = function() {\n    var self = this;\n    // console.error('DW Process p=%j', self._processing, self.basename)\n    if (self._processing) return;\n    var entry = self._buffer.shift();\n    if (!entry) {\n        // console.error(\"DW Drain\")\n        self.emit(\"drain\");\n        if (self._ended) self._finish();\n        return;\n    }\n    self._processing = true;\n    // console.error(\"DW Entry\", entry._path)\n    self.emit(\"entry\", entry);\n    // ok, add this entry\n    //\n    // don't allow recursive copying\n    var p = entry;\n    var pp;\n    do {\n        pp = p._path || p.path;\n        if (pp === self.root._path || pp === self._path || pp && pp.indexOf(self._path) === 0) {\n            // console.error('DW Exit (recursive)', entry.basename, self._path)\n            self._processing = false;\n            if (entry._collected) entry.pipe();\n            return self._process();\n        }\n        p = p.parent;\n    }while (p);\n    // console.error(\"DW not recursive\")\n    // chop off the entry's root dir, replace with ours\n    var props = {\n        parent: self,\n        root: self.root || self,\n        type: entry.type,\n        depth: self.depth + 1\n    };\n    pp = entry._path || entry.path || entry.props.path;\n    if (entry.parent) {\n        pp = pp.substr(entry.parent._path.length + 1);\n    }\n    // get rid of any ../../ shenanigans\n    props.path = path.join(self.path, path.join(\"/\", pp));\n    // if i have a filter, the child should inherit it.\n    props.filter = self.filter;\n    // all the rest of the stuff, copy over from the source.\n    Object.keys(entry.props).forEach(function(k) {\n        if (!props.hasOwnProperty(k)) {\n            props[k] = entry.props[k];\n        }\n    });\n    // not sure at this point what kind of writer this is.\n    var child = self._currentChild = new Writer(props);\n    child.on(\"ready\", function() {\n        // console.error(\"DW Child Ready\", child.type, child._path)\n        // console.error(\"  resuming\", entry._path)\n        entry.pipe(child);\n        entry.resume();\n    });\n    // XXX Make this work in node.\n    // Long filenames should not break stuff.\n    child.on(\"error\", function(er) {\n        if (child._swallowErrors) {\n            self.warn(er);\n            child.emit(\"end\");\n            child.emit(\"close\");\n        } else {\n            self.emit(\"error\", er);\n        }\n    });\n    // we fire _end internally *after* end, so that we don't move on\n    // until any \"end\" listeners have had their chance to do stuff.\n    child.on(\"close\", onend);\n    var ended = false;\n    function onend() {\n        if (ended) return;\n        ended = true;\n        // console.error(\"* DW Child end\", child.basename)\n        self._currentChild = null;\n        self._processing = false;\n        self._process();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/dir-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/file-reader.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/file-reader.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Basically just a wrapper around an fs.ReadStream\nmodule.exports = FileReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\nvar EOF = {\n    EOF: true\n};\nvar CLOSE = {\n    CLOSE: true\n};\ninherits(FileReader, Reader);\nfunction FileReader(props) {\n    // console.error(\"    FR create\", props.path, props.size, new Error().stack)\n    var self = this;\n    if (!(self instanceof FileReader)) {\n        throw new Error(\"FileReader must be called as constructor.\");\n    }\n    // should already be established as a File type\n    // XXX Todo: preserve hardlinks by tracking dev+inode+nlink,\n    // with a HardLinkReader class.\n    if (!(props.type === \"Link\" && props.Link || props.type === \"File\" && props.File)) {\n        throw new Error(\"Non-file type \" + props.type);\n    }\n    self._buffer = [];\n    self._bytesEmitted = 0;\n    Reader.call(self, props);\n}\nFileReader.prototype._getStream = function() {\n    var self = this;\n    var stream = self._stream = fs.createReadStream(self._path, self.props);\n    if (self.props.blksize) {\n        stream.bufferSize = self.props.blksize;\n    }\n    stream.on(\"open\", self.emit.bind(self, \"open\"));\n    stream.on(\"data\", function(c) {\n        // console.error('\\t\\t%d %s', c.length, self.basename)\n        self._bytesEmitted += c.length;\n        // no point saving empty chunks\n        if (!c.length) {\n            return;\n        } else if (self._paused || self._buffer.length) {\n            self._buffer.push(c);\n            self._read();\n        } else self.emit(\"data\", c);\n    });\n    stream.on(\"end\", function() {\n        if (self._paused || self._buffer.length) {\n            // console.error('FR Buffering End', self._path)\n            self._buffer.push(EOF);\n            self._read();\n        } else {\n            self.emit(\"end\");\n        }\n        if (self._bytesEmitted !== self.props.size) {\n            self.error(\"Didn't get expected byte count\\n\" + \"expect: \" + self.props.size + \"\\n\" + \"actual: \" + self._bytesEmitted);\n        }\n    });\n    stream.on(\"close\", function() {\n        if (self._paused || self._buffer.length) {\n            // console.error('FR Buffering Close', self._path)\n            self._buffer.push(CLOSE);\n            self._read();\n        } else {\n            // console.error('FR close 1', self._path)\n            self.emit(\"close\");\n        }\n    });\n    stream.on(\"error\", function(e) {\n        self.emit(\"error\", e);\n    });\n    self._read();\n};\nFileReader.prototype._read = function() {\n    var self = this;\n    // console.error('FR _read', self._path)\n    if (self._paused) {\n        // console.error('FR _read paused', self._path)\n        return;\n    }\n    if (!self._stream) {\n        // console.error('FR _getStream calling', self._path)\n        return self._getStream();\n    }\n    // clear out the buffer, if there is one.\n    if (self._buffer.length) {\n        // console.error('FR _read has buffer', self._buffer.length, self._path)\n        var buf = self._buffer;\n        for(var i = 0, l = buf.length; i < l; i++){\n            var c = buf[i];\n            if (c === EOF) {\n                // console.error('FR Read emitting buffered end', self._path)\n                self.emit(\"end\");\n            } else if (c === CLOSE) {\n                // console.error('FR Read emitting buffered close', self._path)\n                self.emit(\"close\");\n            } else {\n                // console.error('FR Read emitting buffered data', self._path)\n                self.emit(\"data\", c);\n            }\n            if (self._paused) {\n                // console.error('FR Read Re-pausing at '+i, self._path)\n                self._buffer = buf.slice(i);\n                return;\n            }\n        }\n        self._buffer.length = 0;\n    }\n// console.error(\"FR _read done\")\n// that's about all there is to it.\n};\nFileReader.prototype.pause = function(who) {\n    var self = this;\n    // console.error('FR Pause', self._path)\n    if (self._paused) return;\n    who = who || self;\n    self._paused = true;\n    if (self._stream) self._stream.pause();\n    self.emit(\"pause\", who);\n};\nFileReader.prototype.resume = function(who) {\n    var self = this;\n    // console.error('FR Resume', self._path)\n    if (!self._paused) return;\n    who = who || self;\n    self.emit(\"resume\", who);\n    self._paused = false;\n    if (self._stream) self._stream.resume();\n    self._read();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/file-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/file-writer.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/file-writer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = FileWriter;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(rsc)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar EOF = {};\ninherits(FileWriter, Writer);\nfunction FileWriter(props) {\n    var self = this;\n    if (!(self instanceof FileWriter)) {\n        throw new Error(\"FileWriter must be called as constructor.\");\n    }\n    // should already be established as a File type\n    if (props.type !== \"File\" || !props.File) {\n        throw new Error(\"Non-file type \" + props.type);\n    }\n    self._buffer = [];\n    self._bytesWritten = 0;\n    Writer.call(this, props);\n}\nFileWriter.prototype._create = function() {\n    var self = this;\n    if (self._stream) return;\n    var so = {};\n    if (self.props.flags) so.flags = self.props.flags;\n    so.mode = Writer.filemode;\n    if (self._old && self._old.blksize) so.bufferSize = self._old.blksize;\n    self._stream = fs.createWriteStream(self._path, so);\n    self._stream.on(\"open\", function() {\n        // console.error(\"FW open\", self._buffer, self._path)\n        self.ready = true;\n        self._buffer.forEach(function(c) {\n            if (c === EOF) self._stream.end();\n            else self._stream.write(c);\n        });\n        self.emit(\"ready\");\n        // give this a kick just in case it needs it.\n        self.emit(\"drain\");\n    });\n    self._stream.on(\"error\", function(er) {\n        self.emit(\"error\", er);\n    });\n    self._stream.on(\"drain\", function() {\n        self.emit(\"drain\");\n    });\n    self._stream.on(\"close\", function() {\n        // console.error('\\n\\nFW Stream Close', self._path, self.size)\n        self._finish();\n    });\n};\nFileWriter.prototype.write = function(c) {\n    var self = this;\n    self._bytesWritten += c.length;\n    if (!self.ready) {\n        if (!Buffer.isBuffer(c) && typeof c !== \"string\") {\n            throw new Error(\"invalid write data\");\n        }\n        self._buffer.push(c);\n        return false;\n    }\n    var ret = self._stream.write(c);\n    // console.error('\\t-- fw wrote, _stream says', ret, self._stream._queue.length)\n    // allow 2 buffered writes, because otherwise there's just too\n    // much stop and go bs.\n    if (ret === false && self._stream._queue) {\n        return self._stream._queue.length <= 2;\n    } else {\n        return ret;\n    }\n};\nFileWriter.prototype.end = function(c) {\n    var self = this;\n    if (c) self.write(c);\n    if (!self.ready) {\n        self._buffer.push(EOF);\n        return false;\n    }\n    return self._stream.end();\n};\nFileWriter.prototype._finish = function() {\n    var self = this;\n    if (typeof self.size === \"number\" && self._bytesWritten !== self.size) {\n        self.error(\"Did not get expected byte count.\\n\" + \"expect: \" + self.size + \"\\n\" + \"actual: \" + self._bytesWritten);\n    }\n    Writer.prototype._finish.call(self);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvZmlsZS13cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsTUFBTSxDQUFDO0FBRVhELFNBQVNKLFlBQVlHO0FBRXJCLFNBQVNILFdBQVlNLEtBQUs7SUFDeEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JQLFVBQVMsR0FBSTtRQUNqQyxNQUFNLElBQUlRLE1BQU07SUFDbEI7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSUYsTUFBTUcsSUFBSSxLQUFLLFVBQVUsQ0FBQ0gsTUFBTUksSUFBSSxFQUFFO1FBQ3hDLE1BQU0sSUFBSUYsTUFBTSxtQkFBbUJGLE1BQU1HLElBQUk7SUFDL0M7SUFFQUYsS0FBS0ksT0FBTyxHQUFHLEVBQUU7SUFDakJKLEtBQUtLLGFBQWEsR0FBRztJQUVyQlQsT0FBT1UsSUFBSSxDQUFDLElBQUksRUFBRVA7QUFDcEI7QUFFQU4sV0FBV2MsU0FBUyxDQUFDQyxPQUFPLEdBQUc7SUFDN0IsSUFBSVIsT0FBTyxJQUFJO0lBQ2YsSUFBSUEsS0FBS1MsT0FBTyxFQUFFO0lBRWxCLElBQUlDLEtBQUssQ0FBQztJQUNWLElBQUlWLEtBQUtELEtBQUssQ0FBQ1ksS0FBSyxFQUFFRCxHQUFHQyxLQUFLLEdBQUdYLEtBQUtELEtBQUssQ0FBQ1ksS0FBSztJQUNqREQsR0FBR0UsSUFBSSxHQUFHaEIsT0FBT2lCLFFBQVE7SUFDekIsSUFBSWIsS0FBS2MsSUFBSSxJQUFJZCxLQUFLYyxJQUFJLENBQUNDLE9BQU8sRUFBRUwsR0FBR00sVUFBVSxHQUFHaEIsS0FBS2MsSUFBSSxDQUFDQyxPQUFPO0lBRXJFZixLQUFLUyxPQUFPLEdBQUdmLEdBQUd1QixpQkFBaUIsQ0FBQ2pCLEtBQUtrQixLQUFLLEVBQUVSO0lBRWhEVixLQUFLUyxPQUFPLENBQUNVLEVBQUUsQ0FBQyxRQUFRO1FBQ3RCLHFEQUFxRDtRQUNyRG5CLEtBQUtvQixLQUFLLEdBQUc7UUFDYnBCLEtBQUtJLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQzlCLElBQUlBLE1BQU14QixLQUFLRSxLQUFLUyxPQUFPLENBQUNjLEdBQUc7aUJBQzFCdkIsS0FBS1MsT0FBTyxDQUFDZSxLQUFLLENBQUNGO1FBQzFCO1FBQ0F0QixLQUFLeUIsSUFBSSxDQUFDO1FBQ1YsNkNBQTZDO1FBQzdDekIsS0FBS3lCLElBQUksQ0FBQztJQUNaO0lBRUF6QixLQUFLUyxPQUFPLENBQUNVLEVBQUUsQ0FBQyxTQUFTLFNBQVVPLEVBQUU7UUFBSTFCLEtBQUt5QixJQUFJLENBQUMsU0FBU0M7SUFBSTtJQUVoRTFCLEtBQUtTLE9BQU8sQ0FBQ1UsRUFBRSxDQUFDLFNBQVM7UUFBY25CLEtBQUt5QixJQUFJLENBQUM7SUFBUztJQUUxRHpCLEtBQUtTLE9BQU8sQ0FBQ1UsRUFBRSxDQUFDLFNBQVM7UUFDdkIsOERBQThEO1FBQzlEbkIsS0FBSzJCLE9BQU87SUFDZDtBQUNGO0FBRUFsQyxXQUFXYyxTQUFTLENBQUNpQixLQUFLLEdBQUcsU0FBVUYsQ0FBQztJQUN0QyxJQUFJdEIsT0FBTyxJQUFJO0lBRWZBLEtBQUtLLGFBQWEsSUFBSWlCLEVBQUVNLE1BQU07SUFFOUIsSUFBSSxDQUFDNUIsS0FBS29CLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQ1MsT0FBT0MsUUFBUSxDQUFDUixNQUFNLE9BQU9BLE1BQU0sVUFBVTtZQUNoRCxNQUFNLElBQUlyQixNQUFNO1FBQ2xCO1FBQ0FELEtBQUtJLE9BQU8sQ0FBQzJCLElBQUksQ0FBQ1Q7UUFDbEIsT0FBTztJQUNUO0lBRUEsSUFBSVUsTUFBTWhDLEtBQUtTLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDRjtJQUM3QixnRkFBZ0Y7SUFFaEYsOERBQThEO0lBQzlELHVCQUF1QjtJQUN2QixJQUFJVSxRQUFRLFNBQVNoQyxLQUFLUyxPQUFPLENBQUN3QixNQUFNLEVBQUU7UUFDeEMsT0FBT2pDLEtBQUtTLE9BQU8sQ0FBQ3dCLE1BQU0sQ0FBQ0wsTUFBTSxJQUFJO0lBQ3ZDLE9BQU87UUFDTCxPQUFPSTtJQUNUO0FBQ0Y7QUFFQXZDLFdBQVdjLFNBQVMsQ0FBQ2dCLEdBQUcsR0FBRyxTQUFVRCxDQUFDO0lBQ3BDLElBQUl0QixPQUFPLElBQUk7SUFFZixJQUFJc0IsR0FBR3RCLEtBQUt3QixLQUFLLENBQUNGO0lBRWxCLElBQUksQ0FBQ3RCLEtBQUtvQixLQUFLLEVBQUU7UUFDZnBCLEtBQUtJLE9BQU8sQ0FBQzJCLElBQUksQ0FBQ2pDO1FBQ2xCLE9BQU87SUFDVDtJQUVBLE9BQU9FLEtBQUtTLE9BQU8sQ0FBQ2MsR0FBRztBQUN6QjtBQUVBOUIsV0FBV2MsU0FBUyxDQUFDb0IsT0FBTyxHQUFHO0lBQzdCLElBQUkzQixPQUFPLElBQUk7SUFDZixJQUFJLE9BQU9BLEtBQUtrQyxJQUFJLEtBQUssWUFBWWxDLEtBQUtLLGFBQWEsS0FBS0wsS0FBS2tDLElBQUksRUFBRTtRQUNyRWxDLEtBQUttQyxLQUFLLENBQ1IsdUNBQ0EsYUFBYW5DLEtBQUtrQyxJQUFJLEdBQUcsT0FDekIsYUFBYWxDLEtBQUtLLGFBQWE7SUFDbkM7SUFDQVQsT0FBT1csU0FBUyxDQUFDb0IsT0FBTyxDQUFDckIsSUFBSSxDQUFDTjtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpbWVzaGVldC1wcm9jZXNzb3IvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvZmlsZS13cml0ZXIuanM/NTNjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IEZpbGVXcml0ZXJcblxudmFyIGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxudmFyIFdyaXRlciA9IHJlcXVpcmUoJy4vd3JpdGVyLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBFT0YgPSB7fVxuXG5pbmhlcml0cyhGaWxlV3JpdGVyLCBXcml0ZXIpXG5cbmZ1bmN0aW9uIEZpbGVXcml0ZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgRmlsZVdyaXRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGVXcml0ZXIgbXVzdCBiZSBjYWxsZWQgYXMgY29uc3RydWN0b3IuJylcbiAgfVxuXG4gIC8vIHNob3VsZCBhbHJlYWR5IGJlIGVzdGFibGlzaGVkIGFzIGEgRmlsZSB0eXBlXG4gIGlmIChwcm9wcy50eXBlICE9PSAnRmlsZScgfHwgIXByb3BzLkZpbGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1maWxlIHR5cGUgJyArIHByb3BzLnR5cGUpXG4gIH1cblxuICBzZWxmLl9idWZmZXIgPSBbXVxuICBzZWxmLl9ieXRlc1dyaXR0ZW4gPSAwXG5cbiAgV3JpdGVyLmNhbGwodGhpcywgcHJvcHMpXG59XG5cbkZpbGVXcml0ZXIucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fc3RyZWFtKSByZXR1cm5cblxuICB2YXIgc28gPSB7fVxuICBpZiAoc2VsZi5wcm9wcy5mbGFncykgc28uZmxhZ3MgPSBzZWxmLnByb3BzLmZsYWdzXG4gIHNvLm1vZGUgPSBXcml0ZXIuZmlsZW1vZGVcbiAgaWYgKHNlbGYuX29sZCAmJiBzZWxmLl9vbGQuYmxrc2l6ZSkgc28uYnVmZmVyU2l6ZSA9IHNlbGYuX29sZC5ibGtzaXplXG5cbiAgc2VsZi5fc3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oc2VsZi5fcGF0aCwgc28pXG5cbiAgc2VsZi5fc3RyZWFtLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJGVyBvcGVuXCIsIHNlbGYuX2J1ZmZlciwgc2VsZi5fcGF0aClcbiAgICBzZWxmLnJlYWR5ID0gdHJ1ZVxuICAgIHNlbGYuX2J1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYyA9PT0gRU9GKSBzZWxmLl9zdHJlYW0uZW5kKClcbiAgICAgIGVsc2Ugc2VsZi5fc3RyZWFtLndyaXRlKGMpXG4gICAgfSlcbiAgICBzZWxmLmVtaXQoJ3JlYWR5JylcbiAgICAvLyBnaXZlIHRoaXMgYSBraWNrIGp1c3QgaW4gY2FzZSBpdCBuZWVkcyBpdC5cbiAgICBzZWxmLmVtaXQoJ2RyYWluJylcbiAgfSlcblxuICBzZWxmLl9zdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVyKSB7IHNlbGYuZW1pdCgnZXJyb3InLCBlcikgfSlcblxuICBzZWxmLl9zdHJlYW0ub24oJ2RyYWluJywgZnVuY3Rpb24gKCkgeyBzZWxmLmVtaXQoJ2RyYWluJykgfSlcblxuICBzZWxmLl9zdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1xcblxcbkZXIFN0cmVhbSBDbG9zZScsIHNlbGYuX3BhdGgsIHNlbGYuc2l6ZSlcbiAgICBzZWxmLl9maW5pc2goKVxuICB9KVxufVxuXG5GaWxlV3JpdGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHNlbGYuX2J5dGVzV3JpdHRlbiArPSBjLmxlbmd0aFxuXG4gIGlmICghc2VsZi5yZWFkeSkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGMpICYmIHR5cGVvZiBjICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHdyaXRlIGRhdGEnKVxuICAgIH1cbiAgICBzZWxmLl9idWZmZXIucHVzaChjKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIHJldCA9IHNlbGYuX3N0cmVhbS53cml0ZShjKVxuICAvLyBjb25zb2xlLmVycm9yKCdcXHQtLSBmdyB3cm90ZSwgX3N0cmVhbSBzYXlzJywgcmV0LCBzZWxmLl9zdHJlYW0uX3F1ZXVlLmxlbmd0aClcblxuICAvLyBhbGxvdyAyIGJ1ZmZlcmVkIHdyaXRlcywgYmVjYXVzZSBvdGhlcndpc2UgdGhlcmUncyBqdXN0IHRvb1xuICAvLyBtdWNoIHN0b3AgYW5kIGdvIGJzLlxuICBpZiAocmV0ID09PSBmYWxzZSAmJiBzZWxmLl9zdHJlYW0uX3F1ZXVlKSB7XG4gICAgcmV0dXJuIHNlbGYuX3N0cmVhbS5fcXVldWUubGVuZ3RoIDw9IDJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuRmlsZVdyaXRlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKGMpIHNlbGYud3JpdGUoYylcblxuICBpZiAoIXNlbGYucmVhZHkpIHtcbiAgICBzZWxmLl9idWZmZXIucHVzaChFT0YpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gc2VsZi5fc3RyZWFtLmVuZCgpXG59XG5cbkZpbGVXcml0ZXIucHJvdG90eXBlLl9maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAodHlwZW9mIHNlbGYuc2l6ZSA9PT0gJ251bWJlcicgJiYgc2VsZi5fYnl0ZXNXcml0dGVuICE9PSBzZWxmLnNpemUpIHtcbiAgICBzZWxmLmVycm9yKFxuICAgICAgJ0RpZCBub3QgZ2V0IGV4cGVjdGVkIGJ5dGUgY291bnQuXFxuJyArXG4gICAgICAnZXhwZWN0OiAnICsgc2VsZi5zaXplICsgJ1xcbicgK1xuICAgICAgJ2FjdHVhbDogJyArIHNlbGYuX2J5dGVzV3JpdHRlbilcbiAgfVxuICBXcml0ZXIucHJvdG90eXBlLl9maW5pc2guY2FsbChzZWxmKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJGaWxlV3JpdGVyIiwiZnMiLCJyZXF1aXJlIiwiV3JpdGVyIiwiaW5oZXJpdHMiLCJFT0YiLCJwcm9wcyIsInNlbGYiLCJFcnJvciIsInR5cGUiLCJGaWxlIiwiX2J1ZmZlciIsIl9ieXRlc1dyaXR0ZW4iLCJjYWxsIiwicHJvdG90eXBlIiwiX2NyZWF0ZSIsIl9zdHJlYW0iLCJzbyIsImZsYWdzIiwibW9kZSIsImZpbGVtb2RlIiwiX29sZCIsImJsa3NpemUiLCJidWZmZXJTaXplIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJfcGF0aCIsIm9uIiwicmVhZHkiLCJmb3JFYWNoIiwiYyIsImVuZCIsIndyaXRlIiwiZW1pdCIsImVyIiwiX2ZpbmlzaCIsImxlbmd0aCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwicHVzaCIsInJldCIsIl9xdWV1ZSIsInNpemUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/file-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/get-type.js":
/*!**********************************************!*\
  !*** ./node_modules/fstream/lib/get-type.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = getType;\nfunction getType(st) {\n    var types = [\n        \"Directory\",\n        \"File\",\n        \"SymbolicLink\",\n        \"Link\",\n        \"BlockDevice\",\n        \"CharacterDevice\",\n        \"FIFO\",\n        \"Socket\"\n    ];\n    var type;\n    if (st.type && types.indexOf(st.type) !== -1) {\n        st[st.type] = true;\n        return st.type;\n    }\n    for(var i = 0, l = types.length; i < l; i++){\n        type = types[i];\n        var is = st[type] || st[\"is\" + type];\n        if (typeof is === \"function\") is = is.call(st);\n        if (is) {\n            st[type] = true;\n            st.type = type;\n            return type;\n        }\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lc2hlZXQtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL2dldC10eXBlLmpzP2JjYzMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBnZXRUeXBlXG5cbmZ1bmN0aW9uIGdldFR5cGUgKHN0KSB7XG4gIHZhciB0eXBlcyA9IFtcbiAgICAnRGlyZWN0b3J5JyxcbiAgICAnRmlsZScsXG4gICAgJ1N5bWJvbGljTGluaycsXG4gICAgJ0xpbmsnLCAvLyBzcGVjaWFsIGZvciBoYXJkbGlua3MgZnJvbSB0YXJiYWxsc1xuICAgICdCbG9ja0RldmljZScsXG4gICAgJ0NoYXJhY3RlckRldmljZScsXG4gICAgJ0ZJRk8nLFxuICAgICdTb2NrZXQnXG4gIF1cbiAgdmFyIHR5cGVcblxuICBpZiAoc3QudHlwZSAmJiB0eXBlcy5pbmRleE9mKHN0LnR5cGUpICE9PSAtMSkge1xuICAgIHN0W3N0LnR5cGVdID0gdHJ1ZVxuICAgIHJldHVybiBzdC50eXBlXG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHR5cGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHR5cGUgPSB0eXBlc1tpXVxuICAgIHZhciBpcyA9IHN0W3R5cGVdIHx8IHN0WydpcycgKyB0eXBlXVxuICAgIGlmICh0eXBlb2YgaXMgPT09ICdmdW5jdGlvbicpIGlzID0gaXMuY2FsbChzdClcbiAgICBpZiAoaXMpIHtcbiAgICAgIHN0W3R5cGVdID0gdHJ1ZVxuICAgICAgc3QudHlwZSA9IHR5cGVcbiAgICAgIHJldHVybiB0eXBlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0VHlwZSIsInN0IiwidHlwZXMiLCJ0eXBlIiwiaW5kZXhPZiIsImkiLCJsIiwibGVuZ3RoIiwiaXMiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxRQUFTQyxFQUFFO0lBQ2xCLElBQUlDLFFBQVE7UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxJQUFJQztJQUVKLElBQUlGLEdBQUdFLElBQUksSUFBSUQsTUFBTUUsT0FBTyxDQUFDSCxHQUFHRSxJQUFJLE1BQU0sQ0FBQyxHQUFHO1FBQzVDRixFQUFFLENBQUNBLEdBQUdFLElBQUksQ0FBQyxHQUFHO1FBQ2QsT0FBT0YsR0FBR0UsSUFBSTtJQUNoQjtJQUVBLElBQUssSUFBSUUsSUFBSSxHQUFHQyxJQUFJSixNQUFNSyxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQUs7UUFDNUNGLE9BQU9ELEtBQUssQ0FBQ0csRUFBRTtRQUNmLElBQUlHLEtBQUtQLEVBQUUsQ0FBQ0UsS0FBSyxJQUFJRixFQUFFLENBQUMsT0FBT0UsS0FBSztRQUNwQyxJQUFJLE9BQU9LLE9BQU8sWUFBWUEsS0FBS0EsR0FBR0MsSUFBSSxDQUFDUjtRQUMzQyxJQUFJTyxJQUFJO1lBQ05QLEVBQUUsQ0FBQ0UsS0FBSyxHQUFHO1lBQ1hGLEdBQUdFLElBQUksR0FBR0E7WUFDVixPQUFPQTtRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1QiLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvZ2V0LXR5cGUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/get-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/link-reader.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/link-reader.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\nmodule.exports = LinkReader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\ninherits(LinkReader, Reader);\nfunction LinkReader(props) {\n    var self = this;\n    if (!(self instanceof LinkReader)) {\n        throw new Error(\"LinkReader must be called as constructor.\");\n    }\n    if (!(props.type === \"Link\" && props.Link || props.type === \"SymbolicLink\" && props.SymbolicLink)) {\n        throw new Error(\"Non-link type \" + props.type);\n    }\n    Reader.call(self, props);\n}\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function(currentStat) {\n    var self = this;\n    fs.readlink(self._path, function(er, linkpath) {\n        if (er) return self.error(er);\n        self.linkpath = self.props.linkpath = linkpath;\n        self.emit(\"linkpath\", linkpath);\n        Reader.prototype._stat.call(self, currentStat);\n    });\n};\nLinkReader.prototype._read = function() {\n    var self = this;\n    if (self._paused) return;\n    // basically just a no-op, since we got all the info we need\n    // from the _stat method\n    if (!self._ended) {\n        self.emit(\"end\");\n        self.emit(\"close\");\n        self._ended = true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay1yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBQ2pELEVBQUU7QUFDRix5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELGdDQUFnQztBQUVoQ0EsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxLQUFLQyxtQkFBT0EsQ0FBQztBQUNqQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUN2QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUVyQkMsU0FBU0gsWUFBWUk7QUFFckIsU0FBU0osV0FBWUssS0FBSztJQUN4QixJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJLENBQUVBLENBQUFBLGdCQUFnQk4sVUFBUyxHQUFJO1FBQ2pDLE1BQU0sSUFBSU8sTUFBTTtJQUNsQjtJQUVBLElBQUksQ0FBRSxPQUFPQyxJQUFJLEtBQUssVUFBVUgsTUFBTUksSUFBSSxJQUN2Q0osTUFBTUcsSUFBSSxLQUFLLGtCQUFrQkgsTUFBTUssWUFBWSxHQUFJO1FBQ3hELE1BQU0sSUFBSUgsTUFBTSxtQkFBbUJGLE1BQU1HLElBQUk7SUFDL0M7SUFFQUosT0FBT08sSUFBSSxDQUFDTCxNQUFNRDtBQUNwQjtBQUVBLHlEQUF5RDtBQUN6RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDZCQUE2QjtBQUM3QkwsV0FBV1ksU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBVUMsV0FBVztJQUNoRCxJQUFJUixPQUFPLElBQUk7SUFDZkwsR0FBR2MsUUFBUSxDQUFDVCxLQUFLVSxLQUFLLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxRQUFRO1FBQzVDLElBQUlELElBQUksT0FBT1gsS0FBS2EsS0FBSyxDQUFDRjtRQUMxQlgsS0FBS1ksUUFBUSxHQUFHWixLQUFLRCxLQUFLLENBQUNhLFFBQVEsR0FBR0E7UUFDdENaLEtBQUtjLElBQUksQ0FBQyxZQUFZRjtRQUN0QmQsT0FBT1EsU0FBUyxDQUFDQyxLQUFLLENBQUNGLElBQUksQ0FBQ0wsTUFBTVE7SUFDcEM7QUFDRjtBQUVBZCxXQUFXWSxTQUFTLENBQUNTLEtBQUssR0FBRztJQUMzQixJQUFJZixPQUFPLElBQUk7SUFDZixJQUFJQSxLQUFLZ0IsT0FBTyxFQUFFO0lBQ2xCLDREQUE0RDtJQUM1RCx3QkFBd0I7SUFDeEIsSUFBSSxDQUFDaEIsS0FBS2lCLE1BQU0sRUFBRTtRQUNoQmpCLEtBQUtjLElBQUksQ0FBQztRQUNWZCxLQUFLYyxJQUFJLENBQUM7UUFDVmQsS0FBS2lCLE1BQU0sR0FBRztJQUNoQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltZXNoZWV0LXByb2Nlc3Nvci8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9saW5rLXJlYWRlci5qcz9kY2JkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2ljYWxseSBqdXN0IGEgd3JhcHBlciBhcm91bmQgYW4gZnMucmVhZGxpbmtcbi8vXG4vLyBYWFg6IEVuaGFuY2UgdGhpcyB0byBzdXBwb3J0IHRoZSBMaW5rIHR5cGUsIGJ5IGtlZXBpbmdcbi8vIGEgbG9va3VwIHRhYmxlIG9mIHs8ZGV2K2lub2RlPjo8cGF0aD59LCBzbyB0aGF0IGhhcmRsaW5rc1xuLy8gY2FuIGJlIHByZXNlcnZlZCBpbiB0YXJiYWxscy5cblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rUmVhZGVyXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBSZWFkZXIgPSByZXF1aXJlKCcuL3JlYWRlci5qcycpXG5cbmluaGVyaXRzKExpbmtSZWFkZXIsIFJlYWRlcilcblxuZnVuY3Rpb24gTGlua1JlYWRlciAocHJvcHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghKHNlbGYgaW5zdGFuY2VvZiBMaW5rUmVhZGVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTGlua1JlYWRlciBtdXN0IGJlIGNhbGxlZCBhcyBjb25zdHJ1Y3Rvci4nKVxuICB9XG5cbiAgaWYgKCEoKHByb3BzLnR5cGUgPT09ICdMaW5rJyAmJiBwcm9wcy5MaW5rKSB8fFxuICAgIChwcm9wcy50eXBlID09PSAnU3ltYm9saWNMaW5rJyAmJiBwcm9wcy5TeW1ib2xpY0xpbmspKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWxpbmsgdHlwZSAnICsgcHJvcHMudHlwZSlcbiAgfVxuXG4gIFJlYWRlci5jYWxsKHNlbGYsIHByb3BzKVxufVxuXG4vLyBXaGVuIHBpcGluZyBhIExpbmtSZWFkZXIgaW50byBhIExpbmtXcml0ZXIsIHdlIGhhdmUgdG9cbi8vIGFscmVhZHkgaGF2ZSB0aGUgbGlua3BhdGggcHJvcGVydHkgc2V0LCBzbyB0aGF0IGhhcyB0b1xuLy8gaGFwcGVuICpiZWZvcmUqIHRoZSBcInJlYWR5XCIgZXZlbnQsIHdoaWNoIG1lYW5zIHdlIG5lZWQgdG9cbi8vIG92ZXJyaWRlIHRoZSBfc3RhdCBtZXRob2QuXG5MaW5rUmVhZGVyLnByb3RvdHlwZS5fc3RhdCA9IGZ1bmN0aW9uIChjdXJyZW50U3RhdCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgZnMucmVhZGxpbmsoc2VsZi5fcGF0aCwgZnVuY3Rpb24gKGVyLCBsaW5rcGF0aCkge1xuICAgIGlmIChlcikgcmV0dXJuIHNlbGYuZXJyb3IoZXIpXG4gICAgc2VsZi5saW5rcGF0aCA9IHNlbGYucHJvcHMubGlua3BhdGggPSBsaW5rcGF0aFxuICAgIHNlbGYuZW1pdCgnbGlua3BhdGgnLCBsaW5rcGF0aClcbiAgICBSZWFkZXIucHJvdG90eXBlLl9zdGF0LmNhbGwoc2VsZiwgY3VycmVudFN0YXQpXG4gIH0pXG59XG5cbkxpbmtSZWFkZXIucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHNlbGYuX3BhdXNlZCkgcmV0dXJuXG4gIC8vIGJhc2ljYWxseSBqdXN0IGEgbm8tb3AsIHNpbmNlIHdlIGdvdCBhbGwgdGhlIGluZm8gd2UgbmVlZFxuICAvLyBmcm9tIHRoZSBfc3RhdCBtZXRob2RcbiAgaWYgKCFzZWxmLl9lbmRlZCkge1xuICAgIHNlbGYuZW1pdCgnZW5kJylcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJylcbiAgICBzZWxmLl9lbmRlZCA9IHRydWVcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJMaW5rUmVhZGVyIiwiZnMiLCJyZXF1aXJlIiwiaW5oZXJpdHMiLCJSZWFkZXIiLCJwcm9wcyIsInNlbGYiLCJFcnJvciIsInR5cGUiLCJMaW5rIiwiU3ltYm9saWNMaW5rIiwiY2FsbCIsInByb3RvdHlwZSIsIl9zdGF0IiwiY3VycmVudFN0YXQiLCJyZWFkbGluayIsIl9wYXRoIiwiZXIiLCJsaW5rcGF0aCIsImVycm9yIiwiZW1pdCIsIl9yZWFkIiwiX3BhdXNlZCIsIl9lbmRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/link-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/link-writer.js":
/*!*************************************************!*\
  !*** ./node_modules/fstream/lib/link-writer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = LinkWriter;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(rsc)/./node_modules/fstream/lib/writer.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar rimraf = __webpack_require__(/*! rimraf */ \"(rsc)/./node_modules/fstream/node_modules/rimraf/rimraf.js\");\ninherits(LinkWriter, Writer);\nfunction LinkWriter(props) {\n    var self = this;\n    if (!(self instanceof LinkWriter)) {\n        throw new Error(\"LinkWriter must be called as constructor.\");\n    }\n    // should already be established as a Link type\n    if (!(props.type === \"Link\" && props.Link || props.type === \"SymbolicLink\" && props.SymbolicLink)) {\n        throw new Error(\"Non-link type \" + props.type);\n    }\n    if (props.linkpath === \"\") props.linkpath = \".\";\n    if (!props.linkpath) {\n        self.error(\"Need linkpath property to create \" + props.type);\n    }\n    Writer.call(this, props);\n}\nLinkWriter.prototype._create = function() {\n    // console.error(\" LW _create\")\n    var self = this;\n    var hard = self.type === \"Link\" || process.platform === \"win32\";\n    var link = hard ? \"link\" : \"symlink\";\n    var lp = hard ? path.resolve(self.dirname, self.linkpath) : self.linkpath;\n    // can only change the link path by clobbering\n    // For hard links, let's just assume that's always the case, since\n    // there's no good way to read them if we don't already know.\n    if (hard) return clobber(self, lp, link);\n    fs.readlink(self._path, function(er, p) {\n        // only skip creation if it's exactly the same link\n        if (p && p === lp) return finish(self);\n        clobber(self, lp, link);\n    });\n};\nfunction clobber(self, lp, link) {\n    rimraf(self._path, function(er) {\n        if (er) return self.error(er);\n        create(self, lp, link);\n    });\n}\nfunction create(self, lp, link) {\n    fs[link](lp, self._path, function(er) {\n        // if this is a hard link, and we're in the process of writing out a\n        // directory, it's very possible that the thing we're linking to\n        // doesn't exist yet (especially if it was intended as a symlink),\n        // so swallow ENOENT errors here and just soldier in.\n        // Additionally, an EPERM or EACCES can happen on win32 if it's trying\n        // to make a link to a directory.  Again, just skip it.\n        // A better solution would be to have fs.symlink be supported on\n        // windows in some nice fashion.\n        if (er) {\n            if ((er.code === \"ENOENT\" || er.code === \"EACCES\" || er.code === \"EPERM\") && process.platform === \"win32\") {\n                self.ready = true;\n                self.emit(\"ready\");\n                self.emit(\"end\");\n                self.emit(\"close\");\n                self.end = self._finish = function() {};\n            } else return self.error(er);\n        }\n        finish(self);\n    });\n}\nfunction finish(self) {\n    self.ready = true;\n    self.emit(\"ready\");\n    if (self._ended && !self._finished) self._finish();\n}\nLinkWriter.prototype.end = function() {\n    // console.error(\"LW finish in end\")\n    this._ended = true;\n    if (this.ready) {\n        this._finished = true;\n        this._finish();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvbGluay13cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUksU0FBU0osbUJBQU9BLENBQUM7QUFFckJFLFNBQVNKLFlBQVlHO0FBRXJCLFNBQVNILFdBQVlPLEtBQUs7SUFDeEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JSLFVBQVMsR0FBSTtRQUNqQyxNQUFNLElBQUlTLE1BQU07SUFDbEI7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSSxDQUFFLE9BQU9DLElBQUksS0FBSyxVQUFVSCxNQUFNSSxJQUFJLElBQ3ZDSixNQUFNRyxJQUFJLEtBQUssa0JBQWtCSCxNQUFNSyxZQUFZLEdBQUk7UUFDeEQsTUFBTSxJQUFJSCxNQUFNLG1CQUFtQkYsTUFBTUcsSUFBSTtJQUMvQztJQUVBLElBQUlILE1BQU1NLFFBQVEsS0FBSyxJQUFJTixNQUFNTSxRQUFRLEdBQUc7SUFDNUMsSUFBSSxDQUFDTixNQUFNTSxRQUFRLEVBQUU7UUFDbkJMLEtBQUtNLEtBQUssQ0FBQyxzQ0FBc0NQLE1BQU1HLElBQUk7SUFDN0Q7SUFFQVAsT0FBT1ksSUFBSSxDQUFDLElBQUksRUFBRVI7QUFDcEI7QUFFQVAsV0FBV2dCLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHO0lBQzdCLCtCQUErQjtJQUMvQixJQUFJVCxPQUFPLElBQUk7SUFDZixJQUFJVSxPQUFPVixLQUFLRSxJQUFJLEtBQUssVUFBVVMsUUFBUUMsUUFBUSxLQUFLO0lBQ3hELElBQUlDLE9BQU9ILE9BQU8sU0FBUztJQUMzQixJQUFJSSxLQUFLSixPQUFPYixLQUFLa0IsT0FBTyxDQUFDZixLQUFLZ0IsT0FBTyxFQUFFaEIsS0FBS0ssUUFBUSxJQUFJTCxLQUFLSyxRQUFRO0lBRXpFLDhDQUE4QztJQUM5QyxrRUFBa0U7SUFDbEUsNkRBQTZEO0lBQzdELElBQUlLLE1BQU0sT0FBT08sUUFBUWpCLE1BQU1jLElBQUlEO0lBRW5DcEIsR0FBR3lCLFFBQVEsQ0FBQ2xCLEtBQUttQixLQUFLLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxDQUFDO1FBQ3JDLG1EQUFtRDtRQUNuRCxJQUFJQSxLQUFLQSxNQUFNUCxJQUFJLE9BQU9RLE9BQU90QjtRQUNqQ2lCLFFBQVFqQixNQUFNYyxJQUFJRDtJQUNwQjtBQUNGO0FBRUEsU0FBU0ksUUFBU2pCLElBQUksRUFBRWMsRUFBRSxFQUFFRCxJQUFJO0lBQzlCZixPQUFPRSxLQUFLbUIsS0FBSyxFQUFFLFNBQVVDLEVBQUU7UUFDN0IsSUFBSUEsSUFBSSxPQUFPcEIsS0FBS00sS0FBSyxDQUFDYztRQUMxQkcsT0FBT3ZCLE1BQU1jLElBQUlEO0lBQ25CO0FBQ0Y7QUFFQSxTQUFTVSxPQUFRdkIsSUFBSSxFQUFFYyxFQUFFLEVBQUVELElBQUk7SUFDN0JwQixFQUFFLENBQUNvQixLQUFLLENBQUNDLElBQUlkLEtBQUttQixLQUFLLEVBQUUsU0FBVUMsRUFBRTtRQUNuQyxvRUFBb0U7UUFDcEUsZ0VBQWdFO1FBQ2hFLGtFQUFrRTtRQUNsRSxxREFBcUQ7UUFDckQsc0VBQXNFO1FBQ3RFLHVEQUF1RDtRQUN2RCxnRUFBZ0U7UUFDaEUsZ0NBQWdDO1FBQ2hDLElBQUlBLElBQUk7WUFDTixJQUFJLENBQUNBLEdBQUdJLElBQUksS0FBSyxZQUNmSixHQUFHSSxJQUFJLEtBQUssWUFDWkosR0FBR0ksSUFBSSxLQUFLLE9BQU0sS0FBTWIsUUFBUUMsUUFBUSxLQUFLLFNBQVM7Z0JBQ3REWixLQUFLeUIsS0FBSyxHQUFHO2dCQUNiekIsS0FBSzBCLElBQUksQ0FBQztnQkFDVjFCLEtBQUswQixJQUFJLENBQUM7Z0JBQ1YxQixLQUFLMEIsSUFBSSxDQUFDO2dCQUNWMUIsS0FBSzJCLEdBQUcsR0FBRzNCLEtBQUs0QixPQUFPLEdBQUcsWUFBYTtZQUN6QyxPQUFPLE9BQU81QixLQUFLTSxLQUFLLENBQUNjO1FBQzNCO1FBQ0FFLE9BQU90QjtJQUNUO0FBQ0Y7QUFFQSxTQUFTc0IsT0FBUXRCLElBQUk7SUFDbkJBLEtBQUt5QixLQUFLLEdBQUc7SUFDYnpCLEtBQUswQixJQUFJLENBQUM7SUFDVixJQUFJMUIsS0FBSzZCLE1BQU0sSUFBSSxDQUFDN0IsS0FBSzhCLFNBQVMsRUFBRTlCLEtBQUs0QixPQUFPO0FBQ2xEO0FBRUFwQyxXQUFXZ0IsU0FBUyxDQUFDbUIsR0FBRyxHQUFHO0lBQ3pCLG9DQUFvQztJQUNwQyxJQUFJLENBQUNFLE1BQU0sR0FBRztJQUNkLElBQUksSUFBSSxDQUFDSixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUNGLE9BQU87SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltZXNoZWV0LXByb2Nlc3Nvci8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9saW5rLXdyaXRlci5qcz9hNjU4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gTGlua1dyaXRlclxuXG52YXIgZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG52YXIgV3JpdGVyID0gcmVxdWlyZSgnLi93cml0ZXIuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciByaW1yYWYgPSByZXF1aXJlKCdyaW1yYWYnKVxuXG5pbmhlcml0cyhMaW5rV3JpdGVyLCBXcml0ZXIpXG5cbmZ1bmN0aW9uIExpbmtXcml0ZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgTGlua1dyaXRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpbmtXcml0ZXIgbXVzdCBiZSBjYWxsZWQgYXMgY29uc3RydWN0b3IuJylcbiAgfVxuXG4gIC8vIHNob3VsZCBhbHJlYWR5IGJlIGVzdGFibGlzaGVkIGFzIGEgTGluayB0eXBlXG4gIGlmICghKChwcm9wcy50eXBlID09PSAnTGluaycgJiYgcHJvcHMuTGluaykgfHxcbiAgICAocHJvcHMudHlwZSA9PT0gJ1N5bWJvbGljTGluaycgJiYgcHJvcHMuU3ltYm9saWNMaW5rKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1saW5rIHR5cGUgJyArIHByb3BzLnR5cGUpXG4gIH1cblxuICBpZiAocHJvcHMubGlua3BhdGggPT09ICcnKSBwcm9wcy5saW5rcGF0aCA9ICcuJ1xuICBpZiAoIXByb3BzLmxpbmtwYXRoKSB7XG4gICAgc2VsZi5lcnJvcignTmVlZCBsaW5rcGF0aCBwcm9wZXJ0eSB0byBjcmVhdGUgJyArIHByb3BzLnR5cGUpXG4gIH1cblxuICBXcml0ZXIuY2FsbCh0aGlzLCBwcm9wcylcbn1cblxuTGlua1dyaXRlci5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY29uc29sZS5lcnJvcihcIiBMVyBfY3JlYXRlXCIpXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaGFyZCA9IHNlbGYudHlwZSA9PT0gJ0xpbmsnIHx8IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbiAgdmFyIGxpbmsgPSBoYXJkID8gJ2xpbmsnIDogJ3N5bWxpbmsnXG4gIHZhciBscCA9IGhhcmQgPyBwYXRoLnJlc29sdmUoc2VsZi5kaXJuYW1lLCBzZWxmLmxpbmtwYXRoKSA6IHNlbGYubGlua3BhdGhcblxuICAvLyBjYW4gb25seSBjaGFuZ2UgdGhlIGxpbmsgcGF0aCBieSBjbG9iYmVyaW5nXG4gIC8vIEZvciBoYXJkIGxpbmtzLCBsZXQncyBqdXN0IGFzc3VtZSB0aGF0J3MgYWx3YXlzIHRoZSBjYXNlLCBzaW5jZVxuICAvLyB0aGVyZSdzIG5vIGdvb2Qgd2F5IHRvIHJlYWQgdGhlbSBpZiB3ZSBkb24ndCBhbHJlYWR5IGtub3cuXG4gIGlmIChoYXJkKSByZXR1cm4gY2xvYmJlcihzZWxmLCBscCwgbGluaylcblxuICBmcy5yZWFkbGluayhzZWxmLl9wYXRoLCBmdW5jdGlvbiAoZXIsIHApIHtcbiAgICAvLyBvbmx5IHNraXAgY3JlYXRpb24gaWYgaXQncyBleGFjdGx5IHRoZSBzYW1lIGxpbmtcbiAgICBpZiAocCAmJiBwID09PSBscCkgcmV0dXJuIGZpbmlzaChzZWxmKVxuICAgIGNsb2JiZXIoc2VsZiwgbHAsIGxpbmspXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNsb2JiZXIgKHNlbGYsIGxwLCBsaW5rKSB7XG4gIHJpbXJhZihzZWxmLl9wYXRoLCBmdW5jdGlvbiAoZXIpIHtcbiAgICBpZiAoZXIpIHJldHVybiBzZWxmLmVycm9yKGVyKVxuICAgIGNyZWF0ZShzZWxmLCBscCwgbGluaylcbiAgfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlIChzZWxmLCBscCwgbGluaykge1xuICBmc1tsaW5rXShscCwgc2VsZi5fcGF0aCwgZnVuY3Rpb24gKGVyKSB7XG4gICAgLy8gaWYgdGhpcyBpcyBhIGhhcmQgbGluaywgYW5kIHdlJ3JlIGluIHRoZSBwcm9jZXNzIG9mIHdyaXRpbmcgb3V0IGFcbiAgICAvLyBkaXJlY3RvcnksIGl0J3MgdmVyeSBwb3NzaWJsZSB0aGF0IHRoZSB0aGluZyB3ZSdyZSBsaW5raW5nIHRvXG4gICAgLy8gZG9lc24ndCBleGlzdCB5ZXQgKGVzcGVjaWFsbHkgaWYgaXQgd2FzIGludGVuZGVkIGFzIGEgc3ltbGluayksXG4gICAgLy8gc28gc3dhbGxvdyBFTk9FTlQgZXJyb3JzIGhlcmUgYW5kIGp1c3Qgc29sZGllciBpbi5cbiAgICAvLyBBZGRpdGlvbmFsbHksIGFuIEVQRVJNIG9yIEVBQ0NFUyBjYW4gaGFwcGVuIG9uIHdpbjMyIGlmIGl0J3MgdHJ5aW5nXG4gICAgLy8gdG8gbWFrZSBhIGxpbmsgdG8gYSBkaXJlY3RvcnkuICBBZ2FpbiwganVzdCBza2lwIGl0LlxuICAgIC8vIEEgYmV0dGVyIHNvbHV0aW9uIHdvdWxkIGJlIHRvIGhhdmUgZnMuc3ltbGluayBiZSBzdXBwb3J0ZWQgb25cbiAgICAvLyB3aW5kb3dzIGluIHNvbWUgbmljZSBmYXNoaW9uLlxuICAgIGlmIChlcikge1xuICAgICAgaWYgKChlci5jb2RlID09PSAnRU5PRU5UJyB8fFxuICAgICAgICBlci5jb2RlID09PSAnRUFDQ0VTJyB8fFxuICAgICAgICBlci5jb2RlID09PSAnRVBFUk0nKSAmJiBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICAgIHNlbGYucmVhZHkgPSB0cnVlXG4gICAgICAgIHNlbGYuZW1pdCgncmVhZHknKVxuICAgICAgICBzZWxmLmVtaXQoJ2VuZCcpXG4gICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnKVxuICAgICAgICBzZWxmLmVuZCA9IHNlbGYuX2ZpbmlzaCA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICB9IGVsc2UgcmV0dXJuIHNlbGYuZXJyb3IoZXIpXG4gICAgfVxuICAgIGZpbmlzaChzZWxmKVxuICB9KVxufVxuXG5mdW5jdGlvbiBmaW5pc2ggKHNlbGYpIHtcbiAgc2VsZi5yZWFkeSA9IHRydWVcbiAgc2VsZi5lbWl0KCdyZWFkeScpXG4gIGlmIChzZWxmLl9lbmRlZCAmJiAhc2VsZi5fZmluaXNoZWQpIHNlbGYuX2ZpbmlzaCgpXG59XG5cbkxpbmtXcml0ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY29uc29sZS5lcnJvcihcIkxXIGZpbmlzaCBpbiBlbmRcIilcbiAgdGhpcy5fZW5kZWQgPSB0cnVlXG4gIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgdGhpcy5fZmluaXNoZWQgPSB0cnVlXG4gICAgdGhpcy5fZmluaXNoKClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJMaW5rV3JpdGVyIiwiZnMiLCJyZXF1aXJlIiwiV3JpdGVyIiwiaW5oZXJpdHMiLCJwYXRoIiwicmltcmFmIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJ0eXBlIiwiTGluayIsIlN5bWJvbGljTGluayIsImxpbmtwYXRoIiwiZXJyb3IiLCJjYWxsIiwicHJvdG90eXBlIiwiX2NyZWF0ZSIsImhhcmQiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJsaW5rIiwibHAiLCJyZXNvbHZlIiwiZGlybmFtZSIsImNsb2JiZXIiLCJyZWFkbGluayIsIl9wYXRoIiwiZXIiLCJwIiwiZmluaXNoIiwiY3JlYXRlIiwiY29kZSIsInJlYWR5IiwiZW1pdCIsImVuZCIsIl9maW5pc2giLCJfZW5kZWQiLCJfZmluaXNoZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/link-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/proxy-reader.js":
/*!**************************************************!*\
  !*** ./node_modules/fstream/lib/proxy-reader.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A reader for when we don't yet know what kind of thing\n// the thing is.\nmodule.exports = ProxyReader;\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(rsc)/./node_modules/fstream/lib/get-type.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\ninherits(ProxyReader, Reader);\nfunction ProxyReader(props) {\n    var self = this;\n    if (!(self instanceof ProxyReader)) {\n        throw new Error(\"ProxyReader must be called as constructor.\");\n    }\n    self.props = props;\n    self._buffer = [];\n    self.ready = false;\n    Reader.call(self, props);\n}\nProxyReader.prototype._stat = function() {\n    var self = this;\n    var props = self.props;\n    // stat the thing to see what the proxy should be.\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    fs[stat](props.path, function(er, current) {\n        var type;\n        if (er || !current) {\n            type = \"File\";\n        } else {\n            type = getType(current);\n        }\n        props[type] = true;\n        props.type = self.type = type;\n        self._old = current;\n        self._addProxy(Reader(props, current));\n    });\n};\nProxyReader.prototype._addProxy = function(proxy) {\n    var self = this;\n    if (self._proxyTarget) {\n        return self.error(\"proxy already set\");\n    }\n    self._proxyTarget = proxy;\n    proxy._proxy = self;\n    [\n        \"error\",\n        \"data\",\n        \"end\",\n        \"close\",\n        \"linkpath\",\n        \"entry\",\n        \"entryEnd\",\n        \"child\",\n        \"childEnd\",\n        \"warn\",\n        \"stat\"\n    ].forEach(function(ev) {\n        // console.error('~~ proxy event', ev, self.path)\n        proxy.on(ev, self.emit.bind(self, ev));\n    });\n    self.emit(\"proxy\", proxy);\n    proxy.on(\"ready\", function() {\n        // console.error(\"~~ proxy is ready!\", self.path)\n        self.ready = true;\n        self.emit(\"ready\");\n    });\n    var calls = self._buffer;\n    self._buffer.length = 0;\n    calls.forEach(function(c) {\n        proxy[c[0]].apply(proxy, c[1]);\n    });\n};\nProxyReader.prototype.pause = function() {\n    return this._proxyTarget ? this._proxyTarget.pause() : false;\n};\nProxyReader.prototype.resume = function() {\n    return this._proxyTarget ? this._proxyTarget.resume() : false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvcHJveHktcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCxnQkFBZ0I7QUFFaEJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsVUFBVUQsbUJBQU9BLENBQUM7QUFDdEIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsS0FBS0gsbUJBQU9BLENBQUM7QUFFakJFLFNBQVNKLGFBQWFDO0FBRXRCLFNBQVNELFlBQWFNLEtBQUs7SUFDekIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JQLFdBQVUsR0FBSTtRQUNsQyxNQUFNLElBQUlRLE1BQU07SUFDbEI7SUFFQUQsS0FBS0QsS0FBSyxHQUFHQTtJQUNiQyxLQUFLRSxPQUFPLEdBQUcsRUFBRTtJQUNqQkYsS0FBS0csS0FBSyxHQUFHO0lBRWJULE9BQU9VLElBQUksQ0FBQ0osTUFBTUQ7QUFDcEI7QUFFQU4sWUFBWVksU0FBUyxDQUFDQyxLQUFLLEdBQUc7SUFDNUIsSUFBSU4sT0FBTyxJQUFJO0lBQ2YsSUFBSUQsUUFBUUMsS0FBS0QsS0FBSztJQUN0QixrREFBa0Q7SUFDbEQsSUFBSVEsT0FBT1IsTUFBTVMsTUFBTSxHQUFHLFNBQVM7SUFFbkNWLEVBQUUsQ0FBQ1MsS0FBSyxDQUFDUixNQUFNVSxJQUFJLEVBQUUsU0FBVUMsRUFBRSxFQUFFQyxPQUFPO1FBQ3hDLElBQUlDO1FBQ0osSUFBSUYsTUFBTSxDQUFDQyxTQUFTO1lBQ2xCQyxPQUFPO1FBQ1QsT0FBTztZQUNMQSxPQUFPaEIsUUFBUWU7UUFDakI7UUFFQVosS0FBSyxDQUFDYSxLQUFLLEdBQUc7UUFDZGIsTUFBTWEsSUFBSSxHQUFHWixLQUFLWSxJQUFJLEdBQUdBO1FBRXpCWixLQUFLYSxJQUFJLEdBQUdGO1FBQ1pYLEtBQUtjLFNBQVMsQ0FBQ3BCLE9BQU9LLE9BQU9ZO0lBQy9CO0FBQ0Y7QUFFQWxCLFlBQVlZLFNBQVMsQ0FBQ1MsU0FBUyxHQUFHLFNBQVVDLEtBQUs7SUFDL0MsSUFBSWYsT0FBTyxJQUFJO0lBQ2YsSUFBSUEsS0FBS2dCLFlBQVksRUFBRTtRQUNyQixPQUFPaEIsS0FBS2lCLEtBQUssQ0FBQztJQUNwQjtJQUVBakIsS0FBS2dCLFlBQVksR0FBR0Q7SUFDcEJBLE1BQU1HLE1BQU0sR0FBR2xCO0lBRWQ7UUFDQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0QsQ0FBQ21CLE9BQU8sQ0FBQyxTQUFVQyxFQUFFO1FBQ3BCLGlEQUFpRDtRQUNqREwsTUFBTU0sRUFBRSxDQUFDRCxJQUFJcEIsS0FBS3NCLElBQUksQ0FBQ0MsSUFBSSxDQUFDdkIsTUFBTW9CO0lBQ3BDO0lBRUFwQixLQUFLc0IsSUFBSSxDQUFDLFNBQVNQO0lBRW5CQSxNQUFNTSxFQUFFLENBQUMsU0FBUztRQUNoQixpREFBaUQ7UUFDakRyQixLQUFLRyxLQUFLLEdBQUc7UUFDYkgsS0FBS3NCLElBQUksQ0FBQztJQUNaO0lBRUEsSUFBSUUsUUFBUXhCLEtBQUtFLE9BQU87SUFDeEJGLEtBQUtFLE9BQU8sQ0FBQ3VCLE1BQU0sR0FBRztJQUN0QkQsTUFBTUwsT0FBTyxDQUFDLFNBQVVPLENBQUM7UUFDdkJYLEtBQUssQ0FBQ1csQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDQyxLQUFLLENBQUNaLE9BQU9XLENBQUMsQ0FBQyxFQUFFO0lBQy9CO0FBQ0Y7QUFFQWpDLFlBQVlZLFNBQVMsQ0FBQ3VCLEtBQUssR0FBRztJQUM1QixPQUFPLElBQUksQ0FBQ1osWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDWSxLQUFLLEtBQUs7QUFDekQ7QUFFQW5DLFlBQVlZLFNBQVMsQ0FBQ3dCLE1BQU0sR0FBRztJQUM3QixPQUFPLElBQUksQ0FBQ2IsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDYSxNQUFNLEtBQUs7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lc2hlZXQtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL2ZzdHJlYW0vbGliL3Byb3h5LXJlYWRlci5qcz81MDU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgcmVhZGVyIGZvciB3aGVuIHdlIGRvbid0IHlldCBrbm93IHdoYXQga2luZCBvZiB0aGluZ1xuLy8gdGhlIHRoaW5nIGlzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb3h5UmVhZGVyXG5cbnZhciBSZWFkZXIgPSByZXF1aXJlKCcuL3JlYWRlci5qcycpXG52YXIgZ2V0VHlwZSA9IHJlcXVpcmUoJy4vZ2V0LXR5cGUuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKVxuXG5pbmhlcml0cyhQcm94eVJlYWRlciwgUmVhZGVyKVxuXG5mdW5jdGlvbiBQcm94eVJlYWRlciAocHJvcHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghKHNlbGYgaW5zdGFuY2VvZiBQcm94eVJlYWRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3h5UmVhZGVyIG11c3QgYmUgY2FsbGVkIGFzIGNvbnN0cnVjdG9yLicpXG4gIH1cblxuICBzZWxmLnByb3BzID0gcHJvcHNcbiAgc2VsZi5fYnVmZmVyID0gW11cbiAgc2VsZi5yZWFkeSA9IGZhbHNlXG5cbiAgUmVhZGVyLmNhbGwoc2VsZiwgcHJvcHMpXG59XG5cblByb3h5UmVhZGVyLnByb3RvdHlwZS5fc3RhdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwcm9wcyA9IHNlbGYucHJvcHNcbiAgLy8gc3RhdCB0aGUgdGhpbmcgdG8gc2VlIHdoYXQgdGhlIHByb3h5IHNob3VsZCBiZS5cbiAgdmFyIHN0YXQgPSBwcm9wcy5mb2xsb3cgPyAnc3RhdCcgOiAnbHN0YXQnXG5cbiAgZnNbc3RhdF0ocHJvcHMucGF0aCwgZnVuY3Rpb24gKGVyLCBjdXJyZW50KSB7XG4gICAgdmFyIHR5cGVcbiAgICBpZiAoZXIgfHwgIWN1cnJlbnQpIHtcbiAgICAgIHR5cGUgPSAnRmlsZSdcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IGdldFR5cGUoY3VycmVudClcbiAgICB9XG5cbiAgICBwcm9wc1t0eXBlXSA9IHRydWVcbiAgICBwcm9wcy50eXBlID0gc2VsZi50eXBlID0gdHlwZVxuXG4gICAgc2VsZi5fb2xkID0gY3VycmVudFxuICAgIHNlbGYuX2FkZFByb3h5KFJlYWRlcihwcm9wcywgY3VycmVudCkpXG4gIH0pXG59XG5cblByb3h5UmVhZGVyLnByb3RvdHlwZS5fYWRkUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9wcm94eVRhcmdldCkge1xuICAgIHJldHVybiBzZWxmLmVycm9yKCdwcm94eSBhbHJlYWR5IHNldCcpXG4gIH1cblxuICBzZWxmLl9wcm94eVRhcmdldCA9IHByb3h5XG4gIHByb3h5Ll9wcm94eSA9IHNlbGZcblxuICA7W1xuICAgICdlcnJvcicsXG4gICAgJ2RhdGEnLFxuICAgICdlbmQnLFxuICAgICdjbG9zZScsXG4gICAgJ2xpbmtwYXRoJyxcbiAgICAnZW50cnknLFxuICAgICdlbnRyeUVuZCcsXG4gICAgJ2NoaWxkJyxcbiAgICAnY2hpbGRFbmQnLFxuICAgICd3YXJuJyxcbiAgICAnc3RhdCdcbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChldikge1xuICAgIC8vIGNvbnNvbGUuZXJyb3IoJ35+IHByb3h5IGV2ZW50JywgZXYsIHNlbGYucGF0aClcbiAgICBwcm94eS5vbihldiwgc2VsZi5lbWl0LmJpbmQoc2VsZiwgZXYpKVxuICB9KVxuXG4gIHNlbGYuZW1pdCgncHJveHknLCBwcm94eSlcblxuICBwcm94eS5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gY29uc29sZS5lcnJvcihcIn5+IHByb3h5IGlzIHJlYWR5IVwiLCBzZWxmLnBhdGgpXG4gICAgc2VsZi5yZWFkeSA9IHRydWVcbiAgICBzZWxmLmVtaXQoJ3JlYWR5JylcbiAgfSlcblxuICB2YXIgY2FsbHMgPSBzZWxmLl9idWZmZXJcbiAgc2VsZi5fYnVmZmVyLmxlbmd0aCA9IDBcbiAgY2FsbHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIHByb3h5W2NbMF1dLmFwcGx5KHByb3h5LCBjWzFdKVxuICB9KVxufVxuXG5Qcm94eVJlYWRlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9wcm94eVRhcmdldCA/IHRoaXMuX3Byb3h5VGFyZ2V0LnBhdXNlKCkgOiBmYWxzZVxufVxuXG5Qcm94eVJlYWRlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcHJveHlUYXJnZXQgPyB0aGlzLl9wcm94eVRhcmdldC5yZXN1bWUoKSA6IGZhbHNlXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlByb3h5UmVhZGVyIiwiUmVhZGVyIiwicmVxdWlyZSIsImdldFR5cGUiLCJpbmhlcml0cyIsImZzIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJfYnVmZmVyIiwicmVhZHkiLCJjYWxsIiwicHJvdG90eXBlIiwiX3N0YXQiLCJzdGF0IiwiZm9sbG93IiwicGF0aCIsImVyIiwiY3VycmVudCIsInR5cGUiLCJfb2xkIiwiX2FkZFByb3h5IiwicHJveHkiLCJfcHJveHlUYXJnZXQiLCJlcnJvciIsIl9wcm94eSIsImZvckVhY2giLCJldiIsIm9uIiwiZW1pdCIsImJpbmQiLCJjYWxscyIsImxlbmd0aCIsImMiLCJhcHBseSIsInBhdXNlIiwicmVzdW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/proxy-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/proxy-writer.js":
/*!**************************************************!*\
  !*** ./node_modules/fstream/lib/proxy-writer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// A writer for when we don't know what kind of thing\n// the thing is.  That is, it's not explicitly set,\n// so we're going to make it whatever the thing already\n// is, or \"File\"\n//\n// Until then, collect all events.\nmodule.exports = ProxyWriter;\nvar Writer = __webpack_require__(/*! ./writer.js */ \"(rsc)/./node_modules/fstream/lib/writer.js\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(rsc)/./node_modules/fstream/lib/get-type.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar collect = __webpack_require__(/*! ./collect.js */ \"(rsc)/./node_modules/fstream/lib/collect.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\ninherits(ProxyWriter, Writer);\nfunction ProxyWriter(props) {\n    var self = this;\n    if (!(self instanceof ProxyWriter)) {\n        throw new Error(\"ProxyWriter must be called as constructor.\");\n    }\n    self.props = props;\n    self._needDrain = false;\n    Writer.call(self, props);\n}\nProxyWriter.prototype._stat = function() {\n    var self = this;\n    var props = self.props;\n    // stat the thing to see what the proxy should be.\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    fs[stat](props.path, function(er, current) {\n        var type;\n        if (er || !current) {\n            type = \"File\";\n        } else {\n            type = getType(current);\n        }\n        props[type] = true;\n        props.type = self.type = type;\n        self._old = current;\n        self._addProxy(Writer(props, current));\n    });\n};\nProxyWriter.prototype._addProxy = function(proxy) {\n    // console.error(\"~~ set proxy\", this.path)\n    var self = this;\n    if (self._proxy) {\n        return self.error(\"proxy already set\");\n    }\n    self._proxy = proxy;\n    [\n        \"ready\",\n        \"error\",\n        \"close\",\n        \"pipe\",\n        \"drain\",\n        \"warn\"\n    ].forEach(function(ev) {\n        proxy.on(ev, self.emit.bind(self, ev));\n    });\n    self.emit(\"proxy\", proxy);\n    var calls = self._buffer;\n    calls.forEach(function(c) {\n        // console.error(\"~~ ~~ proxy buffered call\", c[0], c[1])\n        proxy[c[0]].apply(proxy, c[1]);\n    });\n    self._buffer.length = 0;\n    if (self._needsDrain) self.emit(\"drain\");\n};\nProxyWriter.prototype.add = function(entry) {\n    // console.error(\"~~ proxy add\")\n    collect(entry);\n    if (!this._proxy) {\n        this._buffer.push([\n            \"add\",\n            [\n                entry\n            ]\n        ]);\n        this._needDrain = true;\n        return false;\n    }\n    return this._proxy.add(entry);\n};\nProxyWriter.prototype.write = function(c) {\n    // console.error('~~ proxy write')\n    if (!this._proxy) {\n        this._buffer.push([\n            \"write\",\n            [\n                c\n            ]\n        ]);\n        this._needDrain = true;\n        return false;\n    }\n    return this._proxy.write(c);\n};\nProxyWriter.prototype.end = function(c) {\n    // console.error('~~ proxy end')\n    if (!this._proxy) {\n        this._buffer.push([\n            \"end\",\n            [\n                c\n            ]\n        ]);\n        return false;\n    }\n    return this._proxy.end(c);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvcHJveHktd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUNyRCxtREFBbUQ7QUFDbkQsdURBQXVEO0FBQ3ZELGdCQUFnQjtBQUNoQixFQUFFO0FBQ0Ysa0NBQWtDO0FBRWxDQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFVBQVVILG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlJLEtBQUtKLG1CQUFPQSxDQUFDO0FBRWpCRSxTQUFTSixhQUFhQztBQUV0QixTQUFTRCxZQUFhTyxLQUFLO0lBQ3pCLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCUixXQUFVLEdBQUk7UUFDbEMsTUFBTSxJQUFJUyxNQUFNO0lBQ2xCO0lBRUFELEtBQUtELEtBQUssR0FBR0E7SUFDYkMsS0FBS0UsVUFBVSxHQUFHO0lBRWxCVCxPQUFPVSxJQUFJLENBQUNILE1BQU1EO0FBQ3BCO0FBRUFQLFlBQVlZLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO0lBQzVCLElBQUlMLE9BQU8sSUFBSTtJQUNmLElBQUlELFFBQVFDLEtBQUtELEtBQUs7SUFDdEIsa0RBQWtEO0lBQ2xELElBQUlPLE9BQU9QLE1BQU1RLE1BQU0sR0FBRyxTQUFTO0lBRW5DVCxFQUFFLENBQUNRLEtBQUssQ0FBQ1AsTUFBTVMsSUFBSSxFQUFFLFNBQVVDLEVBQUUsRUFBRUMsT0FBTztRQUN4QyxJQUFJQztRQUNKLElBQUlGLE1BQU0sQ0FBQ0MsU0FBUztZQUNsQkMsT0FBTztRQUNULE9BQU87WUFDTEEsT0FBT2hCLFFBQVFlO1FBQ2pCO1FBRUFYLEtBQUssQ0FBQ1ksS0FBSyxHQUFHO1FBQ2RaLE1BQU1ZLElBQUksR0FBR1gsS0FBS1csSUFBSSxHQUFHQTtRQUV6QlgsS0FBS1ksSUFBSSxHQUFHRjtRQUNaVixLQUFLYSxTQUFTLENBQUNwQixPQUFPTSxPQUFPVztJQUMvQjtBQUNGO0FBRUFsQixZQUFZWSxTQUFTLENBQUNTLFNBQVMsR0FBRyxTQUFVQyxLQUFLO0lBQy9DLDJDQUEyQztJQUMzQyxJQUFJZCxPQUFPLElBQUk7SUFDZixJQUFJQSxLQUFLZSxNQUFNLEVBQUU7UUFDZixPQUFPZixLQUFLZ0IsS0FBSyxDQUFDO0lBQ3BCO0lBRUFoQixLQUFLZSxNQUFNLEdBQUdEO0lBQ2I7UUFDQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRCxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUNwQkosTUFBTUssRUFBRSxDQUFDRCxJQUFJbEIsS0FBS29CLElBQUksQ0FBQ0MsSUFBSSxDQUFDckIsTUFBTWtCO0lBQ3BDO0lBRUFsQixLQUFLb0IsSUFBSSxDQUFDLFNBQVNOO0lBRW5CLElBQUlRLFFBQVF0QixLQUFLdUIsT0FBTztJQUN4QkQsTUFBTUwsT0FBTyxDQUFDLFNBQVVPLENBQUM7UUFDdkIseURBQXlEO1FBQ3pEVixLQUFLLENBQUNVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFDWCxPQUFPVSxDQUFDLENBQUMsRUFBRTtJQUMvQjtJQUNBeEIsS0FBS3VCLE9BQU8sQ0FBQ0csTUFBTSxHQUFHO0lBQ3RCLElBQUkxQixLQUFLMkIsV0FBVyxFQUFFM0IsS0FBS29CLElBQUksQ0FBQztBQUNsQztBQUVBNUIsWUFBWVksU0FBUyxDQUFDd0IsR0FBRyxHQUFHLFNBQVVDLEtBQUs7SUFDekMsZ0NBQWdDO0lBQ2hDaEMsUUFBUWdDO0lBRVIsSUFBSSxDQUFDLElBQUksQ0FBQ2QsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQ1EsT0FBTyxDQUFDTyxJQUFJLENBQUM7WUFBQztZQUFPO2dCQUFDRDthQUFNO1NBQUM7UUFDbEMsSUFBSSxDQUFDM0IsVUFBVSxHQUFHO1FBQ2xCLE9BQU87SUFDVDtJQUNBLE9BQU8sSUFBSSxDQUFDYSxNQUFNLENBQUNhLEdBQUcsQ0FBQ0M7QUFDekI7QUFFQXJDLFlBQVlZLFNBQVMsQ0FBQzJCLEtBQUssR0FBRyxTQUFVUCxDQUFDO0lBQ3ZDLGtDQUFrQztJQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDVCxNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDUSxPQUFPLENBQUNPLElBQUksQ0FBQztZQUFDO1lBQVM7Z0JBQUNOO2FBQUU7U0FBQztRQUNoQyxJQUFJLENBQUN0QixVQUFVLEdBQUc7UUFDbEIsT0FBTztJQUNUO0lBQ0EsT0FBTyxJQUFJLENBQUNhLE1BQU0sQ0FBQ2dCLEtBQUssQ0FBQ1A7QUFDM0I7QUFFQWhDLFlBQVlZLFNBQVMsQ0FBQzRCLEdBQUcsR0FBRyxTQUFVUixDQUFDO0lBQ3JDLGdDQUFnQztJQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDVCxNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDUSxPQUFPLENBQUNPLElBQUksQ0FBQztZQUFDO1lBQU87Z0JBQUNOO2FBQUU7U0FBQztRQUM5QixPQUFPO0lBQ1Q7SUFDQSxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDaUIsR0FBRyxDQUFDUjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RpbWVzaGVldC1wcm9jZXNzb3IvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvcHJveHktd3JpdGVyLmpzPzE1YmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSB3cml0ZXIgZm9yIHdoZW4gd2UgZG9uJ3Qga25vdyB3aGF0IGtpbmQgb2YgdGhpbmdcbi8vIHRoZSB0aGluZyBpcy4gIFRoYXQgaXMsIGl0J3Mgbm90IGV4cGxpY2l0bHkgc2V0LFxuLy8gc28gd2UncmUgZ29pbmcgdG8gbWFrZSBpdCB3aGF0ZXZlciB0aGUgdGhpbmcgYWxyZWFkeVxuLy8gaXMsIG9yIFwiRmlsZVwiXG4vL1xuLy8gVW50aWwgdGhlbiwgY29sbGVjdCBhbGwgZXZlbnRzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb3h5V3JpdGVyXG5cbnZhciBXcml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlci5qcycpXG52YXIgZ2V0VHlwZSA9IHJlcXVpcmUoJy4vZ2V0LXR5cGUuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIGNvbGxlY3QgPSByZXF1aXJlKCcuL2NvbGxlY3QuanMnKVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxuXG5pbmhlcml0cyhQcm94eVdyaXRlciwgV3JpdGVyKVxuXG5mdW5jdGlvbiBQcm94eVdyaXRlciAocHJvcHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghKHNlbGYgaW5zdGFuY2VvZiBQcm94eVdyaXRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3h5V3JpdGVyIG11c3QgYmUgY2FsbGVkIGFzIGNvbnN0cnVjdG9yLicpXG4gIH1cblxuICBzZWxmLnByb3BzID0gcHJvcHNcbiAgc2VsZi5fbmVlZERyYWluID0gZmFsc2VcblxuICBXcml0ZXIuY2FsbChzZWxmLCBwcm9wcylcbn1cblxuUHJveHlXcml0ZXIucHJvdG90eXBlLl9zdGF0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHByb3BzID0gc2VsZi5wcm9wc1xuICAvLyBzdGF0IHRoZSB0aGluZyB0byBzZWUgd2hhdCB0aGUgcHJveHkgc2hvdWxkIGJlLlxuICB2YXIgc3RhdCA9IHByb3BzLmZvbGxvdyA/ICdzdGF0JyA6ICdsc3RhdCdcblxuICBmc1tzdGF0XShwcm9wcy5wYXRoLCBmdW5jdGlvbiAoZXIsIGN1cnJlbnQpIHtcbiAgICB2YXIgdHlwZVxuICAgIGlmIChlciB8fCAhY3VycmVudCkge1xuICAgICAgdHlwZSA9ICdGaWxlJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gZ2V0VHlwZShjdXJyZW50KVxuICAgIH1cblxuICAgIHByb3BzW3R5cGVdID0gdHJ1ZVxuICAgIHByb3BzLnR5cGUgPSBzZWxmLnR5cGUgPSB0eXBlXG5cbiAgICBzZWxmLl9vbGQgPSBjdXJyZW50XG4gICAgc2VsZi5fYWRkUHJveHkoV3JpdGVyKHByb3BzLCBjdXJyZW50KSlcbiAgfSlcbn1cblxuUHJveHlXcml0ZXIucHJvdG90eXBlLl9hZGRQcm94eSA9IGZ1bmN0aW9uIChwcm94eSkge1xuICAvLyBjb25zb2xlLmVycm9yKFwifn4gc2V0IHByb3h5XCIsIHRoaXMucGF0aClcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9wcm94eSkge1xuICAgIHJldHVybiBzZWxmLmVycm9yKCdwcm94eSBhbHJlYWR5IHNldCcpXG4gIH1cblxuICBzZWxmLl9wcm94eSA9IHByb3h5XG4gIDtbXG4gICAgJ3JlYWR5JyxcbiAgICAnZXJyb3InLFxuICAgICdjbG9zZScsXG4gICAgJ3BpcGUnLFxuICAgICdkcmFpbicsXG4gICAgJ3dhcm4nXG4gIF0uZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICBwcm94eS5vbihldiwgc2VsZi5lbWl0LmJpbmQoc2VsZiwgZXYpKVxuICB9KVxuXG4gIHNlbGYuZW1pdCgncHJveHknLCBwcm94eSlcblxuICB2YXIgY2FsbHMgPSBzZWxmLl9idWZmZXJcbiAgY2FsbHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJ+fiB+fiBwcm94eSBidWZmZXJlZCBjYWxsXCIsIGNbMF0sIGNbMV0pXG4gICAgcHJveHlbY1swXV0uYXBwbHkocHJveHksIGNbMV0pXG4gIH0pXG4gIHNlbGYuX2J1ZmZlci5sZW5ndGggPSAwXG4gIGlmIChzZWxmLl9uZWVkc0RyYWluKSBzZWxmLmVtaXQoJ2RyYWluJylcbn1cblxuUHJveHlXcml0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAvLyBjb25zb2xlLmVycm9yKFwifn4gcHJveHkgYWRkXCIpXG4gIGNvbGxlY3QoZW50cnkpXG5cbiAgaWYgKCF0aGlzLl9wcm94eSkge1xuICAgIHRoaXMuX2J1ZmZlci5wdXNoKFsnYWRkJywgW2VudHJ5XV0pXG4gICAgdGhpcy5fbmVlZERyYWluID0gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0aGlzLl9wcm94eS5hZGQoZW50cnkpXG59XG5cblByb3h5V3JpdGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjKSB7XG4gIC8vIGNvbnNvbGUuZXJyb3IoJ35+IHByb3h5IHdyaXRlJylcbiAgaWYgKCF0aGlzLl9wcm94eSkge1xuICAgIHRoaXMuX2J1ZmZlci5wdXNoKFsnd3JpdGUnLCBbY11dKVxuICAgIHRoaXMuX25lZWREcmFpbiA9IHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdGhpcy5fcHJveHkud3JpdGUoYylcbn1cblxuUHJveHlXcml0ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjKSB7XG4gIC8vIGNvbnNvbGUuZXJyb3IoJ35+IHByb3h5IGVuZCcpXG4gIGlmICghdGhpcy5fcHJveHkpIHtcbiAgICB0aGlzLl9idWZmZXIucHVzaChbJ2VuZCcsIFtjXV0pXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRoaXMuX3Byb3h5LmVuZChjKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQcm94eVdyaXRlciIsIldyaXRlciIsInJlcXVpcmUiLCJnZXRUeXBlIiwiaW5oZXJpdHMiLCJjb2xsZWN0IiwiZnMiLCJwcm9wcyIsInNlbGYiLCJFcnJvciIsIl9uZWVkRHJhaW4iLCJjYWxsIiwicHJvdG90eXBlIiwiX3N0YXQiLCJzdGF0IiwiZm9sbG93IiwicGF0aCIsImVyIiwiY3VycmVudCIsInR5cGUiLCJfb2xkIiwiX2FkZFByb3h5IiwicHJveHkiLCJfcHJveHkiLCJlcnJvciIsImZvckVhY2giLCJldiIsIm9uIiwiZW1pdCIsImJpbmQiLCJjYWxscyIsIl9idWZmZXIiLCJjIiwiYXBwbHkiLCJsZW5ndGgiLCJfbmVlZHNEcmFpbiIsImFkZCIsImVudHJ5IiwicHVzaCIsIndyaXRlIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/proxy-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/reader.js":
/*!********************************************!*\
  !*** ./node_modules/fstream/lib/reader.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Reader;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(rsc)/./node_modules/fstream/lib/get-type.js\");\nvar hardLinks = Reader.hardLinks = {};\nvar Abstract = __webpack_require__(/*! ./abstract.js */ \"(rsc)/./node_modules/fstream/lib/abstract.js\");\n// Must do this *before* loading the child classes\ninherits(Reader, Abstract);\nvar LinkReader = __webpack_require__(/*! ./link-reader.js */ \"(rsc)/./node_modules/fstream/lib/link-reader.js\");\nfunction Reader(props, currentStat) {\n    var self = this;\n    if (!(self instanceof Reader)) return new Reader(props, currentStat);\n    if (typeof props === \"string\") {\n        props = {\n            path: props\n        };\n    }\n    // polymorphism.\n    // call fstream.Reader(dir) to get a DirReader object, etc.\n    // Note that, unlike in the Writer case, ProxyReader is going\n    // to be the *normal* state of affairs, since we rarely know\n    // the type of a file prior to reading it.\n    var type;\n    var ClassType;\n    if (props.type && typeof props.type === \"function\") {\n        type = props.type;\n        ClassType = type;\n    } else {\n        type = getType(props);\n        ClassType = Reader;\n    }\n    if (currentStat && !type) {\n        type = getType(currentStat);\n        props[type] = true;\n        props.type = type;\n    }\n    switch(type){\n        case \"Directory\":\n            ClassType = __webpack_require__(/*! ./dir-reader.js */ \"(rsc)/./node_modules/fstream/lib/dir-reader.js\");\n            break;\n        case \"Link\":\n        // XXX hard links are just files.\n        // However, it would be good to keep track of files' dev+inode\n        // and nlink values, and create a HardLinkReader that emits\n        // a linkpath value of the original copy, so that the tar\n        // writer can preserve them.\n        // ClassType = HardLinkReader\n        // break\n        case \"File\":\n            ClassType = __webpack_require__(/*! ./file-reader.js */ \"(rsc)/./node_modules/fstream/lib/file-reader.js\");\n            break;\n        case \"SymbolicLink\":\n            ClassType = LinkReader;\n            break;\n        case \"Socket\":\n            ClassType = __webpack_require__(/*! ./socket-reader.js */ \"(rsc)/./node_modules/fstream/lib/socket-reader.js\");\n            break;\n        case null:\n            ClassType = __webpack_require__(/*! ./proxy-reader.js */ \"(rsc)/./node_modules/fstream/lib/proxy-reader.js\");\n            break;\n    }\n    if (!(self instanceof ClassType)) {\n        return new ClassType(props);\n    }\n    Abstract.call(self);\n    if (!props.path) {\n        self.error(\"Must provide a path\", null, true);\n    }\n    self.readable = true;\n    self.writable = false;\n    self.type = type;\n    self.props = props;\n    self.depth = props.depth = props.depth || 0;\n    self.parent = props.parent || null;\n    self.root = props.root || props.parent && props.parent.root || self;\n    self._path = self.path = path.resolve(props.path);\n    if (process.platform === \"win32\") {\n        self.path = self._path = self.path.replace(/\\?/g, \"_\");\n        if (self._path.length >= 260) {\n            // how DOES one create files on the moon?\n            // if the path has spaces in it, then UNC will fail.\n            self._swallowErrors = true;\n            // if (self._path.indexOf(\" \") === -1) {\n            self._path = \"\\\\\\\\?\\\\\" + self.path.replace(/\\//g, \"\\\\\");\n        // }\n        }\n    }\n    self.basename = props.basename = path.basename(self.path);\n    self.dirname = props.dirname = path.dirname(self.path);\n    // these have served their purpose, and are now just noisy clutter\n    props.parent = props.root = null;\n    // console.error(\"\\n\\n\\n%s setting size to\", props.path, props.size)\n    self.size = props.size;\n    self.filter = typeof props.filter === \"function\" ? props.filter : null;\n    if (props.sort === \"alpha\") props.sort = alphasort;\n    // start the ball rolling.\n    // this will stat the thing, and then call self._read()\n    // to start reading whatever it is.\n    // console.error(\"calling stat\", props.path, currentStat)\n    self._stat(currentStat);\n}\nfunction alphasort(a, b) {\n    return a === b ? 0 : a.toLowerCase() > b.toLowerCase() ? 1 : a.toLowerCase() < b.toLowerCase() ? -1 : a > b ? 1 : -1;\n}\nReader.prototype._stat = function(currentStat) {\n    var self = this;\n    var props = self.props;\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    // console.error(\"Reader._stat\", self._path, currentStat)\n    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat));\n    else fs[stat](self._path, statCb);\n    function statCb(er, props_) {\n        // console.error(\"Reader._stat, statCb\", self._path, props_, props_.nlink)\n        if (er) return self.error(er);\n        Object.keys(props_).forEach(function(k) {\n            props[k] = props_[k];\n        });\n        // if it's not the expected size, then abort here.\n        if (undefined !== self.size && props.size !== self.size) {\n            return self.error(\"incorrect size\");\n        }\n        self.size = props.size;\n        var type = getType(props);\n        var handleHardlinks = props.hardlinks !== false;\n        // special little thing for handling hardlinks.\n        if (handleHardlinks && type !== \"Directory\" && props.nlink && props.nlink > 1) {\n            var k = props.dev + \":\" + props.ino;\n            // console.error(\"Reader has nlink\", self._path, k)\n            if (hardLinks[k] === self._path || !hardLinks[k]) {\n                hardLinks[k] = self._path;\n            } else {\n                // switch into hardlink mode.\n                type = self.type = self.props.type = \"Link\";\n                self.Link = self.props.Link = true;\n                self.linkpath = self.props.linkpath = hardLinks[k];\n                // console.error(\"Hardlink detected, switching mode\", self._path, self.linkpath)\n                // Setting __proto__ would arguably be the \"correct\"\n                // approach here, but that just seems too wrong.\n                self._stat = self._read = LinkReader.prototype._read;\n            }\n        }\n        if (self.type && self.type !== type) {\n            self.error(\"Unexpected type: \" + type);\n        }\n        // if the filter doesn't pass, then just skip over this one.\n        // still have to emit end so that dir-walking can move on.\n        if (self.filter) {\n            var who = self._proxy || self;\n            // special handling for ProxyReaders\n            if (!self.filter.call(who, who, props)) {\n                if (!self._disowned) {\n                    self.abort();\n                    self.emit(\"end\");\n                    self.emit(\"close\");\n                }\n                return;\n            }\n        }\n        // last chance to abort or disown before the flow starts!\n        var events = [\n            \"_stat\",\n            \"stat\",\n            \"ready\"\n        ];\n        var e = 0;\n        (function go() {\n            if (self._aborted) {\n                self.emit(\"end\");\n                self.emit(\"close\");\n                return;\n            }\n            if (self._paused && self.type !== \"Directory\") {\n                self.once(\"resume\", go);\n                return;\n            }\n            var ev = events[e++];\n            if (!ev) {\n                return self._read();\n            }\n            self.emit(ev, props);\n            go();\n        })();\n    }\n};\nReader.prototype.pipe = function(dest) {\n    var self = this;\n    if (typeof dest.add === \"function\") {\n        // piping to a multi-compatible, and we've got directory entries.\n        self.on(\"entry\", function(entry) {\n            var ret = dest.add(entry);\n            if (ret === false) {\n                self.pause();\n            }\n        });\n    }\n    // console.error(\"R Pipe apply Stream Pipe\")\n    return Stream.prototype.pipe.apply(this, arguments);\n};\nReader.prototype.pause = function(who) {\n    this._paused = true;\n    who = who || this;\n    this.emit(\"pause\", who);\n    if (this._stream) this._stream.pause(who);\n};\nReader.prototype.resume = function(who) {\n    this._paused = false;\n    who = who || this;\n    this.emit(\"resume\", who);\n    if (this._stream) this._stream.resume(who);\n    this._read();\n};\nReader.prototype._read = function() {\n    this.error(\"Cannot read unknown type: \" + this.type);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/socket-reader.js":
/*!***************************************************!*\
  !*** ./node_modules/fstream/lib/socket-reader.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Just get the stats, and then don't do anything.\n// You can't really \"read\" from a socket.  You \"connect\" to it.\n// Mostly, this is here so that reading a dir with a socket in it\n// doesn't blow up.\nmodule.exports = SocketReader;\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar Reader = __webpack_require__(/*! ./reader.js */ \"(rsc)/./node_modules/fstream/lib/reader.js\");\ninherits(SocketReader, Reader);\nfunction SocketReader(props) {\n    var self = this;\n    if (!(self instanceof SocketReader)) {\n        throw new Error(\"SocketReader must be called as constructor.\");\n    }\n    if (!(props.type === \"Socket\" && props.Socket)) {\n        throw new Error(\"Non-socket type \" + props.type);\n    }\n    Reader.call(self, props);\n}\nSocketReader.prototype._read = function() {\n    var self = this;\n    if (self._paused) return;\n    // basically just a no-op, since we got all the info we have\n    // from the _stat method\n    if (!self._ended) {\n        self.emit(\"end\");\n        self.emit(\"close\");\n        self._ended = true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnN0cmVhbS9saWIvc29ja2V0LXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsK0RBQStEO0FBQy9ELGlFQUFpRTtBQUNqRSxtQkFBbUI7QUFFbkJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBV0MsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFFckJELFNBQVNELGNBQWNHO0FBRXZCLFNBQVNILGFBQWNJLEtBQUs7SUFDMUIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFFQSxDQUFBQSxnQkFBZ0JMLFlBQVcsR0FBSTtRQUNuQyxNQUFNLElBQUlNLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUVGLENBQUFBLE1BQU1HLElBQUksS0FBSyxZQUFZSCxNQUFNSSxNQUFNLEdBQUc7UUFDOUMsTUFBTSxJQUFJRixNQUFNLHFCQUFxQkYsTUFBTUcsSUFBSTtJQUNqRDtJQUVBSixPQUFPTSxJQUFJLENBQUNKLE1BQU1EO0FBQ3BCO0FBRUFKLGFBQWFVLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHO0lBQzdCLElBQUlOLE9BQU8sSUFBSTtJQUNmLElBQUlBLEtBQUtPLE9BQU8sRUFBRTtJQUNsQiw0REFBNEQ7SUFDNUQsd0JBQXdCO0lBQ3hCLElBQUksQ0FBQ1AsS0FBS1EsTUFBTSxFQUFFO1FBQ2hCUixLQUFLUyxJQUFJLENBQUM7UUFDVlQsS0FBS1MsSUFBSSxDQUFDO1FBQ1ZULEtBQUtRLE1BQU0sR0FBRztJQUNoQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltZXNoZWV0LXByb2Nlc3Nvci8uL25vZGVfbW9kdWxlcy9mc3RyZWFtL2xpYi9zb2NrZXQtcmVhZGVyLmpzPzE1YTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSnVzdCBnZXQgdGhlIHN0YXRzLCBhbmQgdGhlbiBkb24ndCBkbyBhbnl0aGluZy5cbi8vIFlvdSBjYW4ndCByZWFsbHkgXCJyZWFkXCIgZnJvbSBhIHNvY2tldC4gIFlvdSBcImNvbm5lY3RcIiB0byBpdC5cbi8vIE1vc3RseSwgdGhpcyBpcyBoZXJlIHNvIHRoYXQgcmVhZGluZyBhIGRpciB3aXRoIGEgc29ja2V0IGluIGl0XG4vLyBkb2Vzbid0IGJsb3cgdXAuXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0UmVhZGVyXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBSZWFkZXIgPSByZXF1aXJlKCcuL3JlYWRlci5qcycpXG5cbmluaGVyaXRzKFNvY2tldFJlYWRlciwgUmVhZGVyKVxuXG5mdW5jdGlvbiBTb2NrZXRSZWFkZXIgKHByb3BzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIShzZWxmIGluc3RhbmNlb2YgU29ja2V0UmVhZGVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU29ja2V0UmVhZGVyIG11c3QgYmUgY2FsbGVkIGFzIGNvbnN0cnVjdG9yLicpXG4gIH1cblxuICBpZiAoIShwcm9wcy50eXBlID09PSAnU29ja2V0JyAmJiBwcm9wcy5Tb2NrZXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tc29ja2V0IHR5cGUgJyArIHByb3BzLnR5cGUpXG4gIH1cblxuICBSZWFkZXIuY2FsbChzZWxmLCBwcm9wcylcbn1cblxuU29ja2V0UmVhZGVyLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9wYXVzZWQpIHJldHVyblxuICAvLyBiYXNpY2FsbHkganVzdCBhIG5vLW9wLCBzaW5jZSB3ZSBnb3QgYWxsIHRoZSBpbmZvIHdlIGhhdmVcbiAgLy8gZnJvbSB0aGUgX3N0YXQgbWV0aG9kXG4gIGlmICghc2VsZi5fZW5kZWQpIHtcbiAgICBzZWxmLmVtaXQoJ2VuZCcpXG4gICAgc2VsZi5lbWl0KCdjbG9zZScpXG4gICAgc2VsZi5fZW5kZWQgPSB0cnVlXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiU29ja2V0UmVhZGVyIiwiaW5oZXJpdHMiLCJyZXF1aXJlIiwiUmVhZGVyIiwicHJvcHMiLCJzZWxmIiwiRXJyb3IiLCJ0eXBlIiwiU29ja2V0IiwiY2FsbCIsInByb3RvdHlwZSIsIl9yZWFkIiwiX3BhdXNlZCIsIl9lbmRlZCIsImVtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/socket-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/lib/writer.js":
/*!********************************************!*\
  !*** ./node_modules/fstream/lib/writer.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Writer;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar rimraf = __webpack_require__(/*! rimraf */ \"(rsc)/./node_modules/fstream/node_modules/rimraf/rimraf.js\");\nvar mkdir = __webpack_require__(/*! mkdirp */ \"(rsc)/./node_modules/mkdirp/index.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar umask = process.platform === \"win32\" ? 0 : process.umask();\nvar getType = __webpack_require__(/*! ./get-type.js */ \"(rsc)/./node_modules/fstream/lib/get-type.js\");\nvar Abstract = __webpack_require__(/*! ./abstract.js */ \"(rsc)/./node_modules/fstream/lib/abstract.js\");\n// Must do this *before* loading the child classes\ninherits(Writer, Abstract);\nWriter.dirmode = parseInt(\"0777\", 8) & ~umask;\nWriter.filemode = parseInt(\"0666\", 8) & ~umask;\nvar DirWriter = __webpack_require__(/*! ./dir-writer.js */ \"(rsc)/./node_modules/fstream/lib/dir-writer.js\");\nvar LinkWriter = __webpack_require__(/*! ./link-writer.js */ \"(rsc)/./node_modules/fstream/lib/link-writer.js\");\nvar FileWriter = __webpack_require__(/*! ./file-writer.js */ \"(rsc)/./node_modules/fstream/lib/file-writer.js\");\nvar ProxyWriter = __webpack_require__(/*! ./proxy-writer.js */ \"(rsc)/./node_modules/fstream/lib/proxy-writer.js\");\n// props is the desired state.  current is optionally the current stat,\n// provided here so that subclasses can avoid statting the target\n// more than necessary.\nfunction Writer(props, current) {\n    var self = this;\n    if (typeof props === \"string\") {\n        props = {\n            path: props\n        };\n    }\n    // polymorphism.\n    // call fstream.Writer(dir) to get a DirWriter object, etc.\n    var type = getType(props);\n    var ClassType = Writer;\n    switch(type){\n        case \"Directory\":\n            ClassType = DirWriter;\n            break;\n        case \"File\":\n            ClassType = FileWriter;\n            break;\n        case \"Link\":\n        case \"SymbolicLink\":\n            ClassType = LinkWriter;\n            break;\n        case null:\n        default:\n            // Don't know yet what type to create, so we wrap in a proxy.\n            ClassType = ProxyWriter;\n            break;\n    }\n    if (!(self instanceof ClassType)) return new ClassType(props);\n    // now get down to business.\n    Abstract.call(self);\n    if (!props.path) self.error(\"Must provide a path\", null, true);\n    // props is what we want to set.\n    // set some convenience properties as well.\n    self.type = props.type;\n    self.props = props;\n    self.depth = props.depth || 0;\n    self.clobber = props.clobber === false ? props.clobber : true;\n    self.parent = props.parent || null;\n    self.root = props.root || props.parent && props.parent.root || self;\n    self._path = self.path = path.resolve(props.path);\n    if (process.platform === \"win32\") {\n        self.path = self._path = self.path.replace(/\\?/g, \"_\");\n        if (self._path.length >= 260) {\n            self._swallowErrors = true;\n            self._path = \"\\\\\\\\?\\\\\" + self.path.replace(/\\//g, \"\\\\\");\n        }\n    }\n    self.basename = path.basename(props.path);\n    self.dirname = path.dirname(props.path);\n    self.linkpath = props.linkpath || null;\n    props.parent = props.root = null;\n    // console.error(\"\\n\\n\\n%s setting size to\", props.path, props.size)\n    self.size = props.size;\n    if (typeof props.mode === \"string\") {\n        props.mode = parseInt(props.mode, 8);\n    }\n    self.readable = false;\n    self.writable = true;\n    // buffer until ready, or while handling another entry\n    self._buffer = [];\n    self.ready = false;\n    self.filter = typeof props.filter === \"function\" ? props.filter : null;\n    // start the ball rolling.\n    // this checks what's there already, and then calls\n    // self._create() to call the impl-specific creation stuff.\n    self._stat(current);\n}\n// Calling this means that it's something we can't create.\n// Just assert that it's already there, otherwise raise a warning.\nWriter.prototype._create = function() {\n    var self = this;\n    fs[self.props.follow ? \"stat\" : \"lstat\"](self._path, function(er) {\n        if (er) {\n            return self.warn(\"Cannot create \" + self._path + \"\\n\" + \"Unsupported type: \" + self.type, \"ENOTSUP\");\n        }\n        self._finish();\n    });\n};\nWriter.prototype._stat = function(current) {\n    var self = this;\n    var props = self.props;\n    var stat = props.follow ? \"stat\" : \"lstat\";\n    var who = self._proxy || self;\n    if (current) statCb(null, current);\n    else fs[stat](self._path, statCb);\n    function statCb(er, current) {\n        if (self.filter && !self.filter.call(who, who, current)) {\n            self._aborted = true;\n            self.emit(\"end\");\n            self.emit(\"close\");\n            return;\n        }\n        // if it's not there, great.  We'll just create it.\n        // if it is there, then we'll need to change whatever differs\n        if (er || !current) {\n            return create(self);\n        }\n        self._old = current;\n        var currentType = getType(current);\n        // if it's a type change, then we need to clobber or error.\n        // if it's not a type change, then let the impl take care of it.\n        if (currentType !== self.type || self.type === \"File\" && current.nlink > 1) {\n            return rimraf(self._path, function(er) {\n                if (er) return self.error(er);\n                self._old = null;\n                create(self);\n            });\n        }\n        // otherwise, just handle in the app-specific way\n        // this creates a fs.WriteStream, or mkdir's, or whatever\n        create(self);\n    }\n};\nfunction create(self) {\n    // console.error(\"W create\", self._path, Writer.dirmode)\n    // XXX Need to clobber non-dirs that are in the way,\n    // unless { clobber: false } in the props.\n    mkdir(path.dirname(self._path), Writer.dirmode, function(er, made) {\n        // console.error(\"W created\", path.dirname(self._path), er)\n        if (er) return self.error(er);\n        // later on, we have to set the mode and owner for these\n        self._madeDir = made;\n        return self._create();\n    });\n}\nfunction endChmod(self, want, current, path, cb) {\n    var wantMode = want.mode;\n    var chmod = want.follow || self.type !== \"SymbolicLink\" ? \"chmod\" : \"lchmod\";\n    if (!fs[chmod]) return cb();\n    if (typeof wantMode !== \"number\") return cb();\n    var curMode = current.mode & parseInt(\"0777\", 8);\n    wantMode = wantMode & parseInt(\"0777\", 8);\n    if (wantMode === curMode) return cb();\n    fs[chmod](path, wantMode, cb);\n}\nfunction endChown(self, want, current, path, cb) {\n    // Don't even try it unless root.  Too easy to EPERM.\n    if (process.platform === \"win32\") return cb();\n    if (!process.getuid || process.getuid() !== 0) return cb();\n    if (typeof want.uid !== \"number\" && typeof want.gid !== \"number\") return cb();\n    if (current.uid === want.uid && current.gid === want.gid) return cb();\n    var chown = self.props.follow || self.type !== \"SymbolicLink\" ? \"chown\" : \"lchown\";\n    if (!fs[chown]) return cb();\n    if (typeof want.uid !== \"number\") want.uid = current.uid;\n    if (typeof want.gid !== \"number\") want.gid = current.gid;\n    fs[chown](path, want.uid, want.gid, cb);\n}\nfunction endUtimes(self, want, current, path, cb) {\n    if (!fs.utimes || process.platform === \"win32\") return cb();\n    var utimes = want.follow || self.type !== \"SymbolicLink\" ? \"utimes\" : \"lutimes\";\n    if (utimes === \"lutimes\" && !fs[utimes]) {\n        utimes = \"utimes\";\n    }\n    if (!fs[utimes]) return cb();\n    var curA = current.atime;\n    var curM = current.mtime;\n    var meA = want.atime;\n    var meM = want.mtime;\n    if (meA === undefined) meA = curA;\n    if (meM === undefined) meM = curM;\n    if (!isDate(meA)) meA = new Date(meA);\n    if (!isDate(meM)) meA = new Date(meM);\n    if (meA.getTime() === curA.getTime() && meM.getTime() === curM.getTime()) return cb();\n    fs[utimes](path, meA, meM, cb);\n}\n// XXX This function is beastly.  Break it up!\nWriter.prototype._finish = function() {\n    var self = this;\n    if (self._finishing) return;\n    self._finishing = true;\n    // console.error(\" W Finish\", self._path, self.size)\n    // set up all the things.\n    // At this point, we're already done writing whatever we've gotta write,\n    // adding files to the dir, etc.\n    var todo = 0;\n    var errState = null;\n    var done = false;\n    if (self._old) {\n        // the times will almost *certainly* have changed.\n        // adds the utimes syscall, but remove another stat.\n        self._old.atime = new Date(0);\n        self._old.mtime = new Date(0);\n        // console.error(\" W Finish Stale Stat\", self._path, self.size)\n        setProps(self._old);\n    } else {\n        var stat = self.props.follow ? \"stat\" : \"lstat\";\n        // console.error(\" W Finish Stating\", self._path, self.size)\n        fs[stat](self._path, function(er, current) {\n            // console.error(\" W Finish Stated\", self._path, self.size, current)\n            if (er) {\n                // if we're in the process of writing out a\n                // directory, it's very possible that the thing we're linking to\n                // doesn't exist yet (especially if it was intended as a symlink),\n                // so swallow ENOENT errors here and just soldier on.\n                if (er.code === \"ENOENT\" && (self.type === \"Link\" || self.type === \"SymbolicLink\") && process.platform === \"win32\") {\n                    self.ready = true;\n                    self.emit(\"ready\");\n                    self.emit(\"end\");\n                    self.emit(\"close\");\n                    self.end = self._finish = function() {};\n                    return;\n                } else return self.error(er);\n            }\n            setProps(self._old = current);\n        });\n    }\n    return;\n    function setProps(current) {\n        todo += 3;\n        endChmod(self, self.props, current, self._path, next(\"chmod\"));\n        endChown(self, self.props, current, self._path, next(\"chown\"));\n        endUtimes(self, self.props, current, self._path, next(\"utimes\"));\n    }\n    function next(what) {\n        return function(er) {\n            // console.error(\"   W Finish\", what, todo)\n            if (errState) return;\n            if (er) {\n                er.fstream_finish_call = what;\n                return self.error(errState = er);\n            }\n            if (--todo > 0) return;\n            if (done) return;\n            done = true;\n            // we may still need to set the mode/etc. on some parent dirs\n            // that were created previously.  delay end/close until then.\n            if (!self._madeDir) return end();\n            else endMadeDir(self, self._path, end);\n            function end(er) {\n                if (er) {\n                    er.fstream_finish_call = \"setupMadeDir\";\n                    return self.error(er);\n                }\n                // all the props have been set, so we're completely done.\n                self.emit(\"end\");\n                self.emit(\"close\");\n            }\n        };\n    }\n};\nfunction endMadeDir(self, p, cb) {\n    var made = self._madeDir;\n    // everything *between* made and path.dirname(self._path)\n    // needs to be set up.  Note that this may just be one dir.\n    var d = path.dirname(p);\n    endMadeDir_(self, d, function(er) {\n        if (er) return cb(er);\n        if (d === made) {\n            return cb();\n        }\n        endMadeDir(self, d, cb);\n    });\n}\nfunction endMadeDir_(self, p, cb) {\n    var dirProps = {};\n    Object.keys(self.props).forEach(function(k) {\n        dirProps[k] = self.props[k];\n        // only make non-readable dirs if explicitly requested.\n        if (k === \"mode\" && self.type !== \"Directory\") {\n            dirProps[k] = dirProps[k] | parseInt(\"0111\", 8);\n        }\n    });\n    var todo = 3;\n    var errState = null;\n    fs.stat(p, function(er, current) {\n        if (er) return cb(errState = er);\n        endChmod(self, dirProps, current, p, next);\n        endChown(self, dirProps, current, p, next);\n        endUtimes(self, dirProps, current, p, next);\n    });\n    function next(er) {\n        if (errState) return;\n        if (er) return cb(errState = er);\n        if (--todo === 0) return cb();\n    }\n}\nWriter.prototype.pipe = function() {\n    this.error(\"Can't pipe from writable stream\");\n};\nWriter.prototype.add = function() {\n    this.error(\"Can't add to non-Directory type\");\n};\nWriter.prototype.write = function() {\n    return true;\n};\nfunction objectToString(d) {\n    return Object.prototype.toString.call(d);\n}\nfunction isDate(d) {\n    return typeof d === \"object\" && objectToString(d) === \"[object Date]\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/lib/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fstream/node_modules/rimraf/rimraf.js":
/*!************************************************************!*\
  !*** ./node_modules/fstream/node_modules/rimraf/rimraf.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = rimraf;\nrimraf.sync = rimrafSync;\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar glob = undefined;\ntry {\n    glob = __webpack_require__(/*! glob */ \"(rsc)/./node_modules/glob/glob.js\");\n} catch (_err) {\n// treat glob as optional.\n}\nvar _0666 = parseInt(\"666\", 8);\nvar defaultGlobOpts = {\n    nosort: true,\n    silent: true\n};\n// for EMFILE handling\nvar timeout = 0;\nvar isWindows = process.platform === \"win32\";\nfunction defaults(options) {\n    var methods = [\n        \"unlink\",\n        \"chmod\",\n        \"stat\",\n        \"lstat\",\n        \"rmdir\",\n        \"readdir\"\n    ];\n    methods.forEach(function(m) {\n        options[m] = options[m] || fs[m];\n        m = m + \"Sync\";\n        options[m] = options[m] || fs[m];\n    });\n    options.maxBusyTries = options.maxBusyTries || 3;\n    options.emfileWait = options.emfileWait || 1000;\n    if (options.glob === false) {\n        options.disableGlob = true;\n    }\n    if (options.disableGlob !== true && glob === undefined) {\n        throw Error(\"glob dependency not found, set `options.disableGlob = true` if intentional\");\n    }\n    options.disableGlob = options.disableGlob || false;\n    options.glob = options.glob || defaultGlobOpts;\n}\nfunction rimraf(p, options, cb) {\n    if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n    }\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert.equal(typeof cb, \"function\", \"rimraf: callback function required\");\n    assert(options, \"rimraf: invalid options argument provided\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    defaults(options);\n    var busyTries = 0;\n    var errState = null;\n    var n = 0;\n    if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [\n        p\n    ]);\n    options.lstat(p, function(er, stat) {\n        if (!er) return afterGlob(null, [\n            p\n        ]);\n        glob(p, options.glob, afterGlob);\n    });\n    function next(er) {\n        errState = errState || er;\n        if (--n === 0) cb(errState);\n    }\n    function afterGlob(er, results) {\n        if (er) return cb(er);\n        n = results.length;\n        if (n === 0) return cb();\n        results.forEach(function(p) {\n            rimraf_(p, options, function CB(er) {\n                if (er) {\n                    if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") && busyTries < options.maxBusyTries) {\n                        busyTries++;\n                        var time = busyTries * 100;\n                        // try again, with the same exact callback as this one.\n                        return setTimeout(function() {\n                            rimraf_(p, options, CB);\n                        }, time);\n                    }\n                    // this one won't happen if graceful-fs is used.\n                    if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n                        return setTimeout(function() {\n                            rimraf_(p, options, CB);\n                        }, timeout++);\n                    }\n                    // already gone\n                    if (er.code === \"ENOENT\") er = null;\n                }\n                timeout = 0;\n                next(er);\n            });\n        });\n    }\n}\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_(p, options, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    // sunos lets the root user unlink directories, which is... weird.\n    // so we have to lstat here and make sure it's not a dir.\n    options.lstat(p, function(er, st) {\n        if (er && er.code === \"ENOENT\") return cb(null);\n        // Windows can EPERM on stat.  Life is suffering.\n        if (er && er.code === \"EPERM\" && isWindows) fixWinEPERM(p, options, er, cb);\n        if (st && st.isDirectory()) return rmdir(p, options, er, cb);\n        options.unlink(p, function(er) {\n            if (er) {\n                if (er.code === \"ENOENT\") return cb(null);\n                if (er.code === \"EPERM\") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n                if (er.code === \"EISDIR\") return rmdir(p, options, er, cb);\n            }\n            return cb(er);\n        });\n    });\n}\nfunction fixWinEPERM(p, options, er, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    if (er) assert(er instanceof Error);\n    options.chmod(p, _0666, function(er2) {\n        if (er2) cb(er2.code === \"ENOENT\" ? null : er);\n        else options.stat(p, function(er3, stats) {\n            if (er3) cb(er3.code === \"ENOENT\" ? null : er);\n            else if (stats.isDirectory()) rmdir(p, options, er, cb);\n            else options.unlink(p, cb);\n        });\n    });\n}\nfunction fixWinEPERMSync(p, options, er) {\n    assert(p);\n    assert(options);\n    if (er) assert(er instanceof Error);\n    try {\n        options.chmodSync(p, _0666);\n    } catch (er2) {\n        if (er2.code === \"ENOENT\") return;\n        else throw er;\n    }\n    try {\n        var stats = options.statSync(p);\n    } catch (er3) {\n        if (er3.code === \"ENOENT\") return;\n        else throw er;\n    }\n    if (stats.isDirectory()) rmdirSync(p, options, er);\n    else options.unlinkSync(p);\n}\nfunction rmdir(p, options, originalEr, cb) {\n    assert(p);\n    assert(options);\n    if (originalEr) assert(originalEr instanceof Error);\n    assert(typeof cb === \"function\");\n    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n    // if we guessed wrong, and it's not a directory, then\n    // raise the original error.\n    options.rmdir(p, function(er) {\n        if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")) rmkids(p, options, cb);\n        else if (er && er.code === \"ENOTDIR\") cb(originalEr);\n        else cb(er);\n    });\n}\nfunction rmkids(p, options, cb) {\n    assert(p);\n    assert(options);\n    assert(typeof cb === \"function\");\n    options.readdir(p, function(er, files) {\n        if (er) return cb(er);\n        var n = files.length;\n        if (n === 0) return options.rmdir(p, cb);\n        var errState;\n        files.forEach(function(f) {\n            rimraf(path.join(p, f), options, function(er) {\n                if (errState) return;\n                if (er) return cb(errState = er);\n                if (--n === 0) options.rmdir(p, cb);\n            });\n        });\n    });\n}\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync(p, options) {\n    options = options || {};\n    defaults(options);\n    assert(p, \"rimraf: missing path\");\n    assert.equal(typeof p, \"string\", \"rimraf: path should be a string\");\n    assert(options, \"rimraf: missing options\");\n    assert.equal(typeof options, \"object\", \"rimraf: options should be object\");\n    var results;\n    if (options.disableGlob || !glob.hasMagic(p)) {\n        results = [\n            p\n        ];\n    } else {\n        try {\n            options.lstatSync(p);\n            results = [\n                p\n            ];\n        } catch (er) {\n            results = glob.sync(p, options.glob);\n        }\n    }\n    if (!results.length) return;\n    for(var i = 0; i < results.length; i++){\n        var p = results[i];\n        try {\n            var st = options.lstatSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            // Windows can EPERM on stat.  Life is suffering.\n            if (er.code === \"EPERM\" && isWindows) fixWinEPERMSync(p, options, er);\n        }\n        try {\n            // sunos lets the root user unlink directories, which is... weird.\n            if (st && st.isDirectory()) rmdirSync(p, options, null);\n            else options.unlinkSync(p);\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            if (er.code === \"EPERM\") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n            if (er.code !== \"EISDIR\") throw er;\n            rmdirSync(p, options, er);\n        }\n    }\n}\nfunction rmdirSync(p, options, originalEr) {\n    assert(p);\n    assert(options);\n    if (originalEr) assert(originalEr instanceof Error);\n    try {\n        options.rmdirSync(p);\n    } catch (er) {\n        if (er.code === \"ENOENT\") return;\n        if (er.code === \"ENOTDIR\") throw originalEr;\n        if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\") rmkidsSync(p, options);\n    }\n}\nfunction rmkidsSync(p, options) {\n    assert(p);\n    assert(options);\n    options.readdirSync(p).forEach(function(f) {\n        rimrafSync(path.join(p, f), options);\n    });\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    var retries = isWindows ? 100 : 1;\n    var i = 0;\n    do {\n        var threw = true;\n        try {\n            var ret = options.rmdirSync(p, options);\n            threw = false;\n            return ret;\n        } finally{\n            if (++i < retries && threw) continue;\n        }\n    }while (true);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fstream/node_modules/rimraf/rimraf.js\n");

/***/ })

};
;