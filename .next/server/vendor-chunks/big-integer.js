/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/big-integer";
exports.ids = ["vendor-chunks/big-integer"];
exports.modules = {

/***/ "(rsc)/./node_modules/big-integer/BigInteger.js":
/*!************************************************!*\
  !*** ./node_modules/big-integer/BigInteger.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;var bigInt = function(undefined) {\n    \"use strict\";\n    var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var supportsNativeBigInt = typeof BigInt === \"function\";\n    function Integer(v, radix, alphabet, caseSensitive) {\n        if (typeof v === \"undefined\") return Integer[0];\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\n        return parseValue(v);\n    }\n    function BigInteger(value, sign) {\n        this.value = value;\n        this.sign = sign;\n        this.isSmall = false;\n    }\n    BigInteger.prototype = Object.create(Integer.prototype);\n    function SmallInteger(value) {\n        this.value = value;\n        this.sign = value < 0;\n        this.isSmall = true;\n    }\n    SmallInteger.prototype = Object.create(Integer.prototype);\n    function NativeBigInt(value) {\n        this.value = value;\n    }\n    NativeBigInt.prototype = Object.create(Integer.prototype);\n    function isPrecise(n) {\n        return -MAX_INT < n && n < MAX_INT;\n    }\n    function smallToArray(n) {\n        if (n < 1e7) return [\n            n\n        ];\n        if (n < 1e14) return [\n            n % 1e7,\n            Math.floor(n / 1e7)\n        ];\n        return [\n            n % 1e7,\n            Math.floor(n / 1e7) % 1e7,\n            Math.floor(n / 1e14)\n        ];\n    }\n    function arrayToSmall(arr) {\n        trim(arr);\n        var length = arr.length;\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n            switch(length){\n                case 0:\n                    return 0;\n                case 1:\n                    return arr[0];\n                case 2:\n                    return arr[0] + arr[1] * BASE;\n                default:\n                    return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n            }\n        }\n        return arr;\n    }\n    function trim(v) {\n        var i = v.length;\n        while(v[--i] === 0);\n        v.length = i + 1;\n    }\n    function createArray(length) {\n        var x = new Array(length);\n        var i = -1;\n        while(++i < length){\n            x[i] = 0;\n        }\n        return x;\n    }\n    function truncate(n) {\n        if (n > 0) return Math.floor(n);\n        return Math.ceil(n);\n    }\n    function add(a, b) {\n        var l_a = a.length, l_b = b.length, r = new Array(l_a), carry = 0, base = BASE, sum, i;\n        for(i = 0; i < l_b; i++){\n            sum = a[i] + b[i] + carry;\n            carry = sum >= base ? 1 : 0;\n            r[i] = sum - carry * base;\n        }\n        while(i < l_a){\n            sum = a[i] + carry;\n            carry = sum === base ? 1 : 0;\n            r[i++] = sum - carry * base;\n        }\n        if (carry > 0) r.push(carry);\n        return r;\n    }\n    function addAny(a, b) {\n        if (a.length >= b.length) return add(a, b);\n        return add(b, a);\n    }\n    function addSmall(a, carry) {\n        var l = a.length, r = new Array(l), base = BASE, sum, i;\n        for(i = 0; i < l; i++){\n            sum = a[i] - base + carry;\n            carry = Math.floor(sum / base);\n            r[i] = sum - carry * base;\n            carry += 1;\n        }\n        while(carry > 0){\n            r[i++] = carry % base;\n            carry = Math.floor(carry / base);\n        }\n        return r;\n    }\n    BigInteger.prototype.add = function(v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n            return this.subtract(n.negate());\n        }\n        var a = this.value, b = n.value;\n        if (n.isSmall) {\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n        }\n        return new BigInteger(addAny(a, b), this.sign);\n    };\n    BigInteger.prototype.plus = BigInteger.prototype.add;\n    SmallInteger.prototype.add = function(v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n            return this.subtract(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\n            b = smallToArray(Math.abs(b));\n        }\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n    };\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\n    NativeBigInt.prototype.add = function(v) {\n        return new NativeBigInt(this.value + parseValue(v).value);\n    };\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\n    function subtract(a, b) {\n        var a_l = a.length, b_l = b.length, r = new Array(a_l), borrow = 0, base = BASE, i, difference;\n        for(i = 0; i < b_l; i++){\n            difference = a[i] - borrow - b[i];\n            if (difference < 0) {\n                difference += base;\n                borrow = 1;\n            } else borrow = 0;\n            r[i] = difference;\n        }\n        for(i = b_l; i < a_l; i++){\n            difference = a[i] - borrow;\n            if (difference < 0) difference += base;\n            else {\n                r[i++] = difference;\n                break;\n            }\n            r[i] = difference;\n        }\n        for(; i < a_l; i++){\n            r[i] = a[i];\n        }\n        trim(r);\n        return r;\n    }\n    function subtractAny(a, b, sign) {\n        var value;\n        if (compareAbs(a, b) >= 0) {\n            value = subtract(a, b);\n        } else {\n            value = subtract(b, a);\n            sign = !sign;\n        }\n        value = arrayToSmall(value);\n        if (typeof value === \"number\") {\n            if (sign) value = -value;\n            return new SmallInteger(value);\n        }\n        return new BigInteger(value, sign);\n    }\n    function subtractSmall(a, b, sign) {\n        var l = a.length, r = new Array(l), carry = -b, base = BASE, i, difference;\n        for(i = 0; i < l; i++){\n            difference = a[i] + carry;\n            carry = Math.floor(difference / base);\n            difference %= base;\n            r[i] = difference < 0 ? difference + base : difference;\n        }\n        r = arrayToSmall(r);\n        if (typeof r === \"number\") {\n            if (sign) r = -r;\n            return new SmallInteger(r);\n        }\n        return new BigInteger(r, sign);\n    }\n    BigInteger.prototype.subtract = function(v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n            return this.add(n.negate());\n        }\n        var a = this.value, b = n.value;\n        if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n        return subtractAny(a, b, this.sign);\n    };\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\n    SmallInteger.prototype.subtract = function(v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n            return this.add(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n            return new SmallInteger(a - b);\n        }\n        return subtractSmall(b, Math.abs(a), a >= 0);\n    };\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n    NativeBigInt.prototype.subtract = function(v) {\n        return new NativeBigInt(this.value - parseValue(v).value);\n    };\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\n    BigInteger.prototype.negate = function() {\n        return new BigInteger(this.value, !this.sign);\n    };\n    SmallInteger.prototype.negate = function() {\n        var sign = this.sign;\n        var small = new SmallInteger(-this.value);\n        small.sign = !sign;\n        return small;\n    };\n    NativeBigInt.prototype.negate = function() {\n        return new NativeBigInt(-this.value);\n    };\n    BigInteger.prototype.abs = function() {\n        return new BigInteger(this.value, false);\n    };\n    SmallInteger.prototype.abs = function() {\n        return new SmallInteger(Math.abs(this.value));\n    };\n    NativeBigInt.prototype.abs = function() {\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\n    };\n    function multiplyLong(a, b) {\n        var a_l = a.length, b_l = b.length, l = a_l + b_l, r = createArray(l), base = BASE, product, carry, i, a_i, b_j;\n        for(i = 0; i < a_l; ++i){\n            a_i = a[i];\n            for(var j = 0; j < b_l; ++j){\n                b_j = b[j];\n                product = a_i * b_j + r[i + j];\n                carry = Math.floor(product / base);\n                r[i + j] = product - carry * base;\n                r[i + j + 1] += carry;\n            }\n        }\n        trim(r);\n        return r;\n    }\n    function multiplySmall(a, b) {\n        var l = a.length, r = new Array(l), base = BASE, carry = 0, product, i;\n        for(i = 0; i < l; i++){\n            product = a[i] * b + carry;\n            carry = Math.floor(product / base);\n            r[i] = product - carry * base;\n        }\n        while(carry > 0){\n            r[i++] = carry % base;\n            carry = Math.floor(carry / base);\n        }\n        return r;\n    }\n    function shiftLeft(x, n) {\n        var r = [];\n        while(n-- > 0)r.push(0);\n        return r.concat(x);\n    }\n    function multiplyKaratsuba(x, y) {\n        var n = Math.max(x.length, y.length);\n        if (n <= 30) return multiplyLong(x, y);\n        n = Math.ceil(n / 2);\n        var b = x.slice(n), a = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);\n        var ac = multiplyKaratsuba(a, c), bd = multiplyKaratsuba(b, d), abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n        trim(product);\n        return product;\n    }\n    // The following function is derived from a surface fit of a graph plotting the performance difference\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\n    function useKaratsuba(l1, l2) {\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\n    }\n    BigInteger.prototype.multiply = function(v) {\n        var n = parseValue(v), a = this.value, b = n.value, sign = this.sign !== n.sign, abs;\n        if (n.isSmall) {\n            if (b === 0) return Integer[0];\n            if (b === 1) return this;\n            if (b === -1) return this.negate();\n            abs = Math.abs(b);\n            if (abs < BASE) {\n                return new BigInteger(multiplySmall(a, abs), sign);\n            }\n            b = smallToArray(abs);\n        }\n        if (useKaratsuba(a.length, b.length)) return new BigInteger(multiplyKaratsuba(a, b), sign);\n        return new BigInteger(multiplyLong(a, b), sign);\n    };\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\n    function multiplySmallAndArray(a, b, sign) {\n        if (a < BASE) {\n            return new BigInteger(multiplySmall(b, a), sign);\n        }\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n    }\n    SmallInteger.prototype._multiplyBySmall = function(a) {\n        if (isPrecise(a.value * this.value)) {\n            return new SmallInteger(a.value * this.value);\n        }\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n    };\n    BigInteger.prototype._multiplyBySmall = function(a) {\n        if (a.value === 0) return Integer[0];\n        if (a.value === 1) return this;\n        if (a.value === -1) return this.negate();\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n    };\n    SmallInteger.prototype.multiply = function(v) {\n        return parseValue(v)._multiplyBySmall(this);\n    };\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n    NativeBigInt.prototype.multiply = function(v) {\n        return new NativeBigInt(this.value * parseValue(v).value);\n    };\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\n    function square(a) {\n        //console.assert(2 * BASE * BASE < MAX_INT);\n        var l = a.length, r = createArray(l + l), base = BASE, product, carry, i, a_i, a_j;\n        for(i = 0; i < l; i++){\n            a_i = a[i];\n            carry = 0 - a_i * a_i;\n            for(var j = i; j < l; j++){\n                a_j = a[j];\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\n                carry = Math.floor(product / base);\n                r[i + j] = product - carry * base;\n            }\n            r[i + l] = carry;\n        }\n        trim(r);\n        return r;\n    }\n    BigInteger.prototype.square = function() {\n        return new BigInteger(square(this.value), false);\n    };\n    SmallInteger.prototype.square = function() {\n        var value = this.value * this.value;\n        if (isPrecise(value)) return new SmallInteger(value);\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n    };\n    NativeBigInt.prototype.square = function(v) {\n        return new NativeBigInt(this.value * this.value);\n    };\n    function divMod1(a, b) {\n        var a_l = a.length, b_l = b.length, base = BASE, result = createArray(b.length), divisorMostSignificantDigit = b[b_l - 1], // normalization\n        lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a, lambda), divisor = multiplySmall(b, lambda), quotientDigit, shift, carry, borrow, i, l, q;\n        if (remainder.length <= a_l) remainder.push(0);\n        divisor.push(0);\n        divisorMostSignificantDigit = divisor[b_l - 1];\n        for(shift = a_l - b_l; shift >= 0; shift--){\n            quotientDigit = base - 1;\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n            }\n            // quotientDigit <= base - 1\n            carry = 0;\n            borrow = 0;\n            l = divisor.length;\n            for(i = 0; i < l; i++){\n                carry += quotientDigit * divisor[i];\n                q = Math.floor(carry / base);\n                borrow += remainder[shift + i] - (carry - q * base);\n                carry = q;\n                if (borrow < 0) {\n                    remainder[shift + i] = borrow + base;\n                    borrow = -1;\n                } else {\n                    remainder[shift + i] = borrow;\n                    borrow = 0;\n                }\n            }\n            while(borrow !== 0){\n                quotientDigit -= 1;\n                carry = 0;\n                for(i = 0; i < l; i++){\n                    carry += remainder[shift + i] - base + divisor[i];\n                    if (carry < 0) {\n                        remainder[shift + i] = carry + base;\n                        carry = 0;\n                    } else {\n                        remainder[shift + i] = carry;\n                        carry = 1;\n                    }\n                }\n                borrow += carry;\n            }\n            result[shift] = quotientDigit;\n        }\n        // denormalization\n        remainder = divModSmall(remainder, lambda)[0];\n        return [\n            arrayToSmall(result),\n            arrayToSmall(remainder)\n        ];\n    }\n    function divMod2(a, b) {\n        // Performs faster than divMod1 on larger input sizes.\n        var a_l = a.length, b_l = b.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;\n        while(a_l){\n            part.unshift(a[--a_l]);\n            trim(part);\n            if (compareAbs(part, b) < 0) {\n                result.push(0);\n                continue;\n            }\n            xlen = part.length;\n            highx = part[xlen - 1] * base + part[xlen - 2];\n            highy = b[b_l - 1] * base + b[b_l - 2];\n            if (xlen > b_l) {\n                highx = (highx + 1) * base;\n            }\n            guess = Math.ceil(highx / highy);\n            do {\n                check = multiplySmall(b, guess);\n                if (compareAbs(check, part) <= 0) break;\n                guess--;\n            }while (guess);\n            result.push(guess);\n            part = subtract(part, check);\n        }\n        result.reverse();\n        return [\n            arrayToSmall(result),\n            arrayToSmall(part)\n        ];\n    }\n    function divModSmall(value, lambda) {\n        var length = value.length, quotient = createArray(length), base = BASE, i, q, remainder, divisor;\n        remainder = 0;\n        for(i = length - 1; i >= 0; --i){\n            divisor = remainder * base + value[i];\n            q = truncate(divisor / lambda);\n            remainder = divisor - q * lambda;\n            quotient[i] = q | 0;\n        }\n        return [\n            quotient,\n            remainder | 0\n        ];\n    }\n    function divModAny(self, v) {\n        var value, n = parseValue(v);\n        if (supportsNativeBigInt) {\n            return [\n                new NativeBigInt(self.value / n.value),\n                new NativeBigInt(self.value % n.value)\n            ];\n        }\n        var a = self.value, b = n.value;\n        var quotient;\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n        if (self.isSmall) {\n            if (n.isSmall) {\n                return [\n                    new SmallInteger(truncate(a / b)),\n                    new SmallInteger(a % b)\n                ];\n            }\n            return [\n                Integer[0],\n                self\n            ];\n        }\n        if (n.isSmall) {\n            if (b === 1) return [\n                self,\n                Integer[0]\n            ];\n            if (b == -1) return [\n                self.negate(),\n                Integer[0]\n            ];\n            var abs = Math.abs(b);\n            if (abs < BASE) {\n                value = divModSmall(a, abs);\n                quotient = arrayToSmall(value[0]);\n                var remainder = value[1];\n                if (self.sign) remainder = -remainder;\n                if (typeof quotient === \"number\") {\n                    if (self.sign !== n.sign) quotient = -quotient;\n                    return [\n                        new SmallInteger(quotient),\n                        new SmallInteger(remainder)\n                    ];\n                }\n                return [\n                    new BigInteger(quotient, self.sign !== n.sign),\n                    new SmallInteger(remainder)\n                ];\n            }\n            b = smallToArray(abs);\n        }\n        var comparison = compareAbs(a, b);\n        if (comparison === -1) return [\n            Integer[0],\n            self\n        ];\n        if (comparison === 0) return [\n            Integer[self.sign === n.sign ? 1 : -1],\n            Integer[0]\n        ];\n        // divMod1 is faster on smaller input sizes\n        if (a.length + b.length <= 200) value = divMod1(a, b);\n        else value = divMod2(a, b);\n        quotient = value[0];\n        var qSign = self.sign !== n.sign, mod = value[1], mSign = self.sign;\n        if (typeof quotient === \"number\") {\n            if (qSign) quotient = -quotient;\n            quotient = new SmallInteger(quotient);\n        } else quotient = new BigInteger(quotient, qSign);\n        if (typeof mod === \"number\") {\n            if (mSign) mod = -mod;\n            mod = new SmallInteger(mod);\n        } else mod = new BigInteger(mod, mSign);\n        return [\n            quotient,\n            mod\n        ];\n    }\n    BigInteger.prototype.divmod = function(v) {\n        var result = divModAny(this, v);\n        return {\n            quotient: result[0],\n            remainder: result[1]\n        };\n    };\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n    BigInteger.prototype.divide = function(v) {\n        return divModAny(this, v)[0];\n    };\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {\n        return new NativeBigInt(this.value / parseValue(v).value);\n    };\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n    BigInteger.prototype.mod = function(v) {\n        return divModAny(this, v)[1];\n    };\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {\n        return new NativeBigInt(this.value % parseValue(v).value);\n    };\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n    BigInteger.prototype.pow = function(v) {\n        var n = parseValue(v), a = this.value, b = n.value, value, x, y;\n        if (b === 0) return Integer[1];\n        if (a === 0) return Integer[0];\n        if (a === 1) return Integer[1];\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n        if (n.sign) {\n            return Integer[0];\n        }\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n        if (this.isSmall) {\n            if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n        }\n        x = this;\n        y = Integer[1];\n        while(true){\n            if (b & 1 === 1) {\n                y = y.times(x);\n                --b;\n            }\n            if (b === 0) break;\n            b /= 2;\n            x = x.square();\n        }\n        return y;\n    };\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\n    NativeBigInt.prototype.pow = function(v) {\n        var n = parseValue(v);\n        var a = this.value, b = n.value;\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\n        if (b === _0) return Integer[1];\n        if (a === _0) return Integer[0];\n        if (a === _1) return Integer[1];\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\n        if (n.isNegative()) return new NativeBigInt(_0);\n        var x = this;\n        var y = Integer[1];\n        while(true){\n            if ((b & _1) === _1) {\n                y = y.times(x);\n                --b;\n            }\n            if (b === _0) break;\n            b /= _2;\n            x = x.square();\n        }\n        return y;\n    };\n    BigInteger.prototype.modPow = function(exp, mod) {\n        exp = parseValue(exp);\n        mod = parseValue(mod);\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n        var r = Integer[1], base = this.mod(mod);\n        if (exp.isNegative()) {\n            exp = exp.multiply(Integer[-1]);\n            base = base.modInv(mod);\n        }\n        while(exp.isPositive()){\n            if (base.isZero()) return Integer[0];\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\n            exp = exp.divide(2);\n            base = base.square().mod(mod);\n        }\n        return r;\n    };\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n    function compareAbs(a, b) {\n        if (a.length !== b.length) {\n            return a.length > b.length ? 1 : -1;\n        }\n        for(var i = a.length - 1; i >= 0; i--){\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n        }\n        return 0;\n    }\n    BigInteger.prototype.compareAbs = function(v) {\n        var n = parseValue(v), a = this.value, b = n.value;\n        if (n.isSmall) return 1;\n        return compareAbs(a, b);\n    };\n    SmallInteger.prototype.compareAbs = function(v) {\n        var n = parseValue(v), a = Math.abs(this.value), b = n.value;\n        if (n.isSmall) {\n            b = Math.abs(b);\n            return a === b ? 0 : a > b ? 1 : -1;\n        }\n        return -1;\n    };\n    NativeBigInt.prototype.compareAbs = function(v) {\n        var a = this.value;\n        var b = parseValue(v).value;\n        a = a >= 0 ? a : -a;\n        b = b >= 0 ? b : -b;\n        return a === b ? 0 : a > b ? 1 : -1;\n    };\n    BigInteger.prototype.compare = function(v) {\n        // See discussion about comparison with Infinity:\n        // https://github.com/peterolson/BigInteger.js/issues/61\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n        var n = parseValue(v), a = this.value, b = n.value;\n        if (this.sign !== n.sign) {\n            return n.sign ? 1 : -1;\n        }\n        if (n.isSmall) {\n            return this.sign ? -1 : 1;\n        }\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\n    };\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n    SmallInteger.prototype.compare = function(v) {\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n        var n = parseValue(v), a = this.value, b = n.value;\n        if (n.isSmall) {\n            return a == b ? 0 : a > b ? 1 : -1;\n        }\n        if (a < 0 !== n.sign) {\n            return a < 0 ? -1 : 1;\n        }\n        return a < 0 ? 1 : -1;\n    };\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n    NativeBigInt.prototype.compare = function(v) {\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n        var a = this.value;\n        var b = parseValue(v).value;\n        return a === b ? 0 : a > b ? 1 : -1;\n    };\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\n    BigInteger.prototype.equals = function(v) {\n        return this.compare(v) === 0;\n    };\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n    BigInteger.prototype.notEquals = function(v) {\n        return this.compare(v) !== 0;\n    };\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n    BigInteger.prototype.greater = function(v) {\n        return this.compare(v) > 0;\n    };\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n    BigInteger.prototype.lesser = function(v) {\n        return this.compare(v) < 0;\n    };\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n    BigInteger.prototype.greaterOrEquals = function(v) {\n        return this.compare(v) >= 0;\n    };\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n    BigInteger.prototype.lesserOrEquals = function(v) {\n        return this.compare(v) <= 0;\n    };\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n    BigInteger.prototype.isEven = function() {\n        return (this.value[0] & 1) === 0;\n    };\n    SmallInteger.prototype.isEven = function() {\n        return (this.value & 1) === 0;\n    };\n    NativeBigInt.prototype.isEven = function() {\n        return (this.value & BigInt(1)) === BigInt(0);\n    };\n    BigInteger.prototype.isOdd = function() {\n        return (this.value[0] & 1) === 1;\n    };\n    SmallInteger.prototype.isOdd = function() {\n        return (this.value & 1) === 1;\n    };\n    NativeBigInt.prototype.isOdd = function() {\n        return (this.value & BigInt(1)) === BigInt(1);\n    };\n    BigInteger.prototype.isPositive = function() {\n        return !this.sign;\n    };\n    SmallInteger.prototype.isPositive = function() {\n        return this.value > 0;\n    };\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\n    BigInteger.prototype.isNegative = function() {\n        return this.sign;\n    };\n    SmallInteger.prototype.isNegative = function() {\n        return this.value < 0;\n    };\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\n    BigInteger.prototype.isUnit = function() {\n        return false;\n    };\n    SmallInteger.prototype.isUnit = function() {\n        return Math.abs(this.value) === 1;\n    };\n    NativeBigInt.prototype.isUnit = function() {\n        return this.abs().value === BigInt(1);\n    };\n    BigInteger.prototype.isZero = function() {\n        return false;\n    };\n    SmallInteger.prototype.isZero = function() {\n        return this.value === 0;\n    };\n    NativeBigInt.prototype.isZero = function() {\n        return this.value === BigInt(0);\n    };\n    BigInteger.prototype.isDivisibleBy = function(v) {\n        var n = parseValue(v);\n        if (n.isZero()) return false;\n        if (n.isUnit()) return true;\n        if (n.compareAbs(2) === 0) return this.isEven();\n        return this.mod(n).isZero();\n    };\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n    function isBasicPrime(v) {\n        var n = v.abs();\n        if (n.isUnit()) return false;\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n        if (n.lesser(49)) return true;\n    // we don't know if it's prime: let the other functions figure it out\n    }\n    function millerRabinTest(n, a) {\n        var nPrev = n.prev(), b = nPrev, r = 0, d, t, i, x;\n        while(b.isEven())b = b.divide(2), r++;\n        next: for(i = 0; i < a.length; i++){\n            if (n.lesser(a[i])) continue;\n            x = bigInt(a[i]).modPow(b, n);\n            if (x.isUnit() || x.equals(nPrev)) continue;\n            for(d = r - 1; d != 0; d--){\n                x = x.square().mod(n);\n                if (x.isUnit()) return false;\n                if (x.equals(nPrev)) continue next;\n            }\n            return false;\n        }\n        return true;\n    }\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\n    BigInteger.prototype.isPrime = function(strict) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var bits = n.bitLength();\n        if (bits <= 64) return millerRabinTest(n, [\n            2,\n            3,\n            5,\n            7,\n            11,\n            13,\n            17,\n            19,\n            23,\n            29,\n            31,\n            37\n        ]);\n        var logN = Math.log(2) * bits.toJSNumber();\n        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n        for(var a = [], i = 0; i < t; i++){\n            a.push(bigInt(i + 2));\n        }\n        return millerRabinTest(n, a);\n    };\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n    BigInteger.prototype.isProbablePrime = function(iterations, rng) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var t = iterations === undefined ? 5 : iterations;\n        for(var a = [], i = 0; i < t; i++){\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\n        }\n        return millerRabinTest(n, a);\n    };\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n    BigInteger.prototype.modInv = function(n) {\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\n        while(!newR.isZero()){\n            q = r.divide(newR);\n            lastT = t;\n            lastR = r;\n            t = newT;\n            r = newR;\n            newT = lastT.subtract(q.multiply(newT));\n            newR = lastR.subtract(q.multiply(newR));\n        }\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n        if (t.compare(0) === -1) {\n            t = t.add(n);\n        }\n        if (this.isNegative()) {\n            return t.negate();\n        }\n        return t;\n    };\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n    BigInteger.prototype.next = function() {\n        var value = this.value;\n        if (this.sign) {\n            return subtractSmall(value, 1, this.sign);\n        }\n        return new BigInteger(addSmall(value, 1), this.sign);\n    };\n    SmallInteger.prototype.next = function() {\n        var value = this.value;\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n        return new BigInteger(MAX_INT_ARR, false);\n    };\n    NativeBigInt.prototype.next = function() {\n        return new NativeBigInt(this.value + BigInt(1));\n    };\n    BigInteger.prototype.prev = function() {\n        var value = this.value;\n        if (this.sign) {\n            return new BigInteger(addSmall(value, 1), true);\n        }\n        return subtractSmall(value, 1, this.sign);\n    };\n    SmallInteger.prototype.prev = function() {\n        var value = this.value;\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n        return new BigInteger(MAX_INT_ARR, true);\n    };\n    NativeBigInt.prototype.prev = function() {\n        return new NativeBigInt(this.value - BigInt(1));\n    };\n    var powersOfTwo = [\n        1\n    ];\n    while(2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\n    function shift_isSmall(n) {\n        return Math.abs(n) <= BASE;\n    }\n    BigInteger.prototype.shiftLeft = function(v) {\n        var n = parseValue(v).toJSNumber();\n        if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        if (n < 0) return this.shiftRight(-n);\n        var result = this;\n        if (result.isZero()) return result;\n        while(n >= powers2Length){\n            result = result.multiply(highestPower2);\n            n -= powers2Length - 1;\n        }\n        return result.multiply(powersOfTwo[n]);\n    };\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n    BigInteger.prototype.shiftRight = function(v) {\n        var remQuo;\n        var n = parseValue(v).toJSNumber();\n        if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        if (n < 0) return this.shiftLeft(-n);\n        var result = this;\n        while(n >= powers2Length){\n            if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n            remQuo = divModAny(result, highestPower2);\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n            n -= powers2Length - 1;\n        }\n        remQuo = divModAny(result, powersOfTwo[n]);\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n    };\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n    function bitwise(x, y, fn) {\n        y = parseValue(y);\n        var xSign = x.isNegative(), ySign = y.isNegative();\n        var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;\n        var xDigit = 0, yDigit = 0;\n        var xDivMod = null, yDivMod = null;\n        var result = [];\n        while(!xRem.isZero() || !yRem.isZero()){\n            xDivMod = divModAny(xRem, highestPower2);\n            xDigit = xDivMod[1].toJSNumber();\n            if (xSign) {\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\n            }\n            yDivMod = divModAny(yRem, highestPower2);\n            yDigit = yDivMod[1].toJSNumber();\n            if (ySign) {\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\n            }\n            xRem = xDivMod[0];\n            yRem = yDivMod[0];\n            result.push(fn(xDigit, yDigit));\n        }\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n        for(var i = result.length - 1; i >= 0; i -= 1){\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n        }\n        return sum;\n    }\n    BigInteger.prototype.not = function() {\n        return this.negate().prev();\n    };\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\n    BigInteger.prototype.and = function(n) {\n        return bitwise(this, n, function(a, b) {\n            return a & b;\n        });\n    };\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\n    BigInteger.prototype.or = function(n) {\n        return bitwise(this, n, function(a, b) {\n            return a | b;\n        });\n    };\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\n    BigInteger.prototype.xor = function(n) {\n        return bitwise(this, n, function(a, b) {\n            return a ^ b;\n        });\n    };\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n    function roughLOB(n) {\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\n        var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;\n        return x & -x;\n    }\n    function integerLogarithm(value, base) {\n        if (base.compareTo(value) <= 0) {\n            var tmp = integerLogarithm(value, base.square(base));\n            var p = tmp.p;\n            var e = tmp.e;\n            var t = p.multiply(base);\n            return t.compareTo(value) <= 0 ? {\n                p: t,\n                e: e * 2 + 1\n            } : {\n                p: p,\n                e: e * 2\n            };\n        }\n        return {\n            p: bigInt(1),\n            e: 0\n        };\n    }\n    BigInteger.prototype.bitLength = function() {\n        var n = this;\n        if (n.compareTo(bigInt(0)) < 0) {\n            n = n.negate().subtract(bigInt(1));\n        }\n        if (n.compareTo(bigInt(0)) === 0) {\n            return bigInt(0);\n        }\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n    };\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n    function max(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.greater(b) ? a : b;\n    }\n    function min(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.lesser(b) ? a : b;\n    }\n    function gcd(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        if (a.equals(b)) return a;\n        if (a.isZero()) return b;\n        if (b.isZero()) return a;\n        var c = Integer[1], d, t;\n        while(a.isEven() && b.isEven()){\n            d = min(roughLOB(a), roughLOB(b));\n            a = a.divide(d);\n            b = b.divide(d);\n            c = c.multiply(d);\n        }\n        while(a.isEven()){\n            a = a.divide(roughLOB(a));\n        }\n        do {\n            while(b.isEven()){\n                b = b.divide(roughLOB(b));\n            }\n            if (a.greater(b)) {\n                t = b;\n                b = a;\n                a = t;\n            }\n            b = b.subtract(a);\n        }while (!b.isZero());\n        return c.isUnit() ? a : a.multiply(c);\n    }\n    function lcm(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        return a.divide(gcd(a, b)).multiply(b);\n    }\n    function randBetween(a, b, rng) {\n        a = parseValue(a);\n        b = parseValue(b);\n        var usedRNG = rng || Math.random;\n        var low = min(a, b), high = max(a, b);\n        var range = high.subtract(low).add(1);\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\n        var digits = toBase(range, BASE).value;\n        var result = [], restricted = true;\n        for(var i = 0; i < digits.length; i++){\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\n            var digit = truncate(usedRNG() * top);\n            result.push(digit);\n            if (digit < digits[i]) restricted = false;\n        }\n        return low.add(Integer.fromArray(result, BASE, false));\n    }\n    var parseBase = function(text, base, alphabet, caseSensitive) {\n        alphabet = alphabet || DEFAULT_ALPHABET;\n        text = String(text);\n        if (!caseSensitive) {\n            text = text.toLowerCase();\n            alphabet = alphabet.toLowerCase();\n        }\n        var length = text.length;\n        var i;\n        var absBase = Math.abs(base);\n        var alphabetValues = {};\n        for(i = 0; i < alphabet.length; i++){\n            alphabetValues[alphabet[i]] = i;\n        }\n        for(i = 0; i < length; i++){\n            var c = text[i];\n            if (c === \"-\") continue;\n            if (c in alphabetValues) {\n                if (alphabetValues[c] >= absBase) {\n                    if (c === \"1\" && absBase === 1) continue;\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n                }\n            }\n        }\n        base = parseValue(base);\n        var digits = [];\n        var isNegative = text[0] === \"-\";\n        for(i = isNegative ? 1 : 0; i < text.length; i++){\n            var c = text[i];\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\n            else if (c === \"<\") {\n                var start = i;\n                do {\n                    i++;\n                }while (text[i] !== \">\" && i < text.length);\n                digits.push(parseValue(text.slice(start + 1, i)));\n            } else throw new Error(c + \" is not a valid character\");\n        }\n        return parseBaseFromArray(digits, base, isNegative);\n    };\n    function parseBaseFromArray(digits, base, isNegative) {\n        var val = Integer[0], pow = Integer[1], i;\n        for(i = digits.length - 1; i >= 0; i--){\n            val = val.add(digits[i].times(pow));\n            pow = pow.times(base);\n        }\n        return isNegative ? val.negate() : val;\n    }\n    function stringify(digit, alphabet) {\n        alphabet = alphabet || DEFAULT_ALPHABET;\n        if (digit < alphabet.length) {\n            return alphabet[digit];\n        }\n        return \"<\" + digit + \">\";\n    }\n    function toBase(n, base) {\n        base = bigInt(base);\n        if (base.isZero()) {\n            if (n.isZero()) return {\n                value: [\n                    0\n                ],\n                isNegative: false\n            };\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n        }\n        if (base.equals(-1)) {\n            if (n.isZero()) return {\n                value: [\n                    0\n                ],\n                isNegative: false\n            };\n            if (n.isNegative()) return {\n                value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [\n                    1,\n                    0\n                ])),\n                isNegative: false\n            };\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [\n                0,\n                1\n            ]);\n            arr.unshift([\n                1\n            ]);\n            return {\n                value: [].concat.apply([], arr),\n                isNegative: false\n            };\n        }\n        var neg = false;\n        if (n.isNegative() && base.isPositive()) {\n            neg = true;\n            n = n.abs();\n        }\n        if (base.isUnit()) {\n            if (n.isZero()) return {\n                value: [\n                    0\n                ],\n                isNegative: false\n            };\n            return {\n                value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),\n                isNegative: neg\n            };\n        }\n        var out = [];\n        var left = n, divmod;\n        while(left.isNegative() || left.compareAbs(base) >= 0){\n            divmod = left.divmod(base);\n            left = divmod.quotient;\n            var digit = divmod.remainder;\n            if (digit.isNegative()) {\n                digit = base.minus(digit).abs();\n                left = left.next();\n            }\n            out.push(digit.toJSNumber());\n        }\n        out.push(left.toJSNumber());\n        return {\n            value: out.reverse(),\n            isNegative: neg\n        };\n    }\n    function toBaseString(n, base, alphabet) {\n        var arr = toBase(n, base);\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function(x) {\n            return stringify(x, alphabet);\n        }).join(\"\");\n    }\n    BigInteger.prototype.toArray = function(radix) {\n        return toBase(this, radix);\n    };\n    SmallInteger.prototype.toArray = function(radix) {\n        return toBase(this, radix);\n    };\n    NativeBigInt.prototype.toArray = function(radix) {\n        return toBase(this, radix);\n    };\n    BigInteger.prototype.toString = function(radix, alphabet) {\n        if (radix === undefined) radix = 10;\n        if (radix !== 10 || alphabet) return toBaseString(this, radix, alphabet);\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\n        while(--l >= 0){\n            digit = String(v[l]);\n            str += zeros.slice(digit.length) + digit;\n        }\n        var sign = this.sign ? \"-\" : \"\";\n        return sign + str;\n    };\n    SmallInteger.prototype.toString = function(radix, alphabet) {\n        if (radix === undefined) radix = 10;\n        if (radix != 10 || alphabet) return toBaseString(this, radix, alphabet);\n        return String(this.value);\n    };\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {\n        return this.toString();\n    };\n    BigInteger.prototype.valueOf = function() {\n        return parseInt(this.toString(), 10);\n    };\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n    SmallInteger.prototype.valueOf = function() {\n        return this.value;\n    };\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {\n        return parseInt(this.toString(), 10);\n    };\n    function parseStringValue(v) {\n        if (isPrecise(+v)) {\n            var x = +v;\n            if (x === truncate(x)) return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\n            throw new Error(\"Invalid integer: \" + v);\n        }\n        var sign = v[0] === \"-\";\n        if (sign) v = v.slice(1);\n        var split = v.split(/e/i);\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n        if (split.length === 2) {\n            var exp = split[1];\n            if (exp[0] === \"+\") exp = exp.slice(1);\n            exp = +exp;\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n            var text = split[0];\n            var decimalPlace = text.indexOf(\".\");\n            if (decimalPlace >= 0) {\n                exp -= text.length - decimalPlace - 1;\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n            }\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n            text += new Array(exp + 1).join(\"0\");\n            v = text;\n        }\n        var isValid = /^([0-9][0-9]*)$/.test(v);\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\n        if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\n        }\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\n        while(max > 0){\n            r.push(+v.slice(min, max));\n            min -= l;\n            if (min < 0) min = 0;\n            max -= l;\n        }\n        trim(r);\n        return new BigInteger(r, sign);\n    }\n    function parseNumberValue(v) {\n        if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(v));\n        }\n        if (isPrecise(v)) {\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n            return new SmallInteger(v);\n        }\n        return parseStringValue(v.toString());\n    }\n    function parseValue(v) {\n        if (typeof v === \"number\") {\n            return parseNumberValue(v);\n        }\n        if (typeof v === \"string\") {\n            return parseStringValue(v);\n        }\n        if (typeof v === \"bigint\") {\n            return new NativeBigInt(v);\n        }\n        return v;\n    }\n    // Pre-define numbers in range [-999,999]\n    for(var i = 0; i < 1000; i++){\n        Integer[i] = parseValue(i);\n        if (i > 0) Integer[-i] = parseValue(-i);\n    }\n    // Backwards compatibility\n    Integer.one = Integer[1];\n    Integer.zero = Integer[0];\n    Integer.minusOne = Integer[-1];\n    Integer.max = max;\n    Integer.min = min;\n    Integer.gcd = gcd;\n    Integer.lcm = lcm;\n    Integer.isInstance = function(x) {\n        return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;\n    };\n    Integer.randBetween = randBetween;\n    Integer.fromArray = function(digits, base, isNegative) {\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n    };\n    return Integer;\n}();\n// Node.js check\nif ( true && module.hasOwnProperty(\"exports\")) {\n    module.exports = bigInt;\n}\n//amd check\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return bigInt;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/big-integer/BigInteger.js\n");

/***/ })

};
;