/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minimatch";
exports.ids = ["vendor-chunks/minimatch"];
exports.modules = {

/***/ "(rsc)/./node_modules/minimatch/minimatch.js":
/*!*********************************************!*\
  !*** ./node_modules/minimatch/minimatch.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = minimatch;\nminimatch.Minimatch = Minimatch;\nvar path = function() {\n    try {\n        return __webpack_require__(/*! path */ \"path\");\n    } catch (e) {}\n}() || {\n    sep: \"/\"\n};\nminimatch.sep = path.sep;\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};\nvar expand = __webpack_require__(/*! brace-expansion */ \"(rsc)/./node_modules/brace-expansion/index.js\");\nvar plTypes = {\n    \"!\": {\n        open: \"(?:(?!(?:\",\n        close: \"))[^/]*?)\"\n    },\n    \"?\": {\n        open: \"(?:\",\n        close: \")?\"\n    },\n    \"+\": {\n        open: \"(?:\",\n        close: \")+\"\n    },\n    \"*\": {\n        open: \"(?:\",\n        close: \")*\"\n    },\n    \"@\": {\n        open: \"(?:\",\n        close: \")\"\n    }\n};\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = \"[^/]\";\n// * => any number of characters\nvar star = qmark + \"*?\";\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = \"(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?\";\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = \"(?:(?!(?:\\\\/|^)\\\\.).)*?\";\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet(\"().*{}+?[]^$\\\\!\");\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet(s) {\n    return s.split(\"\").reduce(function(set, c) {\n        set[c] = true;\n        return set;\n    }, {});\n}\n// normalizes slashes.\nvar slashSplit = /\\/+/;\nminimatch.filter = filter;\nfunction filter(pattern, options) {\n    options = options || {};\n    return function(p, i, list) {\n        return minimatch(p, pattern, options);\n    };\n}\nfunction ext(a, b) {\n    b = b || {};\n    var t = {};\n    Object.keys(a).forEach(function(k) {\n        t[k] = a[k];\n    });\n    Object.keys(b).forEach(function(k) {\n        t[k] = b[k];\n    });\n    return t;\n}\nminimatch.defaults = function(def) {\n    if (!def || typeof def !== \"object\" || !Object.keys(def).length) {\n        return minimatch;\n    }\n    var orig = minimatch;\n    var m = function minimatch(p, pattern, options) {\n        return orig(p, pattern, ext(def, options));\n    };\n    m.Minimatch = function Minimatch(pattern, options) {\n        return new orig.Minimatch(pattern, ext(def, options));\n    };\n    m.Minimatch.defaults = function defaults(options) {\n        return orig.defaults(ext(def, options)).Minimatch;\n    };\n    m.filter = function filter(pattern, options) {\n        return orig.filter(pattern, ext(def, options));\n    };\n    m.defaults = function defaults(options) {\n        return orig.defaults(ext(def, options));\n    };\n    m.makeRe = function makeRe(pattern, options) {\n        return orig.makeRe(pattern, ext(def, options));\n    };\n    m.braceExpand = function braceExpand(pattern, options) {\n        return orig.braceExpand(pattern, ext(def, options));\n    };\n    m.match = function(list, pattern, options) {\n        return orig.match(list, pattern, ext(def, options));\n    };\n    return m;\n};\nMinimatch.defaults = function(def) {\n    return minimatch.defaults(def).Minimatch;\n};\nfunction minimatch(p, pattern, options) {\n    assertValidPattern(pattern);\n    if (!options) options = {};\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === \"#\") {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n}\nfunction Minimatch(pattern, options) {\n    if (!(this instanceof Minimatch)) {\n        return new Minimatch(pattern, options);\n    }\n    assertValidPattern(pattern);\n    if (!options) options = {};\n    pattern = pattern.trim();\n    // windows support: need to use /, not \\\n    if (!options.allowWindowsEscape && path.sep !== \"/\") {\n        pattern = pattern.split(path.sep).join(\"/\");\n    }\n    this.options = options;\n    this.set = [];\n    this.pattern = pattern;\n    this.regexp = null;\n    this.negate = false;\n    this.comment = false;\n    this.empty = false;\n    this.partial = !!options.partial;\n    // make the set of regexps etc.\n    this.make();\n}\nMinimatch.prototype.debug = function() {};\nMinimatch.prototype.make = make;\nfunction make() {\n    var pattern = this.pattern;\n    var options = this.options;\n    // empty patterns and comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === \"#\") {\n        this.comment = true;\n        return;\n    }\n    if (!pattern) {\n        this.empty = true;\n        return;\n    }\n    // step 1: figure out negation, etc.\n    this.parseNegate();\n    // step 2: expand braces\n    var set = this.globSet = this.braceExpand();\n    if (options.debug) this.debug = function debug() {\n        console.error.apply(console, arguments);\n    };\n    this.debug(this.pattern, set);\n    // step 3: now we have a set, so turn each one into a series of path-portion\n    // matching patterns.\n    // These will be regexps, except in the case of \"**\", which is\n    // set to the GLOBSTAR object for globstar behavior,\n    // and will not contain any / characters\n    set = this.globParts = set.map(function(s) {\n        return s.split(slashSplit);\n    });\n    this.debug(this.pattern, set);\n    // glob --> regexps\n    set = set.map(function(s, si, set) {\n        return s.map(this.parse, this);\n    }, this);\n    this.debug(this.pattern, set);\n    // filter out everything that didn't compile properly.\n    set = set.filter(function(s) {\n        return s.indexOf(false) === -1;\n    });\n    this.debug(this.pattern, set);\n    this.set = set;\n}\nMinimatch.prototype.parseNegate = parseNegate;\nfunction parseNegate() {\n    var pattern = this.pattern;\n    var negate = false;\n    var options = this.options;\n    var negateOffset = 0;\n    if (options.nonegate) return;\n    for(var i = 0, l = pattern.length; i < l && pattern.charAt(i) === \"!\"; i++){\n        negate = !negate;\n        negateOffset++;\n    }\n    if (negateOffset) this.pattern = pattern.substr(negateOffset);\n    this.negate = negate;\n}\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function(pattern, options) {\n    return braceExpand(pattern, options);\n};\nMinimatch.prototype.braceExpand = braceExpand;\nfunction braceExpand(pattern, options) {\n    if (!options) {\n        if (this instanceof Minimatch) {\n            options = this.options;\n        } else {\n            options = {};\n        }\n    }\n    pattern = typeof pattern === \"undefined\" ? this.pattern : pattern;\n    assertValidPattern(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [\n            pattern\n        ];\n    }\n    return expand(pattern);\n}\nvar MAX_PATTERN_LENGTH = 1024 * 64;\nvar assertValidPattern = function(pattern) {\n    if (typeof pattern !== \"string\") {\n        throw new TypeError(\"invalid pattern\");\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError(\"pattern is too long\");\n    }\n};\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse;\nvar SUBPARSE = {};\nfunction parse(pattern, isSub) {\n    assertValidPattern(pattern);\n    var options = this.options;\n    // shortcuts\n    if (pattern === \"**\") {\n        if (!options.noglobstar) return GLOBSTAR;\n        else pattern = \"*\";\n    }\n    if (pattern === \"\") return \"\";\n    var re = \"\";\n    var hasMagic = !!options.nocase;\n    var escaping = false;\n    // ? => one single character\n    var patternListStack = [];\n    var negativeLists = [];\n    var stateChar;\n    var inClass = false;\n    var reClassStart = -1;\n    var classStart = -1;\n    // . and .. never match anything that doesn't start with .,\n    // even when options.dot is set.\n    var patternStart = pattern.charAt(0) === \".\" ? \"\" // anything\n     : options.dot ? \"(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))\" : \"(?!\\\\.)\";\n    var self = this;\n    function clearStateChar() {\n        if (stateChar) {\n            // we had some state-tracking character\n            // that wasn't consumed by this pass.\n            switch(stateChar){\n                case \"*\":\n                    re += star;\n                    hasMagic = true;\n                    break;\n                case \"?\":\n                    re += qmark;\n                    hasMagic = true;\n                    break;\n                default:\n                    re += \"\\\\\" + stateChar;\n                    break;\n            }\n            self.debug(\"clearStateChar %j %j\", stateChar, re);\n            stateChar = false;\n        }\n    }\n    for(var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++){\n        this.debug(\"%s\t%s %s %j\", pattern, i, re, c);\n        // skip over any that are escaped.\n        if (escaping && reSpecials[c]) {\n            re += \"\\\\\" + c;\n            escaping = false;\n            continue;\n        }\n        switch(c){\n            /* istanbul ignore next */ case \"/\":\n                {\n                    // completely not allowed, even escaped.\n                    // Should already be path-split by now.\n                    return false;\n                }\n            case \"\\\\\":\n                clearStateChar();\n                escaping = true;\n                continue;\n            // the various stateChar values\n            // for the \"extglob\" stuff.\n            case \"?\":\n            case \"*\":\n            case \"+\":\n            case \"@\":\n            case \"!\":\n                this.debug(\"%s\t%s %s %j <-- stateChar\", pattern, i, re, c);\n                // all of those are literals inside a class, except that\n                // the glob [!a] means [^a] in regexp\n                if (inClass) {\n                    this.debug(\"  in class\");\n                    if (c === \"!\" && i === classStart + 1) c = \"^\";\n                    re += c;\n                    continue;\n                }\n                // if we already have a stateChar, then it means\n                // that there was something like ** or +? in there.\n                // Handle the stateChar, then proceed with this one.\n                self.debug(\"call clearStateChar %j\", stateChar);\n                clearStateChar();\n                stateChar = c;\n                // if extglob is disabled, then +(asdf|foo) isn't a thing.\n                // just clear the statechar *now*, rather than even diving into\n                // the patternList stuff.\n                if (options.noext) clearStateChar();\n                continue;\n            case \"(\":\n                if (inClass) {\n                    re += \"(\";\n                    continue;\n                }\n                if (!stateChar) {\n                    re += \"\\\\(\";\n                    continue;\n                }\n                patternListStack.push({\n                    type: stateChar,\n                    start: i - 1,\n                    reStart: re.length,\n                    open: plTypes[stateChar].open,\n                    close: plTypes[stateChar].close\n                });\n                // negation is (?:(?!js)[^/]*)\n                re += stateChar === \"!\" ? \"(?:(?!(?:\" : \"(?:\";\n                this.debug(\"plType %j %j\", stateChar, re);\n                stateChar = false;\n                continue;\n            case \")\":\n                if (inClass || !patternListStack.length) {\n                    re += \"\\\\)\";\n                    continue;\n                }\n                clearStateChar();\n                hasMagic = true;\n                var pl = patternListStack.pop();\n                // negation is (?:(?!js)[^/]*)\n                // The others are (?:<pattern>)<type>\n                re += pl.close;\n                if (pl.type === \"!\") {\n                    negativeLists.push(pl);\n                }\n                pl.reEnd = re.length;\n                continue;\n            case \"|\":\n                if (inClass || !patternListStack.length || escaping) {\n                    re += \"\\\\|\";\n                    escaping = false;\n                    continue;\n                }\n                clearStateChar();\n                re += \"|\";\n                continue;\n            // these are mostly the same in regexp and glob\n            case \"[\":\n                // swallow any state-tracking char before the [\n                clearStateChar();\n                if (inClass) {\n                    re += \"\\\\\" + c;\n                    continue;\n                }\n                inClass = true;\n                classStart = i;\n                reClassStart = re.length;\n                re += c;\n                continue;\n            case \"]\":\n                //  a right bracket shall lose its special\n                //  meaning and represent itself in\n                //  a bracket expression if it occurs\n                //  first in the list.  -- POSIX.2 2.8.3.2\n                if (i === classStart + 1 || !inClass) {\n                    re += \"\\\\\" + c;\n                    escaping = false;\n                    continue;\n                }\n                // handle the case where we left a class open.\n                // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n                // split where the last [ was, make sure we don't have\n                // an invalid re. if so, re-walk the contents of the\n                // would-be class to re-translate any characters that\n                // were passed through as-is\n                // TODO: It would probably be faster to determine this\n                // without a try/catch and a new RegExp, but it's tricky\n                // to do safely.  For now, this is safe and works.\n                var cs = pattern.substring(classStart + 1, i);\n                try {\n                    RegExp(\"[\" + cs + \"]\");\n                } catch (er) {\n                    // not a valid class!\n                    var sp = this.parse(cs, SUBPARSE);\n                    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0] + \"\\\\]\";\n                    hasMagic = hasMagic || sp[1];\n                    inClass = false;\n                    continue;\n                }\n                // finish up the class.\n                hasMagic = true;\n                inClass = false;\n                re += c;\n                continue;\n            default:\n                // swallow any state char that wasn't consumed\n                clearStateChar();\n                if (escaping) {\n                    // no need\n                    escaping = false;\n                } else if (reSpecials[c] && !(c === \"^\" && inClass)) {\n                    re += \"\\\\\";\n                }\n                re += c;\n        } // switch\n    } // for\n    // handle the case where we left a class open.\n    // \"[abc\" is valid, equivalent to \"\\[abc\"\n    if (inClass) {\n        // split where the last [ was, and escape it\n        // this is a huge pita.  We now have to re-walk\n        // the contents of the would-be class to re-translate\n        // any characters that were passed through as-is\n        cs = pattern.substr(classStart + 1);\n        sp = this.parse(cs, SUBPARSE);\n        re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0];\n        hasMagic = hasMagic || sp[1];\n    }\n    // handle the case where we had a +( thing at the *end*\n    // of the pattern.\n    // each pattern list stack adds 3 chars, and we need to go through\n    // and escape any | chars that were passed through as-is for the regexp.\n    // Go through and escape them, taking care not to double-escape any\n    // | chars that were already escaped.\n    for(pl = patternListStack.pop(); pl; pl = patternListStack.pop()){\n        var tail = re.slice(pl.reStart + pl.open.length);\n        this.debug(\"setting tail\", re, pl);\n        // maybe some even number of \\, then maybe 1 \\, followed by a |\n        tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function(_, $1, $2) {\n            if (!$2) {\n                // the | isn't already escaped, so escape it.\n                $2 = \"\\\\\";\n            }\n            // need to escape all those slashes *again*, without escaping the\n            // one that we need for escaping the | character.  As it works out,\n            // escaping an even number of slashes can be done by simply repeating\n            // it exactly after itself.  That's why this trick works.\n            //\n            // I am sorry that you have to see this.\n            return $1 + $1 + $2 + \"|\";\n        });\n        this.debug(\"tail=%j\\n   %s\", tail, tail, pl, re);\n        var t = pl.type === \"*\" ? star : pl.type === \"?\" ? qmark : \"\\\\\" + pl.type;\n        hasMagic = true;\n        re = re.slice(0, pl.reStart) + t + \"\\\\(\" + tail;\n    }\n    // handle trailing things that only matter at the very end.\n    clearStateChar();\n    if (escaping) {\n        // trailing \\\\\n        re += \"\\\\\\\\\";\n    }\n    // only need to apply the nodot start if the re starts with\n    // something that could conceivably capture a dot\n    var addPatternStart = false;\n    switch(re.charAt(0)){\n        case \"[\":\n        case \".\":\n        case \"(\":\n            addPatternStart = true;\n    }\n    // Hack to work around lack of negative lookbehind in JS\n    // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n    // like 'a.xyz.yz' doesn't match.  So, the first negative\n    // lookahead, has to look ALL the way ahead, to the end of\n    // the pattern.\n    for(var n = negativeLists.length - 1; n > -1; n--){\n        var nl = negativeLists[n];\n        var nlBefore = re.slice(0, nl.reStart);\n        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);\n        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);\n        var nlAfter = re.slice(nl.reEnd);\n        nlLast += nlAfter;\n        // Handle nested stuff like *(*.js|!(*.json)), where open parens\n        // mean that we should *not* include the ) in the bit that is considered\n        // \"after\" the negated section.\n        var openParensBefore = nlBefore.split(\"(\").length - 1;\n        var cleanAfter = nlAfter;\n        for(i = 0; i < openParensBefore; i++){\n            cleanAfter = cleanAfter.replace(/\\)[+*?]?/, \"\");\n        }\n        nlAfter = cleanAfter;\n        var dollar = \"\";\n        if (nlAfter === \"\" && isSub !== SUBPARSE) {\n            dollar = \"$\";\n        }\n        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;\n        re = newRe;\n    }\n    // if the re is not \"\" at this point, then we need to make sure\n    // it doesn't match against an empty path part.\n    // Otherwise a/* will match a/, which it should not.\n    if (re !== \"\" && hasMagic) {\n        re = \"(?=.)\" + re;\n    }\n    if (addPatternStart) {\n        re = patternStart + re;\n    }\n    // parsing just a piece of a larger pattern.\n    if (isSub === SUBPARSE) {\n        return [\n            re,\n            hasMagic\n        ];\n    }\n    // skip the regexp for non-magical patterns\n    // unescape anything in it, though, so that it'll be\n    // an exact match against a file etc.\n    if (!hasMagic) {\n        return globUnescape(pattern);\n    }\n    var flags = options.nocase ? \"i\" : \"\";\n    try {\n        var regExp = new RegExp(\"^\" + re + \"$\", flags);\n    } catch (er) /* istanbul ignore next - should be impossible */ {\n        // If it was an invalid regular expression, then it can't match\n        // anything.  This trick looks for a character after the end of\n        // the string, which is of course impossible, except in multi-line\n        // mode, but it's not a /m regex.\n        return new RegExp(\"$.\");\n    }\n    regExp._glob = pattern;\n    regExp._src = re;\n    return regExp;\n}\nminimatch.makeRe = function(pattern, options) {\n    return new Minimatch(pattern, options || {}).makeRe();\n};\nMinimatch.prototype.makeRe = makeRe;\nfunction makeRe() {\n    if (this.regexp || this.regexp === false) return this.regexp;\n    // at this point, this.set is a 2d array of partial\n    // pattern strings, or \"**\".\n    //\n    // It's better to use .match().  This function shouldn't\n    // be used, really, but it's pretty convenient sometimes,\n    // when you just want to work with a regex.\n    var set = this.set;\n    if (!set.length) {\n        this.regexp = false;\n        return this.regexp;\n    }\n    var options = this.options;\n    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;\n    var flags = options.nocase ? \"i\" : \"\";\n    var re = set.map(function(pattern) {\n        return pattern.map(function(p) {\n            return p === GLOBSTAR ? twoStar : typeof p === \"string\" ? regExpEscape(p) : p._src;\n        }).join(\"\\\\/\");\n    }).join(\"|\");\n    // must match entire pattern\n    // ending in a * or ** will make it less strict.\n    re = \"^(?:\" + re + \")$\";\n    // can match anything, as long as it's not this.\n    if (this.negate) re = \"^(?!\" + re + \").*$\";\n    try {\n        this.regexp = new RegExp(re, flags);\n    } catch (ex) /* istanbul ignore next - should be impossible */ {\n        this.regexp = false;\n    }\n    return this.regexp;\n}\nminimatch.match = function(list, pattern, options) {\n    options = options || {};\n    var mm = new Minimatch(pattern, options);\n    list = list.filter(function(f) {\n        return mm.match(f);\n    });\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\nMinimatch.prototype.match = function match(f, partial) {\n    if (typeof partial === \"undefined\") partial = this.partial;\n    this.debug(\"match\", f, this.pattern);\n    // short-circuit in the case of busted things.\n    // comments, etc.\n    if (this.comment) return false;\n    if (this.empty) return f === \"\";\n    if (f === \"/\" && partial) return true;\n    var options = this.options;\n    // windows: need to use /, not \\\n    if (path.sep !== \"/\") {\n        f = f.split(path.sep).join(\"/\");\n    }\n    // treat the test path as a set of pathparts.\n    f = f.split(slashSplit);\n    this.debug(this.pattern, \"split\", f);\n    // just ONE of the pattern sets in this.set needs to match\n    // in order for it to be valid.  If negating, then just one\n    // match means that we have failed.\n    // Either way, return on the first hit.\n    var set = this.set;\n    this.debug(this.pattern, \"set\", set);\n    // Find the basename of the path by looking for the last non-empty segment\n    var filename;\n    var i;\n    for(i = f.length - 1; i >= 0; i--){\n        filename = f[i];\n        if (filename) break;\n    }\n    for(i = 0; i < set.length; i++){\n        var pattern = set[i];\n        var file = f;\n        if (options.matchBase && pattern.length === 1) {\n            file = [\n                filename\n            ];\n        }\n        var hit = this.matchOne(file, pattern, partial);\n        if (hit) {\n            if (options.flipNegate) return true;\n            return !this.negate;\n        }\n    }\n    // didn't get any hits.  this is success if it's a negative\n    // pattern, failure otherwise.\n    if (options.flipNegate) return false;\n    return this.negate;\n};\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function(file, pattern, partial) {\n    var options = this.options;\n    this.debug(\"matchOne\", {\n        \"this\": this,\n        file: file,\n        pattern: pattern\n    });\n    this.debug(\"matchOne\", file.length, pattern.length);\n    for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){\n        this.debug(\"matchOne loop\");\n        var p = pattern[pi];\n        var f = file[fi];\n        this.debug(pattern, p, f);\n        // should be impossible.\n        // some invalid regexp stuff in the set.\n        /* istanbul ignore if */ if (p === false) return false;\n        if (p === GLOBSTAR) {\n            this.debug(\"GLOBSTAR\", [\n                pattern,\n                p,\n                f\n            ]);\n            // \"**\"\n            // a/**/b/**/c would match the following:\n            // a/b/x/y/z/c\n            // a/x/y/z/b/c\n            // a/b/x/b/x/c\n            // a/b/c\n            // To do this, take the rest of the pattern after\n            // the **, and see if it would match the file remainder.\n            // If so, return success.\n            // If not, the ** \"swallows\" a segment, and try again.\n            // This is recursively awful.\n            //\n            // a/**/b/**/c matching a/b/x/y/z/c\n            // - a matches a\n            // - doublestar\n            //   - matchOne(b/x/y/z/c, b/**/c)\n            //     - b matches b\n            //     - doublestar\n            //       - matchOne(x/y/z/c, c) -> no\n            //       - matchOne(y/z/c, c) -> no\n            //       - matchOne(z/c, c) -> no\n            //       - matchOne(c, c) yes, hit\n            var fr = fi;\n            var pr = pi + 1;\n            if (pr === pl) {\n                this.debug(\"** at the end\");\n                // a ** at the end will just swallow the rest.\n                // We have found a match.\n                // however, it will not swallow /.x, unless\n                // options.dot is set.\n                // . and .. are *never* matched by **, for explosively\n                // exponential reasons.\n                for(; fi < fl; fi++){\n                    if (file[fi] === \".\" || file[fi] === \"..\" || !options.dot && file[fi].charAt(0) === \".\") return false;\n                }\n                return true;\n            }\n            // ok, let's see if we can swallow whatever we can.\n            while(fr < fl){\n                var swallowee = file[fr];\n                this.debug(\"\\nglobstar while\", file, fr, pattern, pr, swallowee);\n                // XXX remove this slice.  Just pass the start index.\n                if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                    this.debug(\"globstar found match!\", fr, fl, swallowee);\n                    // found a match.\n                    return true;\n                } else {\n                    // can't swallow \".\" or \"..\" ever.\n                    // can only swallow \".foo\" when explicitly asked.\n                    if (swallowee === \".\" || swallowee === \"..\" || !options.dot && swallowee.charAt(0) === \".\") {\n                        this.debug(\"dot detected!\", file, fr, pattern, pr);\n                        break;\n                    }\n                    // ** swallows a segment, and continue.\n                    this.debug(\"globstar swallow a segment, and continue\");\n                    fr++;\n                }\n            }\n            // no match was found.\n            // However, in partial mode, we can't say this is necessarily over.\n            // If there's more *pattern* left, then\n            /* istanbul ignore if */ if (partial) {\n                // ran out of file\n                this.debug(\"\\n>>> no match, partial?\", file, fr, pattern, pr);\n                if (fr === fl) return true;\n            }\n            return false;\n        }\n        // something other than **\n        // non-magic patterns just have to match exactly\n        // patterns with magic have been turned into regexps.\n        var hit;\n        if (typeof p === \"string\") {\n            hit = f === p;\n            this.debug(\"string match\", p, f, hit);\n        } else {\n            hit = f.match(p);\n            this.debug(\"pattern match\", p, f, hit);\n        }\n        if (!hit) return false;\n    }\n    // Note: ending in / means that we'll get a final \"\"\n    // at the end of the pattern.  This can only match a\n    // corresponding \"\" at the end of the file.\n    // If the file ends in /, then it can only match a\n    // a pattern that ends in /, unless the pattern just\n    // doesn't have any more for it. But, a/b/ should *not*\n    // match \"a/b/*\", even though \"\" matches against the\n    // [^/]*? pattern, except in partial mode, where it might\n    // simply not be reached yet.\n    // However, a/b/ should still satisfy a/*\n    // now either we fell off the end of the pattern, or we're done.\n    if (fi === fl && pi === pl) {\n        // ran out of pattern and filename at the same time.\n        // an exact hit!\n        return true;\n    } else if (fi === fl) {\n        // ran out of file, but still had pattern left.\n        // this is ok if we're doing the match as part of\n        // a glob fs traversal.\n        return partial;\n    } else /* istanbul ignore else */ if (pi === pl) {\n        // ran out of pattern, still have file left.\n        // this is only acceptable if we're on the very last\n        // empty segment of a file with a trailing slash.\n        // a/* should match a/b/\n        return fi === fl - 1 && file[fi] === \"\";\n    }\n    // should be unreachable.\n    /* istanbul ignore next */ throw new Error(\"wtf?\");\n};\n// replace stuff like \\* with *\nfunction globUnescape(s) {\n    return s.replace(/\\\\(.)/g, \"$1\");\n}\nfunction regExpEscape(s) {\n    return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minimatch/minimatch.js\n");

/***/ })

};
;