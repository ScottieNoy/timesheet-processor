"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/saxes";
exports.ids = ["vendor-chunks/saxes"];
exports.modules = {

/***/ "(rsc)/./node_modules/saxes/saxes.js":
/*!*************************************!*\
  !*** ./node_modules/saxes/saxes.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ed5 = __webpack_require__(/*! xmlchars/xml/1.0/ed5 */ \"(rsc)/./node_modules/xmlchars/xml/1.0/ed5.js\");\nconst ed2 = __webpack_require__(/*! xmlchars/xml/1.1/ed2 */ \"(rsc)/./node_modules/xmlchars/xml/1.1/ed2.js\");\nconst NSed3 = __webpack_require__(/*! xmlchars/xmlns/1.0/ed3 */ \"(rsc)/./node_modules/xmlchars/xmlns/1.0/ed3.js\");\nvar isS = ed5.isS;\nvar isChar10 = ed5.isChar;\nvar isNameStartChar = ed5.isNameStartChar;\nvar isNameChar = ed5.isNameChar;\nvar S_LIST = ed5.S_LIST;\nvar NAME_RE = ed5.NAME_RE;\nvar isChar11 = ed2.isChar;\nvar isNCNameStartChar = NSed3.isNCNameStartChar;\nvar isNCNameChar = NSed3.isNCNameChar;\nvar NC_NAME_RE = NSed3.NC_NAME_RE;\nconst XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\nconst XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\nconst rootNS = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __proto__: null,\n    xml: XML_NAMESPACE,\n    xmlns: XMLNS_NAMESPACE\n};\nconst XML_ENTITIES = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __proto__: null,\n    amp: \"&\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"',\n    apos: \"'\"\n};\n// EOC: end-of-chunk\nconst EOC = -1;\nconst NL_LIKE = -2;\nconst S_BEGIN = 0; // Initial state.\nconst S_BEGIN_WHITESPACE = 1; // leading whitespace\nconst S_DOCTYPE = 2; // <!DOCTYPE\nconst S_DOCTYPE_QUOTE = 3; // <!DOCTYPE \"//blah\nconst S_DTD = 4; // <!DOCTYPE \"//blah\" [ ...\nconst S_DTD_QUOTED = 5; // <!DOCTYPE \"//blah\" [ \"foo\nconst S_DTD_OPEN_WAKA = 6;\nconst S_DTD_OPEN_WAKA_BANG = 7;\nconst S_DTD_COMMENT = 8; // <!--\nconst S_DTD_COMMENT_ENDING = 9; // <!-- blah -\nconst S_DTD_COMMENT_ENDED = 10; // <!-- blah --\nconst S_DTD_PI = 11; // <?\nconst S_DTD_PI_ENDING = 12; // <?hi \"there\" ?\nconst S_TEXT = 13; // general stuff\nconst S_ENTITY = 14; // &amp and such\nconst S_OPEN_WAKA = 15; // <\nconst S_OPEN_WAKA_BANG = 16; // <!...\nconst S_COMMENT = 17; // <!--\nconst S_COMMENT_ENDING = 18; // <!-- blah -\nconst S_COMMENT_ENDED = 19; // <!-- blah --\nconst S_CDATA = 20; // <![CDATA[ something\nconst S_CDATA_ENDING = 21; // ]\nconst S_CDATA_ENDING_2 = 22; // ]]\nconst S_PI_FIRST_CHAR = 23; // <?hi, first char\nconst S_PI_REST = 24; // <?hi, rest of the name\nconst S_PI_BODY = 25; // <?hi there\nconst S_PI_ENDING = 26; // <?hi \"there\" ?\nconst S_XML_DECL_NAME_START = 27; // <?xml\nconst S_XML_DECL_NAME = 28; // <?xml foo\nconst S_XML_DECL_EQ = 29; // <?xml foo=\nconst S_XML_DECL_VALUE_START = 30; // <?xml foo=\nconst S_XML_DECL_VALUE = 31; // <?xml foo=\"bar\"\nconst S_XML_DECL_SEPARATOR = 32; // <?xml foo=\"bar\"\nconst S_XML_DECL_ENDING = 33; // <?xml ... ?\nconst S_OPEN_TAG = 34; // <strong\nconst S_OPEN_TAG_SLASH = 35; // <strong /\nconst S_ATTRIB = 36; // <a\nconst S_ATTRIB_NAME = 37; // <a foo\nconst S_ATTRIB_NAME_SAW_WHITE = 38; // <a foo _\nconst S_ATTRIB_VALUE = 39; // <a foo=\nconst S_ATTRIB_VALUE_QUOTED = 40; // <a foo=\"bar\nconst S_ATTRIB_VALUE_CLOSED = 41; // <a foo=\"bar\"\nconst S_ATTRIB_VALUE_UNQUOTED = 42; // <a foo=bar\nconst S_CLOSE_TAG = 43; // </a\nconst S_CLOSE_TAG_SAW_WHITE = 44; // </a   >\nconst TAB = 9;\nconst NL = 0xA;\nconst CR = 0xD;\nconst SPACE = 0x20;\nconst BANG = 0x21;\nconst DQUOTE = 0x22;\nconst AMP = 0x26;\nconst SQUOTE = 0x27;\nconst MINUS = 0x2D;\nconst FORWARD_SLASH = 0x2F;\nconst SEMICOLON = 0x3B;\nconst LESS = 0x3C;\nconst EQUAL = 0x3D;\nconst GREATER = 0x3E;\nconst QUESTION = 0x3F;\nconst OPEN_BRACKET = 0x5B;\nconst CLOSE_BRACKET = 0x5D;\nconst NEL = 0x85;\nconst LS = 0x2028; // Line Separator\nconst isQuote = (c)=>c === DQUOTE || c === SQUOTE;\nconst QUOTES = [\n    DQUOTE,\n    SQUOTE\n];\nconst DOCTYPE_TERMINATOR = [\n    ...QUOTES,\n    OPEN_BRACKET,\n    GREATER\n];\nconst DTD_TERMINATOR = [\n    ...QUOTES,\n    LESS,\n    CLOSE_BRACKET\n];\nconst XML_DECL_NAME_TERMINATOR = [\n    EQUAL,\n    QUESTION,\n    ...S_LIST\n];\nconst ATTRIB_VALUE_UNQUOTED_TERMINATOR = [\n    ...S_LIST,\n    GREATER,\n    AMP,\n    LESS\n];\nfunction nsPairCheck(parser, prefix, uri) {\n    switch(prefix){\n        case \"xml\":\n            if (uri !== XML_NAMESPACE) {\n                parser.fail(`xml prefix must be bound to ${XML_NAMESPACE}.`);\n            }\n            break;\n        case \"xmlns\":\n            if (uri !== XMLNS_NAMESPACE) {\n                parser.fail(`xmlns prefix must be bound to ${XMLNS_NAMESPACE}.`);\n            }\n            break;\n        default:\n    }\n    switch(uri){\n        case XMLNS_NAMESPACE:\n            parser.fail(prefix === \"\" ? `the default namespace may not be set to ${uri}.` : `may not assign a prefix (even \"xmlns\") to the URI \\\n${XMLNS_NAMESPACE}.`);\n            break;\n        case XML_NAMESPACE:\n            switch(prefix){\n                case \"xml\":\n                    break;\n                case \"\":\n                    parser.fail(`the default namespace may not be set to ${uri}.`);\n                    break;\n                default:\n                    parser.fail(\"may not assign the xml namespace to another prefix.\");\n            }\n            break;\n        default:\n    }\n}\nfunction nsMappingCheck(parser, mapping) {\n    for (const local of Object.keys(mapping)){\n        nsPairCheck(parser, local, mapping[local]);\n    }\n}\nconst isNCName = (name)=>NC_NAME_RE.test(name);\nconst isName = (name)=>NAME_RE.test(name);\nconst FORBIDDEN_START = 0;\nconst FORBIDDEN_BRACKET = 1;\nconst FORBIDDEN_BRACKET_BRACKET = 2;\n/**\n * The list of supported events.\n */ exports.EVENTS = [\n    \"xmldecl\",\n    \"text\",\n    \"processinginstruction\",\n    \"doctype\",\n    \"comment\",\n    \"opentagstart\",\n    \"attribute\",\n    \"opentag\",\n    \"closetag\",\n    \"cdata\",\n    \"error\",\n    \"end\",\n    \"ready\"\n];\nconst EVENT_NAME_TO_HANDLER_NAME = {\n    xmldecl: \"xmldeclHandler\",\n    text: \"textHandler\",\n    processinginstruction: \"piHandler\",\n    doctype: \"doctypeHandler\",\n    comment: \"commentHandler\",\n    opentagstart: \"openTagStartHandler\",\n    attribute: \"attributeHandler\",\n    opentag: \"openTagHandler\",\n    closetag: \"closeTagHandler\",\n    cdata: \"cdataHandler\",\n    error: \"errorHandler\",\n    end: \"endHandler\",\n    ready: \"readyHandler\"\n};\nclass SaxesParser {\n    /**\n     * @param opt The parser options.\n     */ constructor(opt){\n        this.opt = opt !== null && opt !== void 0 ? opt : {};\n        this.fragmentOpt = !!this.opt.fragment;\n        const xmlnsOpt = this.xmlnsOpt = !!this.opt.xmlns;\n        this.trackPosition = this.opt.position !== false;\n        this.fileName = this.opt.fileName;\n        if (xmlnsOpt) {\n            // This is the function we use to perform name checks on PIs and entities.\n            // When namespaces are used, colons are not allowed in PI target names or\n            // entity names. So the check depends on whether namespaces are used. See:\n            //\n            // https://www.w3.org/XML/xml-names-19990114-errata.html\n            // NE08\n            //\n            this.nameStartCheck = isNCNameStartChar;\n            this.nameCheck = isNCNameChar;\n            this.isName = isNCName;\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.processAttribs = this.processAttribsNS;\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.pushAttrib = this.pushAttribNS;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.ns = Object.assign({\n                __proto__: null\n            }, rootNS);\n            const additional = this.opt.additionalNamespaces;\n            if (additional != null) {\n                nsMappingCheck(this, additional);\n                Object.assign(this.ns, additional);\n            }\n        } else {\n            this.nameStartCheck = isNameStartChar;\n            this.nameCheck = isNameChar;\n            this.isName = isName;\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.processAttribs = this.processAttribsPlain;\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.pushAttrib = this.pushAttribPlain;\n        }\n        //\n        // The order of the members in this table needs to correspond to the state\n        // numbers given to the states that correspond to the methods being recorded\n        // here.\n        //\n        this.stateTable = [\n            /* eslint-disable @typescript-eslint/unbound-method */ this.sBegin,\n            this.sBeginWhitespace,\n            this.sDoctype,\n            this.sDoctypeQuote,\n            this.sDTD,\n            this.sDTDQuoted,\n            this.sDTDOpenWaka,\n            this.sDTDOpenWakaBang,\n            this.sDTDComment,\n            this.sDTDCommentEnding,\n            this.sDTDCommentEnded,\n            this.sDTDPI,\n            this.sDTDPIEnding,\n            this.sText,\n            this.sEntity,\n            this.sOpenWaka,\n            this.sOpenWakaBang,\n            this.sComment,\n            this.sCommentEnding,\n            this.sCommentEnded,\n            this.sCData,\n            this.sCDataEnding,\n            this.sCDataEnding2,\n            this.sPIFirstChar,\n            this.sPIRest,\n            this.sPIBody,\n            this.sPIEnding,\n            this.sXMLDeclNameStart,\n            this.sXMLDeclName,\n            this.sXMLDeclEq,\n            this.sXMLDeclValueStart,\n            this.sXMLDeclValue,\n            this.sXMLDeclSeparator,\n            this.sXMLDeclEnding,\n            this.sOpenTag,\n            this.sOpenTagSlash,\n            this.sAttrib,\n            this.sAttribName,\n            this.sAttribNameSawWhite,\n            this.sAttribValue,\n            this.sAttribValueQuoted,\n            this.sAttribValueClosed,\n            this.sAttribValueUnquoted,\n            this.sCloseTag,\n            this.sCloseTagSawWhite\n        ];\n        this._init();\n    }\n    /**\n     * Indicates whether or not the parser is closed. If ``true``, wait for\n     * the ``ready`` event to write again.\n     */ get closed() {\n        return this._closed;\n    }\n    _init() {\n        var _a;\n        this.openWakaBang = \"\";\n        this.text = \"\";\n        this.name = \"\";\n        this.piTarget = \"\";\n        this.entity = \"\";\n        this.q = null;\n        this.tags = [];\n        this.tag = null;\n        this.topNS = null;\n        this.chunk = \"\";\n        this.chunkPosition = 0;\n        this.i = 0;\n        this.prevI = 0;\n        this.carriedFromPrevious = undefined;\n        this.forbiddenState = FORBIDDEN_START;\n        this.attribList = [];\n        // The logic is organized so as to minimize the need to check\n        // this.opt.fragment while parsing.\n        const { fragmentOpt } = this;\n        this.state = fragmentOpt ? S_TEXT : S_BEGIN;\n        // We want these to be all true if we are dealing with a fragment.\n        this.reportedTextBeforeRoot = this.reportedTextAfterRoot = this.closedRoot = this.sawRoot = fragmentOpt;\n        // An XML declaration is intially possible only when parsing whole\n        // documents.\n        this.xmlDeclPossible = !fragmentOpt;\n        this.xmlDeclExpects = [\n            \"version\"\n        ];\n        this.entityReturnState = undefined;\n        let { defaultXMLVersion } = this.opt;\n        if (defaultXMLVersion === undefined) {\n            if (this.opt.forceXMLVersion === true) {\n                throw new Error(\"forceXMLVersion set but defaultXMLVersion is not set\");\n            }\n            defaultXMLVersion = \"1.0\";\n        }\n        this.setXMLVersion(defaultXMLVersion);\n        this.positionAtNewLine = 0;\n        this.doctype = false;\n        this._closed = false;\n        this.xmlDecl = {\n            version: undefined,\n            encoding: undefined,\n            standalone: undefined\n        };\n        this.line = 1;\n        this.column = 0;\n        this.ENTITIES = Object.create(XML_ENTITIES);\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.readyHandler) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    /**\n     * The stream position the parser is currently looking at. This field is\n     * zero-based.\n     *\n     * This field is not based on counting Unicode characters but is to be\n     * interpreted as a plain index into a JavaScript string.\n     */ get position() {\n        return this.chunkPosition + this.i;\n    }\n    /**\n     * The column number of the next character to be read by the parser.  *\n     * This field is zero-based. (The first column in a line is 0.)\n     *\n     * This field reports the index at which the next character would be in the\n     * line if the line were represented as a JavaScript string.  Note that this\n     * *can* be different to a count based on the number of *Unicode characters*\n     * due to how JavaScript handles astral plane characters.\n     *\n     * See [[column]] for a number that corresponds to a count of Unicode\n     * characters.\n     */ get columnIndex() {\n        return this.position - this.positionAtNewLine;\n    }\n    /**\n     * Set an event listener on an event. The parser supports one handler per\n     * event type. If you try to set an event handler over an existing handler,\n     * the old handler is silently overwritten.\n     *\n     * @param name The event to listen to.\n     *\n     * @param handler The handler to set.\n     */ on(name, handler) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this[EVENT_NAME_TO_HANDLER_NAME[name]] = handler;\n    }\n    /**\n     * Unset an event handler.\n     *\n     * @parma name The event to stop listening to.\n     */ off(name) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this[EVENT_NAME_TO_HANDLER_NAME[name]] = undefined;\n    }\n    /**\n     * Make an error object. The error object will have a message that contains\n     * the ``fileName`` option passed at the creation of the parser. If position\n     * tracking was turned on, it will also have line and column number\n     * information.\n     *\n     * @param message The message describing the error to report.\n     *\n     * @returns An error object with a properly formatted message.\n     */ makeError(message) {\n        var _a;\n        let msg = (_a = this.fileName) !== null && _a !== void 0 ? _a : \"\";\n        if (this.trackPosition) {\n            if (msg.length > 0) {\n                msg += \":\";\n            }\n            msg += `${this.line}:${this.column}`;\n        }\n        if (msg.length > 0) {\n            msg += \": \";\n        }\n        return new Error(msg + message);\n    }\n    /**\n     * Report a parsing error. This method is made public so that client code may\n     * check for issues that are outside the scope of this project and can report\n     * errors.\n     *\n     * @param message The error to report.\n     *\n     * @returns this\n     */ fail(message) {\n        const err = this.makeError(message);\n        const handler = this.errorHandler;\n        if (handler === undefined) {\n            throw err;\n        } else {\n            handler(err);\n        }\n        return this;\n    }\n    /**\n     * Write a XML data to the parser.\n     *\n     * @param chunk The XML data to write.\n     *\n     * @returns this\n     */ write(chunk) {\n        if (this.closed) {\n            return this.fail(\"cannot write after close; assign an onready handler.\");\n        }\n        let end = false;\n        if (chunk === null) {\n            // We cannot return immediately because carriedFromPrevious may need\n            // processing.\n            end = true;\n            chunk = \"\";\n        } else if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        // We checked if performing a pre-decomposition of the string into an array\n        // of single complete characters (``Array.from(chunk)``) would be faster\n        // than the current repeated calls to ``charCodeAt``. As of August 2018, it\n        // isn't. (There may be Node-specific code that would perform faster than\n        // ``Array.from`` but don't want to be dependent on Node.)\n        if (this.carriedFromPrevious !== undefined) {\n            // The previous chunk had char we must carry over.\n            chunk = `${this.carriedFromPrevious}${chunk}`;\n            this.carriedFromPrevious = undefined;\n        }\n        let limit = chunk.length;\n        const lastCode = chunk.charCodeAt(limit - 1);\n        if (!end && // A trailing CR or surrogate must be carried over to the next\n        // chunk.\n        (lastCode === CR || lastCode >= 0xD800 && lastCode <= 0xDBFF)) {\n            // The chunk ends with a character that must be carried over. We cannot\n            // know how to handle it until we get the next chunk or the end of the\n            // stream. So save it for later.\n            this.carriedFromPrevious = chunk[limit - 1];\n            limit--;\n            chunk = chunk.slice(0, limit);\n        }\n        const { stateTable } = this;\n        this.chunk = chunk;\n        this.i = 0;\n        while(this.i < limit){\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            stateTable[this.state].call(this);\n        }\n        this.chunkPosition += limit;\n        return end ? this.end() : this;\n    }\n    /**\n     * Close the current stream. Perform final well-formedness checks and reset\n     * the parser tstate.\n     *\n     * @returns this\n     */ close() {\n        return this.write(null);\n    }\n    /**\n     * Get a single code point out of the current chunk. This updates the current\n     * position if we do position tracking.\n     *\n     * This is the algorithm to use for XML 1.0.\n     *\n     * @returns The character read.\n     */ getCode10() {\n        const { chunk, i } = this;\n        this.prevI = i;\n        // Yes, we do this instead of doing this.i++. Doing it this way, we do not\n        // read this.i again, which is a bit faster.\n        this.i = i + 1;\n        if (i >= chunk.length) {\n            return EOC;\n        }\n        // Using charCodeAt and handling the surrogates ourselves is faster\n        // than using codePointAt.\n        const code = chunk.charCodeAt(i);\n        this.column++;\n        if (code < 0xD800) {\n            if (code >= SPACE || code === TAB) {\n                return code;\n            }\n            switch(code){\n                case NL:\n                    this.line++;\n                    this.column = 0;\n                    this.positionAtNewLine = this.position;\n                    return NL;\n                case CR:\n                    // We may get NaN if we read past the end of the chunk, which is fine.\n                    if (chunk.charCodeAt(i + 1) === NL) {\n                        // A \\r\\n sequence is converted to \\n so we have to skip over the\n                        // next character. We already know it has a size of 1 so ++ is fine\n                        // here.\n                        this.i = i + 2;\n                    }\n                    // Otherwise, a \\r is just converted to \\n, so we don't have to skip\n                    // ahead.\n                    // In either case, \\r becomes \\n.\n                    this.line++;\n                    this.column = 0;\n                    this.positionAtNewLine = this.position;\n                    return NL_LIKE;\n                default:\n                    // If we get here, then code < SPACE and it is not NL CR or TAB.\n                    this.fail(\"disallowed character.\");\n                    return code;\n            }\n        }\n        if (code > 0xDBFF) {\n            // This is a specialized version of isChar10 that takes into account\n            // that in this context code > 0xDBFF and code <= 0xFFFF. So it does not\n            // test cases that don't need testing.\n            if (!(code >= 0xE000 && code <= 0xFFFD)) {\n                this.fail(\"disallowed character.\");\n            }\n            return code;\n        }\n        const final = 0x10000 + (code - 0xD800) * 0x400 + (chunk.charCodeAt(i + 1) - 0xDC00);\n        this.i = i + 2;\n        // This is a specialized version of isChar10 that takes into account that in\n        // this context necessarily final >= 0x10000.\n        if (final > 0x10FFFF) {\n            this.fail(\"disallowed character.\");\n        }\n        return final;\n    }\n    /**\n     * Get a single code point out of the current chunk. This updates the current\n     * position if we do position tracking.\n     *\n     * This is the algorithm to use for XML 1.1.\n     *\n     * @returns {number} The character read.\n     */ getCode11() {\n        const { chunk, i } = this;\n        this.prevI = i;\n        // Yes, we do this instead of doing this.i++. Doing it this way, we do not\n        // read this.i again, which is a bit faster.\n        this.i = i + 1;\n        if (i >= chunk.length) {\n            return EOC;\n        }\n        // Using charCodeAt and handling the surrogates ourselves is faster\n        // than using codePointAt.\n        const code = chunk.charCodeAt(i);\n        this.column++;\n        if (code < 0xD800) {\n            if (code > 0x1F && code < 0x7F || code > 0x9F && code !== LS || code === TAB) {\n                return code;\n            }\n            switch(code){\n                case NL:\n                    this.line++;\n                    this.column = 0;\n                    this.positionAtNewLine = this.position;\n                    return NL;\n                case CR:\n                    {\n                        // We may get NaN if we read past the end of the chunk, which is\n                        // fine.\n                        const next = chunk.charCodeAt(i + 1);\n                        if (next === NL || next === NEL) {\n                            // A CR NL or CR NEL sequence is converted to NL so we have to skip\n                            // over the next character. We already know it has a size of 1.\n                            this.i = i + 2;\n                        }\n                    // Otherwise, a CR is just converted to NL, no skip.\n                    }\n                /* yes, fall through */ case NEL:\n                case LS:\n                    this.line++;\n                    this.column = 0;\n                    this.positionAtNewLine = this.position;\n                    return NL_LIKE;\n                default:\n                    this.fail(\"disallowed character.\");\n                    return code;\n            }\n        }\n        if (code > 0xDBFF) {\n            // This is a specialized version of isCharAndNotRestricted that takes into\n            // account that in this context code > 0xDBFF and code <= 0xFFFF. So it\n            // does not test cases that don't need testing.\n            if (!(code >= 0xE000 && code <= 0xFFFD)) {\n                this.fail(\"disallowed character.\");\n            }\n            return code;\n        }\n        const final = 0x10000 + (code - 0xD800) * 0x400 + (chunk.charCodeAt(i + 1) - 0xDC00);\n        this.i = i + 2;\n        // This is a specialized version of isCharAndNotRestricted that takes into\n        // account that in this context necessarily final >= 0x10000.\n        if (final > 0x10FFFF) {\n            this.fail(\"disallowed character.\");\n        }\n        return final;\n    }\n    /**\n     * Like ``getCode`` but with the return value normalized so that ``NL`` is\n     * returned for ``NL_LIKE``.\n     */ getCodeNorm() {\n        const c = this.getCode();\n        return c === NL_LIKE ? NL : c;\n    }\n    unget() {\n        this.i = this.prevI;\n        this.column--;\n    }\n    /**\n     * Capture characters into a buffer until encountering one of a set of\n     * characters.\n     *\n     * @param chars An array of codepoints. Encountering a character in the array\n     * ends the capture. (``chars`` may safely contain ``NL``.)\n     *\n     * @return The character code that made the capture end, or ``EOC`` if we hit\n     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned\n     * instead.\n     */ captureTo(chars) {\n        let { i: start } = this;\n        const { chunk } = this;\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            const c = this.getCode();\n            const isNLLike = c === NL_LIKE;\n            const final = isNLLike ? NL : c;\n            if (final === EOC || chars.includes(final)) {\n                this.text += chunk.slice(start, this.prevI);\n                return final;\n            }\n            if (isNLLike) {\n                this.text += `${chunk.slice(start, this.prevI)}\\n`;\n                start = this.i;\n            }\n        }\n    }\n    /**\n     * Capture characters into a buffer until encountering a character.\n     *\n     * @param char The codepoint that ends the capture. **NOTE ``char`` MAY NOT\n     * CONTAIN ``NL``.** Passing ``NL`` will result in buggy behavior.\n     *\n     * @return ``true`` if we ran into the character. Otherwise, we ran into the\n     * end of the current chunk.\n     */ captureToChar(char) {\n        let { i: start } = this;\n        const { chunk } = this;\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            let c = this.getCode();\n            switch(c){\n                case NL_LIKE:\n                    this.text += `${chunk.slice(start, this.prevI)}\\n`;\n                    start = this.i;\n                    c = NL;\n                    break;\n                case EOC:\n                    this.text += chunk.slice(start);\n                    return false;\n                default:\n            }\n            if (c === char) {\n                this.text += chunk.slice(start, this.prevI);\n                return true;\n            }\n        }\n    }\n    /**\n     * Capture characters that satisfy ``isNameChar`` into the ``name`` field of\n     * this parser.\n     *\n     * @return The character code that made the test fail, or ``EOC`` if we hit\n     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned\n     * instead.\n     */ captureNameChars() {\n        const { chunk, i: start } = this;\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            const c = this.getCode();\n            if (c === EOC) {\n                this.name += chunk.slice(start);\n                return EOC;\n            }\n            // NL is not a name char so we don't have to test specifically for it.\n            if (!isNameChar(c)) {\n                this.name += chunk.slice(start, this.prevI);\n                return c === NL_LIKE ? NL : c;\n            }\n        }\n    }\n    /**\n     * Skip white spaces.\n     *\n     * @return The character that ended the skip, or ``EOC`` if we hit\n     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned\n     * instead.\n     */ skipSpaces() {\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            const c = this.getCodeNorm();\n            if (c === EOC || !isS(c)) {\n                return c;\n            }\n        }\n    }\n    setXMLVersion(version) {\n        this.currentXMLVersion = version;\n        /*  eslint-disable @typescript-eslint/unbound-method */ if (version === \"1.0\") {\n            this.isChar = isChar10;\n            this.getCode = this.getCode10;\n        } else {\n            this.isChar = isChar11;\n            this.getCode = this.getCode11;\n        }\n    /* eslint-enable @typescript-eslint/unbound-method */ }\n    // STATE ENGINE METHODS\n    // This needs to be a state separate from S_BEGIN_WHITESPACE because we want\n    // to be sure never to come back to this state later.\n    sBegin() {\n        // We are essentially peeking at the first character of the chunk. Since\n        // S_BEGIN can be in effect only when we start working on the first chunk,\n        // the index at which we must look is necessarily 0. Note also that the\n        // following test does not depend on decoding surrogates.\n        // If the initial character is 0xFEFF, ignore it.\n        if (this.chunk.charCodeAt(0) === 0xFEFF) {\n            this.i++;\n            this.column++;\n        }\n        this.state = S_BEGIN_WHITESPACE;\n    }\n    sBeginWhitespace() {\n        // We need to know whether we've encountered spaces or not because as soon\n        // as we run into a space, an XML declaration is no longer possible. Rather\n        // than slow down skipSpaces even in places where we don't care whether it\n        // skipped anything or not, we check whether prevI is equal to the value of\n        // i from before we skip spaces.\n        const iBefore = this.i;\n        const c = this.skipSpaces();\n        if (this.prevI !== iBefore) {\n            this.xmlDeclPossible = false;\n        }\n        switch(c){\n            case LESS:\n                this.state = S_OPEN_WAKA;\n                // We could naively call closeText but in this state, it is not normal\n                // to have text be filled with any data.\n                if (this.text.length !== 0) {\n                    throw new Error(\"no-empty text at start\");\n                }\n                break;\n            case EOC:\n                break;\n            default:\n                this.unget();\n                this.state = S_TEXT;\n                this.xmlDeclPossible = false;\n        }\n    }\n    sDoctype() {\n        var _a;\n        const c = this.captureTo(DOCTYPE_TERMINATOR);\n        switch(c){\n            case GREATER:\n                {\n                    // eslint-disable-next-line no-unused-expressions\n                    (_a = this.doctypeHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);\n                    this.text = \"\";\n                    this.state = S_TEXT;\n                    this.doctype = true; // just remember that we saw it.\n                    break;\n                }\n            case EOC:\n                break;\n            default:\n                this.text += String.fromCodePoint(c);\n                if (c === OPEN_BRACKET) {\n                    this.state = S_DTD;\n                } else if (isQuote(c)) {\n                    this.state = S_DOCTYPE_QUOTE;\n                    this.q = c;\n                }\n        }\n    }\n    sDoctypeQuote() {\n        const q = this.q;\n        if (this.captureToChar(q)) {\n            this.text += String.fromCodePoint(q);\n            this.q = null;\n            this.state = S_DOCTYPE;\n        }\n    }\n    sDTD() {\n        const c = this.captureTo(DTD_TERMINATOR);\n        if (c === EOC) {\n            return;\n        }\n        this.text += String.fromCodePoint(c);\n        if (c === CLOSE_BRACKET) {\n            this.state = S_DOCTYPE;\n        } else if (c === LESS) {\n            this.state = S_DTD_OPEN_WAKA;\n        } else if (isQuote(c)) {\n            this.state = S_DTD_QUOTED;\n            this.q = c;\n        }\n    }\n    sDTDQuoted() {\n        const q = this.q;\n        if (this.captureToChar(q)) {\n            this.text += String.fromCodePoint(q);\n            this.state = S_DTD;\n            this.q = null;\n        }\n    }\n    sDTDOpenWaka() {\n        const c = this.getCodeNorm();\n        this.text += String.fromCodePoint(c);\n        switch(c){\n            case BANG:\n                this.state = S_DTD_OPEN_WAKA_BANG;\n                this.openWakaBang = \"\";\n                break;\n            case QUESTION:\n                this.state = S_DTD_PI;\n                break;\n            default:\n                this.state = S_DTD;\n        }\n    }\n    sDTDOpenWakaBang() {\n        const char = String.fromCodePoint(this.getCodeNorm());\n        const owb = this.openWakaBang += char;\n        this.text += char;\n        if (owb !== \"-\") {\n            this.state = owb === \"--\" ? S_DTD_COMMENT : S_DTD;\n            this.openWakaBang = \"\";\n        }\n    }\n    sDTDComment() {\n        if (this.captureToChar(MINUS)) {\n            this.text += \"-\";\n            this.state = S_DTD_COMMENT_ENDING;\n        }\n    }\n    sDTDCommentEnding() {\n        const c = this.getCodeNorm();\n        this.text += String.fromCodePoint(c);\n        this.state = c === MINUS ? S_DTD_COMMENT_ENDED : S_DTD_COMMENT;\n    }\n    sDTDCommentEnded() {\n        const c = this.getCodeNorm();\n        this.text += String.fromCodePoint(c);\n        if (c === GREATER) {\n            this.state = S_DTD;\n        } else {\n            this.fail(\"malformed comment.\");\n            // <!-- blah -- bloo --> will be recorded as\n            // a comment of \" blah -- bloo \"\n            this.state = S_DTD_COMMENT;\n        }\n    }\n    sDTDPI() {\n        if (this.captureToChar(QUESTION)) {\n            this.text += \"?\";\n            this.state = S_DTD_PI_ENDING;\n        }\n    }\n    sDTDPIEnding() {\n        const c = this.getCodeNorm();\n        this.text += String.fromCodePoint(c);\n        if (c === GREATER) {\n            this.state = S_DTD;\n        }\n    }\n    sText() {\n        //\n        // We did try a version of saxes where the S_TEXT state was split in two\n        // states: one for text inside the root element, and one for text\n        // outside. This was avoiding having to test this.tags.length to decide\n        // what implementation to actually use.\n        //\n        // Peformance testing on gigabyte-size files did not show any advantage to\n        // using the two states solution instead of the current one. Conversely, it\n        // made the code a bit more complicated elsewhere. For instance, a comment\n        // can appear before the root element so when a comment ended it was\n        // necessary to determine whether to return to the S_TEXT state or to the\n        // new text-outside-root state.\n        //\n        if (this.tags.length !== 0) {\n            this.handleTextInRoot();\n        } else {\n            this.handleTextOutsideRoot();\n        }\n    }\n    sEntity() {\n        // This is essentially a specialized version of captureToChar(SEMICOLON...)\n        let { i: start } = this;\n        const { chunk } = this;\n        // eslint-disable-next-line no-labels, no-restricted-syntax\n        loop: // eslint-disable-next-line no-constant-condition\n        while(true){\n            switch(this.getCode()){\n                case NL_LIKE:\n                    this.entity += `${chunk.slice(start, this.prevI)}\\n`;\n                    start = this.i;\n                    break;\n                case SEMICOLON:\n                    {\n                        const { entityReturnState } = this;\n                        const entity = this.entity + chunk.slice(start, this.prevI);\n                        this.state = entityReturnState;\n                        let parsed;\n                        if (entity === \"\") {\n                            this.fail(\"empty entity name.\");\n                            parsed = \"&;\";\n                        } else {\n                            parsed = this.parseEntity(entity);\n                            this.entity = \"\";\n                        }\n                        if (entityReturnState !== S_TEXT || this.textHandler !== undefined) {\n                            this.text += parsed;\n                        }\n                        break loop;\n                    }\n                case EOC:\n                    this.entity += chunk.slice(start);\n                    break loop;\n                default:\n            }\n        }\n    }\n    sOpenWaka() {\n        // Reminder: a state handler is called with at least one character\n        // available in the current chunk. So the first call to get code inside of\n        // a state handler cannot return ``EOC``. That's why we don't test\n        // for it.\n        const c = this.getCode();\n        // either a /, ?, !, or text is coming next.\n        if (isNameStartChar(c)) {\n            this.state = S_OPEN_TAG;\n            this.unget();\n            this.xmlDeclPossible = false;\n        } else {\n            switch(c){\n                case FORWARD_SLASH:\n                    this.state = S_CLOSE_TAG;\n                    this.xmlDeclPossible = false;\n                    break;\n                case BANG:\n                    this.state = S_OPEN_WAKA_BANG;\n                    this.openWakaBang = \"\";\n                    this.xmlDeclPossible = false;\n                    break;\n                case QUESTION:\n                    this.state = S_PI_FIRST_CHAR;\n                    break;\n                default:\n                    this.fail(\"disallowed character in tag name\");\n                    this.state = S_TEXT;\n                    this.xmlDeclPossible = false;\n            }\n        }\n    }\n    sOpenWakaBang() {\n        this.openWakaBang += String.fromCodePoint(this.getCodeNorm());\n        switch(this.openWakaBang){\n            case \"[CDATA[\":\n                if (!this.sawRoot && !this.reportedTextBeforeRoot) {\n                    this.fail(\"text data outside of root node.\");\n                    this.reportedTextBeforeRoot = true;\n                }\n                if (this.closedRoot && !this.reportedTextAfterRoot) {\n                    this.fail(\"text data outside of root node.\");\n                    this.reportedTextAfterRoot = true;\n                }\n                this.state = S_CDATA;\n                this.openWakaBang = \"\";\n                break;\n            case \"--\":\n                this.state = S_COMMENT;\n                this.openWakaBang = \"\";\n                break;\n            case \"DOCTYPE\":\n                this.state = S_DOCTYPE;\n                if (this.doctype || this.sawRoot) {\n                    this.fail(\"inappropriately located doctype declaration.\");\n                }\n                this.openWakaBang = \"\";\n                break;\n            default:\n                // 7 happens to be the maximum length of the string that can possibly\n                // match one of the cases above.\n                if (this.openWakaBang.length >= 7) {\n                    this.fail(\"incorrect syntax.\");\n                }\n        }\n    }\n    sComment() {\n        if (this.captureToChar(MINUS)) {\n            this.state = S_COMMENT_ENDING;\n        }\n    }\n    sCommentEnding() {\n        var _a;\n        const c = this.getCodeNorm();\n        if (c === MINUS) {\n            this.state = S_COMMENT_ENDED;\n            // eslint-disable-next-line no-unused-expressions\n            (_a = this.commentHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);\n            this.text = \"\";\n        } else {\n            this.text += `-${String.fromCodePoint(c)}`;\n            this.state = S_COMMENT;\n        }\n    }\n    sCommentEnded() {\n        const c = this.getCodeNorm();\n        if (c !== GREATER) {\n            this.fail(\"malformed comment.\");\n            // <!-- blah -- bloo --> will be recorded as\n            // a comment of \" blah -- bloo \"\n            this.text += `--${String.fromCodePoint(c)}`;\n            this.state = S_COMMENT;\n        } else {\n            this.state = S_TEXT;\n        }\n    }\n    sCData() {\n        if (this.captureToChar(CLOSE_BRACKET)) {\n            this.state = S_CDATA_ENDING;\n        }\n    }\n    sCDataEnding() {\n        const c = this.getCodeNorm();\n        if (c === CLOSE_BRACKET) {\n            this.state = S_CDATA_ENDING_2;\n        } else {\n            this.text += `]${String.fromCodePoint(c)}`;\n            this.state = S_CDATA;\n        }\n    }\n    sCDataEnding2() {\n        var _a;\n        const c = this.getCodeNorm();\n        switch(c){\n            case GREATER:\n                {\n                    // eslint-disable-next-line no-unused-expressions\n                    (_a = this.cdataHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);\n                    this.text = \"\";\n                    this.state = S_TEXT;\n                    break;\n                }\n            case CLOSE_BRACKET:\n                this.text += \"]\";\n                break;\n            default:\n                this.text += `]]${String.fromCodePoint(c)}`;\n                this.state = S_CDATA;\n        }\n    }\n    // We need this separate state to check the first character fo the pi target\n    // with this.nameStartCheck which allows less characters than this.nameCheck.\n    sPIFirstChar() {\n        const c = this.getCodeNorm();\n        // This is first because in the case where the file is well-formed this is\n        // the branch taken. We optimize for well-formedness.\n        if (this.nameStartCheck(c)) {\n            this.piTarget += String.fromCodePoint(c);\n            this.state = S_PI_REST;\n        } else if (c === QUESTION || isS(c)) {\n            this.fail(\"processing instruction without a target.\");\n            this.state = c === QUESTION ? S_PI_ENDING : S_PI_BODY;\n        } else {\n            this.fail(\"disallowed character in processing instruction name.\");\n            this.piTarget += String.fromCodePoint(c);\n            this.state = S_PI_REST;\n        }\n    }\n    sPIRest() {\n        // Capture characters into a piTarget while ``this.nameCheck`` run on the\n        // character read returns true.\n        const { chunk, i: start } = this;\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            const c = this.getCodeNorm();\n            if (c === EOC) {\n                this.piTarget += chunk.slice(start);\n                return;\n            }\n            // NL cannot satisfy this.nameCheck so we don't have to test specifically\n            // for it.\n            if (!this.nameCheck(c)) {\n                this.piTarget += chunk.slice(start, this.prevI);\n                const isQuestion = c === QUESTION;\n                if (isQuestion || isS(c)) {\n                    if (this.piTarget === \"xml\") {\n                        if (!this.xmlDeclPossible) {\n                            this.fail(\"an XML declaration must be at the start of the document.\");\n                        }\n                        this.state = isQuestion ? S_XML_DECL_ENDING : S_XML_DECL_NAME_START;\n                    } else {\n                        this.state = isQuestion ? S_PI_ENDING : S_PI_BODY;\n                    }\n                } else {\n                    this.fail(\"disallowed character in processing instruction name.\");\n                    this.piTarget += String.fromCodePoint(c);\n                }\n                break;\n            }\n        }\n    }\n    sPIBody() {\n        if (this.text.length === 0) {\n            const c = this.getCodeNorm();\n            if (c === QUESTION) {\n                this.state = S_PI_ENDING;\n            } else if (!isS(c)) {\n                this.text = String.fromCodePoint(c);\n            }\n        } else if (this.captureToChar(QUESTION)) {\n            this.state = S_PI_ENDING;\n        }\n    }\n    sPIEnding() {\n        var _a;\n        const c = this.getCodeNorm();\n        if (c === GREATER) {\n            const { piTarget } = this;\n            if (piTarget.toLowerCase() === \"xml\") {\n                this.fail(\"the XML declaration must appear at the start of the document.\");\n            }\n            // eslint-disable-next-line no-unused-expressions\n            (_a = this.piHandler) === null || _a === void 0 ? void 0 : _a.call(this, {\n                target: piTarget,\n                body: this.text\n            });\n            this.piTarget = this.text = \"\";\n            this.state = S_TEXT;\n        } else if (c === QUESTION) {\n            // We ran into ?? as part of a processing instruction. We initially took\n            // the first ? as a sign that the PI was ending, but it is not. So we have\n            // to add it to the body but we take the new ? as a sign that the PI is\n            // ending.\n            this.text += \"?\";\n        } else {\n            this.text += `?${String.fromCodePoint(c)}`;\n            this.state = S_PI_BODY;\n        }\n        this.xmlDeclPossible = false;\n    }\n    sXMLDeclNameStart() {\n        const c = this.skipSpaces();\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            // It is valid to go to S_XML_DECL_ENDING from this state.\n            this.state = S_XML_DECL_ENDING;\n            return;\n        }\n        if (c !== EOC) {\n            this.state = S_XML_DECL_NAME;\n            this.name = String.fromCodePoint(c);\n        }\n    }\n    sXMLDeclName() {\n        const c = this.captureTo(XML_DECL_NAME_TERMINATOR);\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            this.state = S_XML_DECL_ENDING;\n            this.name += this.text;\n            this.text = \"\";\n            this.fail(\"XML declaration is incomplete.\");\n            return;\n        }\n        if (!(isS(c) || c === EQUAL)) {\n            return;\n        }\n        this.name += this.text;\n        this.text = \"\";\n        if (!this.xmlDeclExpects.includes(this.name)) {\n            switch(this.name.length){\n                case 0:\n                    this.fail(\"did not expect any more name/value pairs.\");\n                    break;\n                case 1:\n                    this.fail(`expected the name ${this.xmlDeclExpects[0]}.`);\n                    break;\n                default:\n                    this.fail(`expected one of ${this.xmlDeclExpects.join(\", \")}`);\n            }\n        }\n        this.state = c === EQUAL ? S_XML_DECL_VALUE_START : S_XML_DECL_EQ;\n    }\n    sXMLDeclEq() {\n        const c = this.getCodeNorm();\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            this.state = S_XML_DECL_ENDING;\n            this.fail(\"XML declaration is incomplete.\");\n            return;\n        }\n        if (isS(c)) {\n            return;\n        }\n        if (c !== EQUAL) {\n            this.fail(\"value required.\");\n        }\n        this.state = S_XML_DECL_VALUE_START;\n    }\n    sXMLDeclValueStart() {\n        const c = this.getCodeNorm();\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            this.state = S_XML_DECL_ENDING;\n            this.fail(\"XML declaration is incomplete.\");\n            return;\n        }\n        if (isS(c)) {\n            return;\n        }\n        if (!isQuote(c)) {\n            this.fail(\"value must be quoted.\");\n            this.q = SPACE;\n        } else {\n            this.q = c;\n        }\n        this.state = S_XML_DECL_VALUE;\n    }\n    sXMLDeclValue() {\n        const c = this.captureTo([\n            this.q,\n            QUESTION\n        ]);\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            this.state = S_XML_DECL_ENDING;\n            this.text = \"\";\n            this.fail(\"XML declaration is incomplete.\");\n            return;\n        }\n        if (c === EOC) {\n            return;\n        }\n        const value = this.text;\n        this.text = \"\";\n        switch(this.name){\n            case \"version\":\n                {\n                    this.xmlDeclExpects = [\n                        \"encoding\",\n                        \"standalone\"\n                    ];\n                    const version = value;\n                    this.xmlDecl.version = version;\n                    // This is the test specified by XML 1.0 but it is fine for XML 1.1.\n                    if (!/^1\\.[0-9]+$/.test(version)) {\n                        this.fail(\"version number must match /^1\\\\.[0-9]+$/.\");\n                    } else if (!this.opt.forceXMLVersion) {\n                        this.setXMLVersion(version);\n                    }\n                    break;\n                }\n            case \"encoding\":\n                if (!/^[A-Za-z][A-Za-z0-9._-]*$/.test(value)) {\n                    this.fail(\"encoding value must match /^[A-Za-z0-9][A-Za-z0-9._-]*$/.\");\n                }\n                this.xmlDeclExpects = [\n                    \"standalone\"\n                ];\n                this.xmlDecl.encoding = value;\n                break;\n            case \"standalone\":\n                if (value !== \"yes\" && value !== \"no\") {\n                    this.fail('standalone value must match \"yes\" or \"no\".');\n                }\n                this.xmlDeclExpects = [];\n                this.xmlDecl.standalone = value;\n                break;\n            default:\n        }\n        this.name = \"\";\n        this.state = S_XML_DECL_SEPARATOR;\n    }\n    sXMLDeclSeparator() {\n        const c = this.getCodeNorm();\n        // The question mark character is not valid inside any of the XML\n        // declaration name/value pairs.\n        if (c === QUESTION) {\n            // It is valid to go to S_XML_DECL_ENDING from this state.\n            this.state = S_XML_DECL_ENDING;\n            return;\n        }\n        if (!isS(c)) {\n            this.fail(\"whitespace required.\");\n            this.unget();\n        }\n        this.state = S_XML_DECL_NAME_START;\n    }\n    sXMLDeclEnding() {\n        var _a;\n        const c = this.getCodeNorm();\n        if (c === GREATER) {\n            if (this.piTarget !== \"xml\") {\n                this.fail(\"processing instructions are not allowed before root.\");\n            } else if (this.name !== \"version\" && this.xmlDeclExpects.includes(\"version\")) {\n                this.fail(\"XML declaration must contain a version.\");\n            }\n            // eslint-disable-next-line no-unused-expressions\n            (_a = this.xmldeclHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.xmlDecl);\n            this.name = \"\";\n            this.piTarget = this.text = \"\";\n            this.state = S_TEXT;\n        } else {\n            // We got here because the previous character was a ?, but the question\n            // mark character is not valid inside any of the XML declaration\n            // name/value pairs.\n            this.fail(\"The character ? is disallowed anywhere in XML declarations.\");\n        }\n        this.xmlDeclPossible = false;\n    }\n    sOpenTag() {\n        var _a;\n        const c = this.captureNameChars();\n        if (c === EOC) {\n            return;\n        }\n        const tag = this.tag = {\n            name: this.name,\n            attributes: Object.create(null)\n        };\n        this.name = \"\";\n        if (this.xmlnsOpt) {\n            this.topNS = tag.ns = Object.create(null);\n        }\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.openTagStartHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);\n        this.sawRoot = true;\n        if (!this.fragmentOpt && this.closedRoot) {\n            this.fail(\"documents may contain only one root.\");\n        }\n        switch(c){\n            case GREATER:\n                this.openTag();\n                break;\n            case FORWARD_SLASH:\n                this.state = S_OPEN_TAG_SLASH;\n                break;\n            default:\n                if (!isS(c)) {\n                    this.fail(\"disallowed character in tag name.\");\n                }\n                this.state = S_ATTRIB;\n        }\n    }\n    sOpenTagSlash() {\n        if (this.getCode() === GREATER) {\n            this.openSelfClosingTag();\n        } else {\n            this.fail(\"forward-slash in opening tag not followed by >.\");\n            this.state = S_ATTRIB;\n        }\n    }\n    sAttrib() {\n        const c = this.skipSpaces();\n        if (c === EOC) {\n            return;\n        }\n        if (isNameStartChar(c)) {\n            this.unget();\n            this.state = S_ATTRIB_NAME;\n        } else if (c === GREATER) {\n            this.openTag();\n        } else if (c === FORWARD_SLASH) {\n            this.state = S_OPEN_TAG_SLASH;\n        } else {\n            this.fail(\"disallowed character in attribute name.\");\n        }\n    }\n    sAttribName() {\n        const c = this.captureNameChars();\n        if (c === EQUAL) {\n            this.state = S_ATTRIB_VALUE;\n        } else if (isS(c)) {\n            this.state = S_ATTRIB_NAME_SAW_WHITE;\n        } else if (c === GREATER) {\n            this.fail(\"attribute without value.\");\n            this.pushAttrib(this.name, this.name);\n            this.name = this.text = \"\";\n            this.openTag();\n        } else if (c !== EOC) {\n            this.fail(\"disallowed character in attribute name.\");\n        }\n    }\n    sAttribNameSawWhite() {\n        const c = this.skipSpaces();\n        switch(c){\n            case EOC:\n                return;\n            case EQUAL:\n                this.state = S_ATTRIB_VALUE;\n                break;\n            default:\n                this.fail(\"attribute without value.\");\n                // Should we do this???\n                // this.tag.attributes[this.name] = \"\";\n                this.text = \"\";\n                this.name = \"\";\n                if (c === GREATER) {\n                    this.openTag();\n                } else if (isNameStartChar(c)) {\n                    this.unget();\n                    this.state = S_ATTRIB_NAME;\n                } else {\n                    this.fail(\"disallowed character in attribute name.\");\n                    this.state = S_ATTRIB;\n                }\n        }\n    }\n    sAttribValue() {\n        const c = this.getCodeNorm();\n        if (isQuote(c)) {\n            this.q = c;\n            this.state = S_ATTRIB_VALUE_QUOTED;\n        } else if (!isS(c)) {\n            this.fail(\"unquoted attribute value.\");\n            this.state = S_ATTRIB_VALUE_UNQUOTED;\n            this.unget();\n        }\n    }\n    sAttribValueQuoted() {\n        // We deliberately do not use captureTo here. The specialized code we use\n        // here is faster than using captureTo.\n        const { q, chunk } = this;\n        let { i: start } = this;\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            switch(this.getCode()){\n                case q:\n                    this.pushAttrib(this.name, this.text + chunk.slice(start, this.prevI));\n                    this.name = this.text = \"\";\n                    this.q = null;\n                    this.state = S_ATTRIB_VALUE_CLOSED;\n                    return;\n                case AMP:\n                    this.text += chunk.slice(start, this.prevI);\n                    this.state = S_ENTITY;\n                    this.entityReturnState = S_ATTRIB_VALUE_QUOTED;\n                    return;\n                case NL:\n                case NL_LIKE:\n                case TAB:\n                    this.text += `${chunk.slice(start, this.prevI)} `;\n                    start = this.i;\n                    break;\n                case LESS:\n                    this.text += chunk.slice(start, this.prevI);\n                    this.fail(\"disallowed character.\");\n                    return;\n                case EOC:\n                    this.text += chunk.slice(start);\n                    return;\n                default:\n            }\n        }\n    }\n    sAttribValueClosed() {\n        const c = this.getCodeNorm();\n        if (isS(c)) {\n            this.state = S_ATTRIB;\n        } else if (c === GREATER) {\n            this.openTag();\n        } else if (c === FORWARD_SLASH) {\n            this.state = S_OPEN_TAG_SLASH;\n        } else if (isNameStartChar(c)) {\n            this.fail(\"no whitespace between attributes.\");\n            this.unget();\n            this.state = S_ATTRIB_NAME;\n        } else {\n            this.fail(\"disallowed character in attribute name.\");\n        }\n    }\n    sAttribValueUnquoted() {\n        // We don't do anything regarding EOL or space handling for unquoted\n        // attributes. We already have failed by the time we get here, and the\n        // contract that saxes upholds states that upon failure, it is not safe to\n        // rely on the data passed to event handlers (other than\n        // ``onerror``). Passing \"bad\" data is not a problem.\n        const c = this.captureTo(ATTRIB_VALUE_UNQUOTED_TERMINATOR);\n        switch(c){\n            case AMP:\n                this.state = S_ENTITY;\n                this.entityReturnState = S_ATTRIB_VALUE_UNQUOTED;\n                break;\n            case LESS:\n                this.fail(\"disallowed character.\");\n                break;\n            case EOC:\n                break;\n            default:\n                if (this.text.includes(\"]]>\")) {\n                    this.fail('the string \"]]>\" is disallowed in char data.');\n                }\n                this.pushAttrib(this.name, this.text);\n                this.name = this.text = \"\";\n                if (c === GREATER) {\n                    this.openTag();\n                } else {\n                    this.state = S_ATTRIB;\n                }\n        }\n    }\n    sCloseTag() {\n        const c = this.captureNameChars();\n        if (c === GREATER) {\n            this.closeTag();\n        } else if (isS(c)) {\n            this.state = S_CLOSE_TAG_SAW_WHITE;\n        } else if (c !== EOC) {\n            this.fail(\"disallowed character in closing tag.\");\n        }\n    }\n    sCloseTagSawWhite() {\n        switch(this.skipSpaces()){\n            case GREATER:\n                this.closeTag();\n                break;\n            case EOC:\n                break;\n            default:\n                this.fail(\"disallowed character in closing tag.\");\n        }\n    }\n    // END OF STATE ENGINE METHODS\n    handleTextInRoot() {\n        // This is essentially a specialized version of captureTo which is optimized\n        // for performing the ]]> check. A previous version of this code, checked\n        // ``this.text`` for the presence of ]]>. It simplified the code but was\n        // very costly when character data contained a lot of entities to be parsed.\n        //\n        // Since we are using a specialized loop, we also keep track of the presence\n        // of ]]> in text data. The sequence ]]> is forbidden to appear as-is.\n        //\n        let { i: start, forbiddenState } = this;\n        const { chunk, textHandler: handler } = this;\n        // eslint-disable-next-line no-labels, no-restricted-syntax\n        scanLoop: // eslint-disable-next-line no-constant-condition\n        while(true){\n            switch(this.getCode()){\n                case LESS:\n                    {\n                        this.state = S_OPEN_WAKA;\n                        if (handler !== undefined) {\n                            const { text } = this;\n                            const slice = chunk.slice(start, this.prevI);\n                            if (text.length !== 0) {\n                                handler(text + slice);\n                                this.text = \"\";\n                            } else if (slice.length !== 0) {\n                                handler(slice);\n                            }\n                        }\n                        forbiddenState = FORBIDDEN_START;\n                        break scanLoop;\n                    }\n                case AMP:\n                    this.state = S_ENTITY;\n                    this.entityReturnState = S_TEXT;\n                    if (handler !== undefined) {\n                        this.text += chunk.slice(start, this.prevI);\n                    }\n                    forbiddenState = FORBIDDEN_START;\n                    break scanLoop;\n                case CLOSE_BRACKET:\n                    switch(forbiddenState){\n                        case FORBIDDEN_START:\n                            forbiddenState = FORBIDDEN_BRACKET;\n                            break;\n                        case FORBIDDEN_BRACKET:\n                            forbiddenState = FORBIDDEN_BRACKET_BRACKET;\n                            break;\n                        case FORBIDDEN_BRACKET_BRACKET:\n                            break;\n                        default:\n                            throw new Error(\"impossible state\");\n                    }\n                    break;\n                case GREATER:\n                    if (forbiddenState === FORBIDDEN_BRACKET_BRACKET) {\n                        this.fail('the string \"]]>\" is disallowed in char data.');\n                    }\n                    forbiddenState = FORBIDDEN_START;\n                    break;\n                case NL_LIKE:\n                    if (handler !== undefined) {\n                        this.text += `${chunk.slice(start, this.prevI)}\\n`;\n                    }\n                    start = this.i;\n                    forbiddenState = FORBIDDEN_START;\n                    break;\n                case EOC:\n                    if (handler !== undefined) {\n                        this.text += chunk.slice(start);\n                    }\n                    break scanLoop;\n                default:\n                    forbiddenState = FORBIDDEN_START;\n            }\n        }\n        this.forbiddenState = forbiddenState;\n    }\n    handleTextOutsideRoot() {\n        // This is essentially a specialized version of captureTo which is optimized\n        // for a specialized task. We keep track of the presence of non-space\n        // characters in the text since these are errors when appearing outside the\n        // document root element.\n        let { i: start } = this;\n        const { chunk, textHandler: handler } = this;\n        let nonSpace = false;\n        // eslint-disable-next-line no-labels, no-restricted-syntax\n        outRootLoop: // eslint-disable-next-line no-constant-condition\n        while(true){\n            const code = this.getCode();\n            switch(code){\n                case LESS:\n                    {\n                        this.state = S_OPEN_WAKA;\n                        if (handler !== undefined) {\n                            const { text } = this;\n                            const slice = chunk.slice(start, this.prevI);\n                            if (text.length !== 0) {\n                                handler(text + slice);\n                                this.text = \"\";\n                            } else if (slice.length !== 0) {\n                                handler(slice);\n                            }\n                        }\n                        break outRootLoop;\n                    }\n                case AMP:\n                    this.state = S_ENTITY;\n                    this.entityReturnState = S_TEXT;\n                    if (handler !== undefined) {\n                        this.text += chunk.slice(start, this.prevI);\n                    }\n                    nonSpace = true;\n                    break outRootLoop;\n                case NL_LIKE:\n                    if (handler !== undefined) {\n                        this.text += `${chunk.slice(start, this.prevI)}\\n`;\n                    }\n                    start = this.i;\n                    break;\n                case EOC:\n                    if (handler !== undefined) {\n                        this.text += chunk.slice(start);\n                    }\n                    break outRootLoop;\n                default:\n                    if (!isS(code)) {\n                        nonSpace = true;\n                    }\n            }\n        }\n        if (!nonSpace) {\n            return;\n        }\n        // We use the reportedTextBeforeRoot and reportedTextAfterRoot flags\n        // to avoid reporting errors for every single character that is out of\n        // place.\n        if (!this.sawRoot && !this.reportedTextBeforeRoot) {\n            this.fail(\"text data outside of root node.\");\n            this.reportedTextBeforeRoot = true;\n        }\n        if (this.closedRoot && !this.reportedTextAfterRoot) {\n            this.fail(\"text data outside of root node.\");\n            this.reportedTextAfterRoot = true;\n        }\n    }\n    pushAttribNS(name, value) {\n        var _a;\n        const { prefix, local } = this.qname(name);\n        const attr = {\n            name,\n            prefix,\n            local,\n            value\n        };\n        this.attribList.push(attr);\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);\n        if (prefix === \"xmlns\") {\n            const trimmed = value.trim();\n            if (this.currentXMLVersion === \"1.0\" && trimmed === \"\") {\n                this.fail(\"invalid attempt to undefine prefix in XML 1.0\");\n            }\n            this.topNS[local] = trimmed;\n            nsPairCheck(this, local, trimmed);\n        } else if (name === \"xmlns\") {\n            const trimmed = value.trim();\n            this.topNS[\"\"] = trimmed;\n            nsPairCheck(this, \"\", trimmed);\n        }\n    }\n    pushAttribPlain(name, value) {\n        var _a;\n        const attr = {\n            name,\n            value\n        };\n        this.attribList.push(attr);\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);\n    }\n    /**\n     * End parsing. This performs final well-formedness checks and resets the\n     * parser to a clean state.\n     *\n     * @returns this\n     */ end() {\n        var _a, _b;\n        if (!this.sawRoot) {\n            this.fail(\"document must contain a root element.\");\n        }\n        const { tags } = this;\n        while(tags.length > 0){\n            const tag = tags.pop();\n            this.fail(`unclosed tag: ${tag.name}`);\n        }\n        if (this.state !== S_BEGIN && this.state !== S_TEXT) {\n            this.fail(\"unexpected end.\");\n        }\n        const { text } = this;\n        if (text.length !== 0) {\n            // eslint-disable-next-line no-unused-expressions\n            (_a = this.textHandler) === null || _a === void 0 ? void 0 : _a.call(this, text);\n            this.text = \"\";\n        }\n        this._closed = true;\n        // eslint-disable-next-line no-unused-expressions\n        (_b = this.endHandler) === null || _b === void 0 ? void 0 : _b.call(this);\n        this._init();\n        return this;\n    }\n    /**\n     * Resolve a namespace prefix.\n     *\n     * @param prefix The prefix to resolve.\n     *\n     * @returns The namespace URI or ``undefined`` if the prefix is not defined.\n     */ resolve(prefix) {\n        var _a, _b;\n        let uri = this.topNS[prefix];\n        if (uri !== undefined) {\n            return uri;\n        }\n        const { tags } = this;\n        for(let index = tags.length - 1; index >= 0; index--){\n            uri = tags[index].ns[prefix];\n            if (uri !== undefined) {\n                return uri;\n            }\n        }\n        uri = this.ns[prefix];\n        if (uri !== undefined) {\n            return uri;\n        }\n        return (_b = (_a = this.opt).resolvePrefix) === null || _b === void 0 ? void 0 : _b.call(_a, prefix);\n    }\n    /**\n     * Parse a qname into its prefix and local name parts.\n     *\n     * @param name The name to parse\n     *\n     * @returns\n     */ qname(name) {\n        // This is faster than using name.split(\":\").\n        const colon = name.indexOf(\":\");\n        if (colon === -1) {\n            return {\n                prefix: \"\",\n                local: name\n            };\n        }\n        const local = name.slice(colon + 1);\n        const prefix = name.slice(0, colon);\n        if (prefix === \"\" || local === \"\" || local.includes(\":\")) {\n            this.fail(`malformed name: ${name}.`);\n        }\n        return {\n            prefix,\n            local\n        };\n    }\n    processAttribsNS() {\n        var _a;\n        const { attribList } = this;\n        const tag = this.tag;\n        {\n            // add namespace info to tag\n            const { prefix, local } = this.qname(tag.name);\n            tag.prefix = prefix;\n            tag.local = local;\n            const uri = tag.uri = (_a = this.resolve(prefix)) !== null && _a !== void 0 ? _a : \"\";\n            if (prefix !== \"\") {\n                if (prefix === \"xmlns\") {\n                    this.fail('tags may not have \"xmlns\" as prefix.');\n                }\n                if (uri === \"\") {\n                    this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);\n                    tag.uri = prefix;\n                }\n            }\n        }\n        if (attribList.length === 0) {\n            return;\n        }\n        const { attributes } = tag;\n        const seen = new Set();\n        // Note: do not apply default ns to attributes:\n        //   http://www.w3.org/TR/REC-xml-names/#defaulting\n        for (const attr of attribList){\n            const { name, prefix, local } = attr;\n            let uri;\n            let eqname;\n            if (prefix === \"\") {\n                uri = name === \"xmlns\" ? XMLNS_NAMESPACE : \"\";\n                eqname = name;\n            } else {\n                uri = this.resolve(prefix);\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (uri === undefined) {\n                    this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);\n                    uri = prefix;\n                }\n                eqname = `{${uri}}${local}`;\n            }\n            if (seen.has(eqname)) {\n                this.fail(`duplicate attribute: ${eqname}.`);\n            }\n            seen.add(eqname);\n            attr.uri = uri;\n            attributes[name] = attr;\n        }\n        this.attribList = [];\n    }\n    processAttribsPlain() {\n        const { attribList } = this;\n        // eslint-disable-next-line prefer-destructuring\n        const attributes = this.tag.attributes;\n        for (const { name, value } of attribList){\n            if (attributes[name] !== undefined) {\n                this.fail(`duplicate attribute: ${name}.`);\n            }\n            attributes[name] = value;\n        }\n        this.attribList = [];\n    }\n    /**\n     * Handle a complete open tag. This parser code calls this once it has seen\n     * the whole tag. This method checks for well-formeness and then emits\n     * ``onopentag``.\n     */ openTag() {\n        var _a;\n        this.processAttribs();\n        const { tags } = this;\n        const tag = this.tag;\n        tag.isSelfClosing = false;\n        // There cannot be any pending text here due to the onopentagstart that was\n        // necessarily emitted before we get here. So we do not check text.\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);\n        tags.push(tag);\n        this.state = S_TEXT;\n        this.name = \"\";\n    }\n    /**\n     * Handle a complete self-closing tag. This parser code calls this once it has\n     * seen the whole tag. This method checks for well-formeness and then emits\n     * ``onopentag`` and ``onclosetag``.\n     */ openSelfClosingTag() {\n        var _a, _b, _c;\n        this.processAttribs();\n        const { tags } = this;\n        const tag = this.tag;\n        tag.isSelfClosing = true;\n        // There cannot be any pending text here due to the onopentagstart that was\n        // necessarily emitted before we get here. So we do not check text.\n        // eslint-disable-next-line no-unused-expressions\n        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);\n        // eslint-disable-next-line no-unused-expressions\n        (_b = this.closeTagHandler) === null || _b === void 0 ? void 0 : _b.call(this, tag);\n        const top = this.tag = (_c = tags[tags.length - 1]) !== null && _c !== void 0 ? _c : null;\n        if (top === null) {\n            this.closedRoot = true;\n        }\n        this.state = S_TEXT;\n        this.name = \"\";\n    }\n    /**\n     * Handle a complete close tag. This parser code calls this once it has seen\n     * the whole tag. This method checks for well-formeness and then emits\n     * ``onclosetag``.\n     */ closeTag() {\n        const { tags, name } = this;\n        // Our state after this will be S_TEXT, no matter what, and we can clear\n        // tagName now.\n        this.state = S_TEXT;\n        this.name = \"\";\n        if (name === \"\") {\n            this.fail(\"weird empty close tag.\");\n            this.text += \"</>\";\n            return;\n        }\n        const handler = this.closeTagHandler;\n        let l = tags.length;\n        while(l-- > 0){\n            const tag = this.tag = tags.pop();\n            this.topNS = tag.ns;\n            // eslint-disable-next-line no-unused-expressions\n            handler === null || handler === void 0 ? void 0 : handler(tag);\n            if (tag.name === name) {\n                break;\n            }\n            this.fail(\"unexpected close tag.\");\n        }\n        if (l === 0) {\n            this.closedRoot = true;\n        } else if (l < 0) {\n            this.fail(`unmatched closing tag: ${name}.`);\n            this.text += `</${name}>`;\n        }\n    }\n    /**\n     * Resolves an entity. Makes any necessary well-formedness checks.\n     *\n     * @param entity The entity to resolve.\n     *\n     * @returns The parsed entity.\n     */ parseEntity(entity) {\n        // startsWith would be significantly slower for this test.\n        // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n        if (entity[0] !== \"#\") {\n            const defined = this.ENTITIES[entity];\n            if (defined !== undefined) {\n                return defined;\n            }\n            this.fail(this.isName(entity) ? \"undefined entity.\" : \"disallowed character in entity name.\");\n            return `&${entity};`;\n        }\n        let num = NaN;\n        if (entity[1] === \"x\" && /^#x[0-9a-f]+$/i.test(entity)) {\n            num = parseInt(entity.slice(2), 16);\n        } else if (/^#[0-9]+$/.test(entity)) {\n            num = parseInt(entity.slice(1), 10);\n        }\n        // The character reference is required to match the CHAR production.\n        if (!this.isChar(num)) {\n            this.fail(\"malformed character entity.\");\n            return `&${entity};`;\n        }\n        return String.fromCodePoint(num);\n    }\n}\nexports.SaxesParser = SaxesParser; //# sourceMappingURL=saxes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2F4ZXMvc2F4ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsTUFBTUMsbUJBQU9BLENBQUMsMEVBQXNCO0FBQzFDLE1BQU1DLE1BQU1ELG1CQUFPQSxDQUFDLDBFQUFzQjtBQUMxQyxNQUFNRSxRQUFRRixtQkFBT0EsQ0FBQyw4RUFBd0I7QUFDOUMsSUFBSUcsTUFBTUosSUFBSUksR0FBRztBQUNqQixJQUFJQyxXQUFXTCxJQUFJTSxNQUFNO0FBQ3pCLElBQUlDLGtCQUFrQlAsSUFBSU8sZUFBZTtBQUN6QyxJQUFJQyxhQUFhUixJQUFJUSxVQUFVO0FBQy9CLElBQUlDLFNBQVNULElBQUlTLE1BQU07QUFDdkIsSUFBSUMsVUFBVVYsSUFBSVUsT0FBTztBQUN6QixJQUFJQyxXQUFXVCxJQUFJSSxNQUFNO0FBQ3pCLElBQUlNLG9CQUFvQlQsTUFBTVMsaUJBQWlCO0FBQy9DLElBQUlDLGVBQWVWLE1BQU1VLFlBQVk7QUFDckMsSUFBSUMsYUFBYVgsTUFBTVcsVUFBVTtBQUNqQyxNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLFNBQVM7SUFDWCw4REFBOEQ7SUFDOURDLFdBQVc7SUFDWEMsS0FBS0o7SUFDTEssT0FBT0o7QUFDWDtBQUNBLE1BQU1LLGVBQWU7SUFDakIsOERBQThEO0lBQzlESCxXQUFXO0lBQ1hJLEtBQUs7SUFDTEMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLE1BQU07SUFDTkMsTUFBTTtBQUNWO0FBQ0Esb0JBQW9CO0FBQ3BCLE1BQU1DLE1BQU0sQ0FBQztBQUNiLE1BQU1DLFVBQVUsQ0FBQztBQUNqQixNQUFNQyxVQUFVLEdBQUcsaUJBQWlCO0FBQ3BDLE1BQU1DLHFCQUFxQixHQUFHLHFCQUFxQjtBQUNuRCxNQUFNQyxZQUFZLEdBQUcsWUFBWTtBQUNqQyxNQUFNQyxrQkFBa0IsR0FBRyxvQkFB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aUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lc2hlZXQtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL3NheGVzL3NheGVzLmpzPzBmYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlZDUgPSByZXF1aXJlKFwieG1sY2hhcnMveG1sLzEuMC9lZDVcIik7XG5jb25zdCBlZDIgPSByZXF1aXJlKFwieG1sY2hhcnMveG1sLzEuMS9lZDJcIik7XG5jb25zdCBOU2VkMyA9IHJlcXVpcmUoXCJ4bWxjaGFycy94bWxucy8xLjAvZWQzXCIpO1xudmFyIGlzUyA9IGVkNS5pc1M7XG52YXIgaXNDaGFyMTAgPSBlZDUuaXNDaGFyO1xudmFyIGlzTmFtZVN0YXJ0Q2hhciA9IGVkNS5pc05hbWVTdGFydENoYXI7XG52YXIgaXNOYW1lQ2hhciA9IGVkNS5pc05hbWVDaGFyO1xudmFyIFNfTElTVCA9IGVkNS5TX0xJU1Q7XG52YXIgTkFNRV9SRSA9IGVkNS5OQU1FX1JFO1xudmFyIGlzQ2hhcjExID0gZWQyLmlzQ2hhcjtcbnZhciBpc05DTmFtZVN0YXJ0Q2hhciA9IE5TZWQzLmlzTkNOYW1lU3RhcnRDaGFyO1xudmFyIGlzTkNOYW1lQ2hhciA9IE5TZWQzLmlzTkNOYW1lQ2hhcjtcbnZhciBOQ19OQU1FX1JFID0gTlNlZDMuTkNfTkFNRV9SRTtcbmNvbnN0IFhNTF9OQU1FU1BBQ0UgPSBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiO1xuY29uc3QgWE1MTlNfTkFNRVNQQUNFID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiO1xuY29uc3Qgcm9vdE5TID0ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIHhtbDogWE1MX05BTUVTUEFDRSxcbiAgICB4bWxuczogWE1MTlNfTkFNRVNQQUNFLFxufTtcbmNvbnN0IFhNTF9FTlRJVElFUyA9IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBhbXA6IFwiJlwiLFxuICAgIGd0OiBcIj5cIixcbiAgICBsdDogXCI8XCIsXG4gICAgcXVvdDogXCJcXFwiXCIsXG4gICAgYXBvczogXCInXCIsXG59O1xuLy8gRU9DOiBlbmQtb2YtY2h1bmtcbmNvbnN0IEVPQyA9IC0xO1xuY29uc3QgTkxfTElLRSA9IC0yO1xuY29uc3QgU19CRUdJTiA9IDA7IC8vIEluaXRpYWwgc3RhdGUuXG5jb25zdCBTX0JFR0lOX1dISVRFU1BBQ0UgPSAxOyAvLyBsZWFkaW5nIHdoaXRlc3BhY2VcbmNvbnN0IFNfRE9DVFlQRSA9IDI7IC8vIDwhRE9DVFlQRVxuY29uc3QgU19ET0NUWVBFX1FVT1RFID0gMzsgLy8gPCFET0NUWVBFIFwiLy9ibGFoXG5jb25zdCBTX0RURCA9IDQ7IC8vIDwhRE9DVFlQRSBcIi8vYmxhaFwiIFsgLi4uXG5jb25zdCBTX0RURF9RVU9URUQgPSA1OyAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcIiBbIFwiZm9vXG5jb25zdCBTX0RURF9PUEVOX1dBS0EgPSA2O1xuY29uc3QgU19EVERfT1BFTl9XQUtBX0JBTkcgPSA3O1xuY29uc3QgU19EVERfQ09NTUVOVCA9IDg7IC8vIDwhLS1cbmNvbnN0IFNfRFREX0NPTU1FTlRfRU5ESU5HID0gOTsgLy8gPCEtLSBibGFoIC1cbmNvbnN0IFNfRFREX0NPTU1FTlRfRU5ERUQgPSAxMDsgLy8gPCEtLSBibGFoIC0tXG5jb25zdCBTX0RURF9QSSA9IDExOyAvLyA8P1xuY29uc3QgU19EVERfUElfRU5ESU5HID0gMTI7IC8vIDw/aGkgXCJ0aGVyZVwiID9cbmNvbnN0IFNfVEVYVCA9IDEzOyAvLyBnZW5lcmFsIHN0dWZmXG5jb25zdCBTX0VOVElUWSA9IDE0OyAvLyAmYW1wIGFuZCBzdWNoXG5jb25zdCBTX09QRU5fV0FLQSA9IDE1OyAvLyA8XG5jb25zdCBTX09QRU5fV0FLQV9CQU5HID0gMTY7IC8vIDwhLi4uXG5jb25zdCBTX0NPTU1FTlQgPSAxNzsgLy8gPCEtLVxuY29uc3QgU19DT01NRU5UX0VORElORyA9IDE4OyAvLyA8IS0tIGJsYWggLVxuY29uc3QgU19DT01NRU5UX0VOREVEID0gMTk7IC8vIDwhLS0gYmxhaCAtLVxuY29uc3QgU19DREFUQSA9IDIwOyAvLyA8IVtDREFUQVsgc29tZXRoaW5nXG5jb25zdCBTX0NEQVRBX0VORElORyA9IDIxOyAvLyBdXG5jb25zdCBTX0NEQVRBX0VORElOR18yID0gMjI7IC8vIF1dXG5jb25zdCBTX1BJX0ZJUlNUX0NIQVIgPSAyMzsgLy8gPD9oaSwgZmlyc3QgY2hhclxuY29uc3QgU19QSV9SRVNUID0gMjQ7IC8vIDw/aGksIHJlc3Qgb2YgdGhlIG5hbWVcbmNvbnN0IFNfUElfQk9EWSA9IDI1OyAvLyA8P2hpIHRoZXJlXG5jb25zdCBTX1BJX0VORElORyA9IDI2OyAvLyA8P2hpIFwidGhlcmVcIiA/XG5jb25zdCBTX1hNTF9ERUNMX05BTUVfU1RBUlQgPSAyNzsgLy8gPD94bWxcbmNvbnN0IFNfWE1MX0RFQ0xfTkFNRSA9IDI4OyAvLyA8P3htbCBmb29cbmNvbnN0IFNfWE1MX0RFQ0xfRVEgPSAyOTsgLy8gPD94bWwgZm9vPVxuY29uc3QgU19YTUxfREVDTF9WQUxVRV9TVEFSVCA9IDMwOyAvLyA8P3htbCBmb289XG5jb25zdCBTX1hNTF9ERUNMX1ZBTFVFID0gMzE7IC8vIDw/eG1sIGZvbz1cImJhclwiXG5jb25zdCBTX1hNTF9ERUNMX1NFUEFSQVRPUiA9IDMyOyAvLyA8P3htbCBmb289XCJiYXJcIlxuY29uc3QgU19YTUxfREVDTF9FTkRJTkcgPSAzMzsgLy8gPD94bWwgLi4uID9cbmNvbnN0IFNfT1BFTl9UQUcgPSAzNDsgLy8gPHN0cm9uZ1xuY29uc3QgU19PUEVOX1RBR19TTEFTSCA9IDM1OyAvLyA8c3Ryb25nIC9cbmNvbnN0IFNfQVRUUklCID0gMzY7IC8vIDxhXG5jb25zdCBTX0FUVFJJQl9OQU1FID0gMzc7IC8vIDxhIGZvb1xuY29uc3QgU19BVFRSSUJfTkFNRV9TQVdfV0hJVEUgPSAzODsgLy8gPGEgZm9vIF9cbmNvbnN0IFNfQVRUUklCX1ZBTFVFID0gMzk7IC8vIDxhIGZvbz1cbmNvbnN0IFNfQVRUUklCX1ZBTFVFX1FVT1RFRCA9IDQwOyAvLyA8YSBmb289XCJiYXJcbmNvbnN0IFNfQVRUUklCX1ZBTFVFX0NMT1NFRCA9IDQxOyAvLyA8YSBmb289XCJiYXJcIlxuY29uc3QgU19BVFRSSUJfVkFMVUVfVU5RVU9URUQgPSA0MjsgLy8gPGEgZm9vPWJhclxuY29uc3QgU19DTE9TRV9UQUcgPSA0MzsgLy8gPC9hXG5jb25zdCBTX0NMT1NFX1RBR19TQVdfV0hJVEUgPSA0NDsgLy8gPC9hICAgPlxuY29uc3QgVEFCID0gOTtcbmNvbnN0IE5MID0gMHhBO1xuY29uc3QgQ1IgPSAweEQ7XG5jb25zdCBTUEFDRSA9IDB4MjA7XG5jb25zdCBCQU5HID0gMHgyMTtcbmNvbnN0IERRVU9URSA9IDB4MjI7XG5jb25zdCBBTVAgPSAweDI2O1xuY29uc3QgU1FVT1RFID0gMHgyNztcbmNvbnN0IE1JTlVTID0gMHgyRDtcbmNvbnN0IEZPUldBUkRfU0xBU0ggPSAweDJGO1xuY29uc3QgU0VNSUNPTE9OID0gMHgzQjtcbmNvbnN0IExFU1MgPSAweDNDO1xuY29uc3QgRVFVQUwgPSAweDNEO1xuY29uc3QgR1JFQVRFUiA9IDB4M0U7XG5jb25zdCBRVUVTVElPTiA9IDB4M0Y7XG5jb25zdCBPUEVOX0JSQUNLRVQgPSAweDVCO1xuY29uc3QgQ0xPU0VfQlJBQ0tFVCA9IDB4NUQ7XG5jb25zdCBORUwgPSAweDg1O1xuY29uc3QgTFMgPSAweDIwMjg7IC8vIExpbmUgU2VwYXJhdG9yXG5jb25zdCBpc1F1b3RlID0gKGMpID0+IGMgPT09IERRVU9URSB8fCBjID09PSBTUVVPVEU7XG5jb25zdCBRVU9URVMgPSBbRFFVT1RFLCBTUVVPVEVdO1xuY29uc3QgRE9DVFlQRV9URVJNSU5BVE9SID0gWy4uLlFVT1RFUywgT1BFTl9CUkFDS0VULCBHUkVBVEVSXTtcbmNvbnN0IERURF9URVJNSU5BVE9SID0gWy4uLlFVT1RFUywgTEVTUywgQ0xPU0VfQlJBQ0tFVF07XG5jb25zdCBYTUxfREVDTF9OQU1FX1RFUk1JTkFUT1IgPSBbRVFVQUwsIFFVRVNUSU9OLCAuLi5TX0xJU1RdO1xuY29uc3QgQVRUUklCX1ZBTFVFX1VOUVVPVEVEX1RFUk1JTkFUT1IgPSBbLi4uU19MSVNULCBHUkVBVEVSLCBBTVAsIExFU1NdO1xuZnVuY3Rpb24gbnNQYWlyQ2hlY2socGFyc2VyLCBwcmVmaXgsIHVyaSkge1xuICAgIHN3aXRjaCAocHJlZml4KSB7XG4gICAgICAgIGNhc2UgXCJ4bWxcIjpcbiAgICAgICAgICAgIGlmICh1cmkgIT09IFhNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuZmFpbChgeG1sIHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvICR7WE1MX05BTUVTUEFDRX0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInhtbG5zXCI6XG4gICAgICAgICAgICBpZiAodXJpICE9PSBYTUxOU19OQU1FU1BBQ0UpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuZmFpbChgeG1sbnMgcHJlZml4IG11c3QgYmUgYm91bmQgdG8gJHtYTUxOU19OQU1FU1BBQ0V9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICAgIHN3aXRjaCAodXJpKSB7XG4gICAgICAgIGNhc2UgWE1MTlNfTkFNRVNQQUNFOlxuICAgICAgICAgICAgcGFyc2VyLmZhaWwocHJlZml4ID09PSBcIlwiID9cbiAgICAgICAgICAgICAgICBgdGhlIGRlZmF1bHQgbmFtZXNwYWNlIG1heSBub3QgYmUgc2V0IHRvICR7dXJpfS5gIDpcbiAgICAgICAgICAgICAgICBgbWF5IG5vdCBhc3NpZ24gYSBwcmVmaXggKGV2ZW4gXCJ4bWxuc1wiKSB0byB0aGUgVVJJIFxcXG4ke1hNTE5TX05BTUVTUEFDRX0uYCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBYTUxfTkFNRVNQQUNFOlxuICAgICAgICAgICAgc3dpdGNoIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwieG1sXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc2luZ2luZyB0aGUgWE1MIG5hbWVzcGFjZSB0byBcInhtbFwiIGlzIGZpbmUuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmZhaWwoYHRoZSBkZWZhdWx0IG5hbWVzcGFjZSBtYXkgbm90IGJlIHNldCB0byAke3VyaX0uYCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlci5mYWlsKFwibWF5IG5vdCBhc3NpZ24gdGhlIHhtbCBuYW1lc3BhY2UgdG8gYW5vdGhlciBwcmVmaXguXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgfVxufVxuZnVuY3Rpb24gbnNNYXBwaW5nQ2hlY2socGFyc2VyLCBtYXBwaW5nKSB7XG4gICAgZm9yIChjb25zdCBsb2NhbCBvZiBPYmplY3Qua2V5cyhtYXBwaW5nKSkge1xuICAgICAgICBuc1BhaXJDaGVjayhwYXJzZXIsIGxvY2FsLCBtYXBwaW5nW2xvY2FsXSk7XG4gICAgfVxufVxuY29uc3QgaXNOQ05hbWUgPSAobmFtZSkgPT4gTkNfTkFNRV9SRS50ZXN0KG5hbWUpO1xuY29uc3QgaXNOYW1lID0gKG5hbWUpID0+IE5BTUVfUkUudGVzdChuYW1lKTtcbmNvbnN0IEZPUkJJRERFTl9TVEFSVCA9IDA7XG5jb25zdCBGT1JCSURERU5fQlJBQ0tFVCA9IDE7XG5jb25zdCBGT1JCSURERU5fQlJBQ0tFVF9CUkFDS0VUID0gMjtcbi8qKlxuICogVGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGV2ZW50cy5cbiAqL1xuZXhwb3J0cy5FVkVOVFMgPSBbXG4gICAgXCJ4bWxkZWNsXCIsXG4gICAgXCJ0ZXh0XCIsXG4gICAgXCJwcm9jZXNzaW5naW5zdHJ1Y3Rpb25cIixcbiAgICBcImRvY3R5cGVcIixcbiAgICBcImNvbW1lbnRcIixcbiAgICBcIm9wZW50YWdzdGFydFwiLFxuICAgIFwiYXR0cmlidXRlXCIsXG4gICAgXCJvcGVudGFnXCIsXG4gICAgXCJjbG9zZXRhZ1wiLFxuICAgIFwiY2RhdGFcIixcbiAgICBcImVycm9yXCIsXG4gICAgXCJlbmRcIixcbiAgICBcInJlYWR5XCIsXG5dO1xuY29uc3QgRVZFTlRfTkFNRV9UT19IQU5ETEVSX05BTUUgPSB7XG4gICAgeG1sZGVjbDogXCJ4bWxkZWNsSGFuZGxlclwiLFxuICAgIHRleHQ6IFwidGV4dEhhbmRsZXJcIixcbiAgICBwcm9jZXNzaW5naW5zdHJ1Y3Rpb246IFwicGlIYW5kbGVyXCIsXG4gICAgZG9jdHlwZTogXCJkb2N0eXBlSGFuZGxlclwiLFxuICAgIGNvbW1lbnQ6IFwiY29tbWVudEhhbmRsZXJcIixcbiAgICBvcGVudGFnc3RhcnQ6IFwib3BlblRhZ1N0YXJ0SGFuZGxlclwiLFxuICAgIGF0dHJpYnV0ZTogXCJhdHRyaWJ1dGVIYW5kbGVyXCIsXG4gICAgb3BlbnRhZzogXCJvcGVuVGFnSGFuZGxlclwiLFxuICAgIGNsb3NldGFnOiBcImNsb3NlVGFnSGFuZGxlclwiLFxuICAgIGNkYXRhOiBcImNkYXRhSGFuZGxlclwiLFxuICAgIGVycm9yOiBcImVycm9ySGFuZGxlclwiLFxuICAgIGVuZDogXCJlbmRIYW5kbGVyXCIsXG4gICAgcmVhZHk6IFwicmVhZHlIYW5kbGVyXCIsXG59O1xuY2xhc3MgU2F4ZXNQYXJzZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHQgVGhlIHBhcnNlciBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdCkge1xuICAgICAgICB0aGlzLm9wdCA9IG9wdCAhPT0gbnVsbCAmJiBvcHQgIT09IHZvaWQgMCA/IG9wdCA6IHt9O1xuICAgICAgICB0aGlzLmZyYWdtZW50T3B0ID0gISF0aGlzLm9wdC5mcmFnbWVudDtcbiAgICAgICAgY29uc3QgeG1sbnNPcHQgPSB0aGlzLnhtbG5zT3B0ID0gISF0aGlzLm9wdC54bWxucztcbiAgICAgICAgdGhpcy50cmFja1Bvc2l0aW9uID0gdGhpcy5vcHQucG9zaXRpb24gIT09IGZhbHNlO1xuICAgICAgICB0aGlzLmZpbGVOYW1lID0gdGhpcy5vcHQuZmlsZU5hbWU7XG4gICAgICAgIGlmICh4bWxuc09wdCkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gd2UgdXNlIHRvIHBlcmZvcm0gbmFtZSBjaGVja3Mgb24gUElzIGFuZCBlbnRpdGllcy5cbiAgICAgICAgICAgIC8vIFdoZW4gbmFtZXNwYWNlcyBhcmUgdXNlZCwgY29sb25zIGFyZSBub3QgYWxsb3dlZCBpbiBQSSB0YXJnZXQgbmFtZXMgb3JcbiAgICAgICAgICAgIC8vIGVudGl0eSBuYW1lcy4gU28gdGhlIGNoZWNrIGRlcGVuZHMgb24gd2hldGhlciBuYW1lc3BhY2VzIGFyZSB1c2VkLiBTZWU6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1hNTC94bWwtbmFtZXMtMTk5OTAxMTQtZXJyYXRhLmh0bWxcbiAgICAgICAgICAgIC8vIE5FMDhcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICB0aGlzLm5hbWVTdGFydENoZWNrID0gaXNOQ05hbWVTdGFydENoYXI7XG4gICAgICAgICAgICB0aGlzLm5hbWVDaGVjayA9IGlzTkNOYW1lQ2hhcjtcbiAgICAgICAgICAgIHRoaXMuaXNOYW1lID0gaXNOQ05hbWU7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NBdHRyaWJzID0gdGhpcy5wcm9jZXNzQXR0cmlic05TO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICAgICAgdGhpcy5wdXNoQXR0cmliID0gdGhpcy5wdXNoQXR0cmliTlM7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgdGhpcy5ucyA9IE9iamVjdC5hc3NpZ24oeyBfX3Byb3RvX186IG51bGwgfSwgcm9vdE5TKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWwgPSB0aGlzLm9wdC5hZGRpdGlvbmFsTmFtZXNwYWNlcztcbiAgICAgICAgICAgIGlmIChhZGRpdGlvbmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuc01hcHBpbmdDaGVjayh0aGlzLCBhZGRpdGlvbmFsKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMubnMsIGFkZGl0aW9uYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5uYW1lU3RhcnRDaGVjayA9IGlzTmFtZVN0YXJ0Q2hhcjtcbiAgICAgICAgICAgIHRoaXMubmFtZUNoZWNrID0gaXNOYW1lQ2hhcjtcbiAgICAgICAgICAgIHRoaXMuaXNOYW1lID0gaXNOYW1lO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQXR0cmlicyA9IHRoaXMucHJvY2Vzc0F0dHJpYnNQbGFpbjtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgICAgIHRoaXMucHVzaEF0dHJpYiA9IHRoaXMucHVzaEF0dHJpYlBsYWluO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgbWVtYmVycyBpbiB0aGlzIHRhYmxlIG5lZWRzIHRvIGNvcnJlc3BvbmQgdG8gdGhlIHN0YXRlXG4gICAgICAgIC8vIG51bWJlcnMgZ2l2ZW4gdG8gdGhlIHN0YXRlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIG1ldGhvZHMgYmVpbmcgcmVjb3JkZWRcbiAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5zdGF0ZVRhYmxlID0gW1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kICovXG4gICAgICAgICAgICB0aGlzLnNCZWdpbixcbiAgICAgICAgICAgIHRoaXMuc0JlZ2luV2hpdGVzcGFjZSxcbiAgICAgICAgICAgIHRoaXMuc0RvY3R5cGUsXG4gICAgICAgICAgICB0aGlzLnNEb2N0eXBlUXVvdGUsXG4gICAgICAgICAgICB0aGlzLnNEVEQsXG4gICAgICAgICAgICB0aGlzLnNEVERRdW90ZWQsXG4gICAgICAgICAgICB0aGlzLnNEVERPcGVuV2FrYSxcbiAgICAgICAgICAgIHRoaXMuc0RURE9wZW5XYWthQmFuZyxcbiAgICAgICAgICAgIHRoaXMuc0RURENvbW1lbnQsXG4gICAgICAgICAgICB0aGlzLnNEVERDb21tZW50RW5kaW5nLFxuICAgICAgICAgICAgdGhpcy5zRFREQ29tbWVudEVuZGVkLFxuICAgICAgICAgICAgdGhpcy5zRFREUEksXG4gICAgICAgICAgICB0aGlzLnNEVERQSUVuZGluZyxcbiAgICAgICAgICAgIHRoaXMuc1RleHQsXG4gICAgICAgICAgICB0aGlzLnNFbnRpdHksXG4gICAgICAgICAgICB0aGlzLnNPcGVuV2FrYSxcbiAgICAgICAgICAgIHRoaXMuc09wZW5XYWthQmFuZyxcbiAgICAgICAgICAgIHRoaXMuc0NvbW1lbnQsXG4gICAgICAgICAgICB0aGlzLnNDb21tZW50RW5kaW5nLFxuICAgICAgICAgICAgdGhpcy5zQ29tbWVudEVuZGVkLFxuICAgICAgICAgICAgdGhpcy5zQ0RhdGEsXG4gICAgICAgICAgICB0aGlzLnNDRGF0YUVuZGluZyxcbiAgICAgICAgICAgIHRoaXMuc0NEYXRhRW5kaW5nMixcbiAgICAgICAgICAgIHRoaXMuc1BJRmlyc3RDaGFyLFxuICAgICAgICAgICAgdGhpcy5zUElSZXN0LFxuICAgICAgICAgICAgdGhpcy5zUElCb2R5LFxuICAgICAgICAgICAgdGhpcy5zUElFbmRpbmcsXG4gICAgICAgICAgICB0aGlzLnNYTUxEZWNsTmFtZVN0YXJ0LFxuICAgICAgICAgICAgdGhpcy5zWE1MRGVjbE5hbWUsXG4gICAgICAgICAgICB0aGlzLnNYTUxEZWNsRXEsXG4gICAgICAgICAgICB0aGlzLnNYTUxEZWNsVmFsdWVTdGFydCxcbiAgICAgICAgICAgIHRoaXMuc1hNTERlY2xWYWx1ZSxcbiAgICAgICAgICAgIHRoaXMuc1hNTERlY2xTZXBhcmF0b3IsXG4gICAgICAgICAgICB0aGlzLnNYTUxEZWNsRW5kaW5nLFxuICAgICAgICAgICAgdGhpcy5zT3BlblRhZyxcbiAgICAgICAgICAgIHRoaXMuc09wZW5UYWdTbGFzaCxcbiAgICAgICAgICAgIHRoaXMuc0F0dHJpYixcbiAgICAgICAgICAgIHRoaXMuc0F0dHJpYk5hbWUsXG4gICAgICAgICAgICB0aGlzLnNBdHRyaWJOYW1lU2F3V2hpdGUsXG4gICAgICAgICAgICB0aGlzLnNBdHRyaWJWYWx1ZSxcbiAgICAgICAgICAgIHRoaXMuc0F0dHJpYlZhbHVlUXVvdGVkLFxuICAgICAgICAgICAgdGhpcy5zQXR0cmliVmFsdWVDbG9zZWQsXG4gICAgICAgICAgICB0aGlzLnNBdHRyaWJWYWx1ZVVucXVvdGVkLFxuICAgICAgICAgICAgdGhpcy5zQ2xvc2VUYWcsXG4gICAgICAgICAgICB0aGlzLnNDbG9zZVRhZ1Nhd1doaXRlLFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgcGFyc2VyIGlzIGNsb3NlZC4gSWYgYGB0cnVlYGAsIHdhaXQgZm9yXG4gICAgICogdGhlIGBgcmVhZHlgYCBldmVudCB0byB3cml0ZSBhZ2Fpbi5cbiAgICAgKi9cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICAgIH1cbiAgICBfaW5pdCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLm9wZW5XYWthQmFuZyA9IFwiXCI7XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMucGlUYXJnZXQgPSBcIlwiO1xuICAgICAgICB0aGlzLmVudGl0eSA9IFwiXCI7XG4gICAgICAgIHRoaXMucSA9IG51bGw7XG4gICAgICAgIHRoaXMudGFncyA9IFtdO1xuICAgICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgICAgIHRoaXMudG9wTlMgPSBudWxsO1xuICAgICAgICB0aGlzLmNodW5rID0gXCJcIjtcbiAgICAgICAgdGhpcy5jaHVua1Bvc2l0aW9uID0gMDtcbiAgICAgICAgdGhpcy5pID0gMDtcbiAgICAgICAgdGhpcy5wcmV2SSA9IDA7XG4gICAgICAgIHRoaXMuY2FycmllZEZyb21QcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDtcbiAgICAgICAgdGhpcy5hdHRyaWJMaXN0ID0gW107XG4gICAgICAgIC8vIFRoZSBsb2dpYyBpcyBvcmdhbml6ZWQgc28gYXMgdG8gbWluaW1pemUgdGhlIG5lZWQgdG8gY2hlY2tcbiAgICAgICAgLy8gdGhpcy5vcHQuZnJhZ21lbnQgd2hpbGUgcGFyc2luZy5cbiAgICAgICAgY29uc3QgeyBmcmFnbWVudE9wdCB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGZyYWdtZW50T3B0ID8gU19URVhUIDogU19CRUdJTjtcbiAgICAgICAgLy8gV2Ugd2FudCB0aGVzZSB0byBiZSBhbGwgdHJ1ZSBpZiB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgZnJhZ21lbnQuXG4gICAgICAgIHRoaXMucmVwb3J0ZWRUZXh0QmVmb3JlUm9vdCA9IHRoaXMucmVwb3J0ZWRUZXh0QWZ0ZXJSb290ID0gdGhpcy5jbG9zZWRSb290ID1cbiAgICAgICAgICAgIHRoaXMuc2F3Um9vdCA9IGZyYWdtZW50T3B0O1xuICAgICAgICAvLyBBbiBYTUwgZGVjbGFyYXRpb24gaXMgaW50aWFsbHkgcG9zc2libGUgb25seSB3aGVuIHBhcnNpbmcgd2hvbGVcbiAgICAgICAgLy8gZG9jdW1lbnRzLlxuICAgICAgICB0aGlzLnhtbERlY2xQb3NzaWJsZSA9ICFmcmFnbWVudE9wdDtcbiAgICAgICAgdGhpcy54bWxEZWNsRXhwZWN0cyA9IFtcInZlcnNpb25cIl07XG4gICAgICAgIHRoaXMuZW50aXR5UmV0dXJuU3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB7IGRlZmF1bHRYTUxWZXJzaW9uIH0gPSB0aGlzLm9wdDtcbiAgICAgICAgaWYgKGRlZmF1bHRYTUxWZXJzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdC5mb3JjZVhNTFZlcnNpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmb3JjZVhNTFZlcnNpb24gc2V0IGJ1dCBkZWZhdWx0WE1MVmVyc2lvbiBpcyBub3Qgc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdFhNTFZlcnNpb24gPSBcIjEuMFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0WE1MVmVyc2lvbihkZWZhdWx0WE1MVmVyc2lvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb25BdE5ld0xpbmUgPSAwO1xuICAgICAgICB0aGlzLmRvY3R5cGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMueG1sRGVjbCA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVuY29kaW5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdGFuZGFsb25lOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGluZSA9IDE7XG4gICAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICAgICAgdGhpcy5FTlRJVElFUyA9IE9iamVjdC5jcmVhdGUoWE1MX0VOVElUSUVTKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICAoX2EgPSB0aGlzLnJlYWR5SGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzdHJlYW0gcG9zaXRpb24gdGhlIHBhcnNlciBpcyBjdXJyZW50bHkgbG9va2luZyBhdC4gVGhpcyBmaWVsZCBpc1xuICAgICAqIHplcm8tYmFzZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIGZpZWxkIGlzIG5vdCBiYXNlZCBvbiBjb3VudGluZyBVbmljb2RlIGNoYXJhY3RlcnMgYnV0IGlzIHRvIGJlXG4gICAgICogaW50ZXJwcmV0ZWQgYXMgYSBwbGFpbiBpbmRleCBpbnRvIGEgSmF2YVNjcmlwdCBzdHJpbmcuXG4gICAgICovXG4gICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaHVua1Bvc2l0aW9uICsgdGhpcy5pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1uIG51bWJlciBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgcmVhZCBieSB0aGUgcGFyc2VyLiAgKlxuICAgICAqIFRoaXMgZmllbGQgaXMgemVyby1iYXNlZC4gKFRoZSBmaXJzdCBjb2x1bW4gaW4gYSBsaW5lIGlzIDAuKVxuICAgICAqXG4gICAgICogVGhpcyBmaWVsZCByZXBvcnRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgbmV4dCBjaGFyYWN0ZXIgd291bGQgYmUgaW4gdGhlXG4gICAgICogbGluZSBpZiB0aGUgbGluZSB3ZXJlIHJlcHJlc2VudGVkIGFzIGEgSmF2YVNjcmlwdCBzdHJpbmcuICBOb3RlIHRoYXQgdGhpc1xuICAgICAqICpjYW4qIGJlIGRpZmZlcmVudCB0byBhIGNvdW50IGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgKlVuaWNvZGUgY2hhcmFjdGVycypcbiAgICAgKiBkdWUgdG8gaG93IEphdmFTY3JpcHQgaGFuZGxlcyBhc3RyYWwgcGxhbmUgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqIFNlZSBbW2NvbHVtbl1dIGZvciBhIG51bWJlciB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgY291bnQgb2YgVW5pY29kZVxuICAgICAqIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgZ2V0IGNvbHVtbkluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbiAtIHRoaXMucG9zaXRpb25BdE5ld0xpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBhbiBldmVudCBsaXN0ZW5lciBvbiBhbiBldmVudC4gVGhlIHBhcnNlciBzdXBwb3J0cyBvbmUgaGFuZGxlciBwZXJcbiAgICAgKiBldmVudCB0eXBlLiBJZiB5b3UgdHJ5IHRvIHNldCBhbiBldmVudCBoYW5kbGVyIG92ZXIgYW4gZXhpc3RpbmcgaGFuZGxlcixcbiAgICAgKiB0aGUgb2xkIGhhbmRsZXIgaXMgc2lsZW50bHkgb3ZlcndyaXR0ZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGhhbmRsZXIgdG8gc2V0LlxuICAgICAqL1xuICAgIG9uKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdGhpc1tFVkVOVF9OQU1FX1RPX0hBTkRMRVJfTkFNRVtuYW1lXV0gPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnNldCBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcm1hIG5hbWUgVGhlIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIHRvLlxuICAgICAqL1xuICAgIG9mZihuYW1lKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHRoaXNbRVZFTlRfTkFNRV9UT19IQU5ETEVSX05BTUVbbmFtZV1dID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGVycm9yIG9iamVjdC4gVGhlIGVycm9yIG9iamVjdCB3aWxsIGhhdmUgYSBtZXNzYWdlIHRoYXQgY29udGFpbnNcbiAgICAgKiB0aGUgYGBmaWxlTmFtZWBgIG9wdGlvbiBwYXNzZWQgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBwYXJzZXIuIElmIHBvc2l0aW9uXG4gICAgICogdHJhY2tpbmcgd2FzIHR1cm5lZCBvbiwgaXQgd2lsbCBhbHNvIGhhdmUgbGluZSBhbmQgY29sdW1uIG51bWJlclxuICAgICAqIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgZXJyb3IgdG8gcmVwb3J0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgQW4gZXJyb3Igb2JqZWN0IHdpdGggYSBwcm9wZXJseSBmb3JtYXR0ZWQgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBtYWtlRXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBtc2cgPSAoX2EgPSB0aGlzLmZpbGVOYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBpZiAodGhpcy50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBpZiAobXNnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBtc2cgKz0gXCI6XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtc2cgKz0gYCR7dGhpcy5saW5lfToke3RoaXMuY29sdW1ufWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1zZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBtc2cgKz0gXCI6IFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IobXNnICsgbWVzc2FnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcG9ydCBhIHBhcnNpbmcgZXJyb3IuIFRoaXMgbWV0aG9kIGlzIG1hZGUgcHVibGljIHNvIHRoYXQgY2xpZW50IGNvZGUgbWF5XG4gICAgICogY2hlY2sgZm9yIGlzc3VlcyB0aGF0IGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiB0aGlzIHByb2plY3QgYW5kIGNhbiByZXBvcnRcbiAgICAgKiBlcnJvcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgZXJyb3IgdG8gcmVwb3J0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgdGhpc1xuICAgICAqL1xuICAgIGZhaWwobWVzc2FnZSkge1xuICAgICAgICBjb25zdCBlcnIgPSB0aGlzLm1ha2VFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuZXJyb3JIYW5kbGVyO1xuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVyKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgWE1MIGRhdGEgdG8gdGhlIHBhcnNlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBUaGUgWE1MIGRhdGEgdG8gd3JpdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGlzXG4gICAgICovXG4gICAgd3JpdGUoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsKFwiY2Fubm90IHdyaXRlIGFmdGVyIGNsb3NlOyBhc3NpZ24gYW4gb25yZWFkeSBoYW5kbGVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5kID0gZmFsc2U7XG4gICAgICAgIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gV2UgY2Fubm90IHJldHVybiBpbW1lZGlhdGVseSBiZWNhdXNlIGNhcnJpZWRGcm9tUHJldmlvdXMgbWF5IG5lZWRcbiAgICAgICAgICAgIC8vIHByb2Nlc3NpbmcuXG4gICAgICAgICAgICBlbmQgPSB0cnVlO1xuICAgICAgICAgICAgY2h1bmsgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjaHVuayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY2h1bmsgPSBjaHVuay50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGNoZWNrZWQgaWYgcGVyZm9ybWluZyBhIHByZS1kZWNvbXBvc2l0aW9uIG9mIHRoZSBzdHJpbmcgaW50byBhbiBhcnJheVxuICAgICAgICAvLyBvZiBzaW5nbGUgY29tcGxldGUgY2hhcmFjdGVycyAoYGBBcnJheS5mcm9tKGNodW5rKWBgKSB3b3VsZCBiZSBmYXN0ZXJcbiAgICAgICAgLy8gdGhhbiB0aGUgY3VycmVudCByZXBlYXRlZCBjYWxscyB0byBgYGNoYXJDb2RlQXRgYC4gQXMgb2YgQXVndXN0IDIwMTgsIGl0XG4gICAgICAgIC8vIGlzbid0LiAoVGhlcmUgbWF5IGJlIE5vZGUtc3BlY2lmaWMgY29kZSB0aGF0IHdvdWxkIHBlcmZvcm0gZmFzdGVyIHRoYW5cbiAgICAgICAgLy8gYGBBcnJheS5mcm9tYGAgYnV0IGRvbid0IHdhbnQgdG8gYmUgZGVwZW5kZW50IG9uIE5vZGUuKVxuICAgICAgICBpZiAodGhpcy5jYXJyaWVkRnJvbVByZXZpb3VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFRoZSBwcmV2aW91cyBjaHVuayBoYWQgY2hhciB3ZSBtdXN0IGNhcnJ5IG92ZXIuXG4gICAgICAgICAgICBjaHVuayA9IGAke3RoaXMuY2FycmllZEZyb21QcmV2aW91c30ke2NodW5rfWA7XG4gICAgICAgICAgICB0aGlzLmNhcnJpZWRGcm9tUHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpbWl0ID0gY2h1bmsubGVuZ3RoO1xuICAgICAgICBjb25zdCBsYXN0Q29kZSA9IGNodW5rLmNoYXJDb2RlQXQobGltaXQgLSAxKTtcbiAgICAgICAgaWYgKCFlbmQgJiZcbiAgICAgICAgICAgIC8vIEEgdHJhaWxpbmcgQ1Igb3Igc3Vycm9nYXRlIG11c3QgYmUgY2FycmllZCBvdmVyIHRvIHRoZSBuZXh0XG4gICAgICAgICAgICAvLyBjaHVuay5cbiAgICAgICAgICAgIChsYXN0Q29kZSA9PT0gQ1IgfHwgKGxhc3RDb2RlID49IDB4RDgwMCAmJiBsYXN0Q29kZSA8PSAweERCRkYpKSkge1xuICAgICAgICAgICAgLy8gVGhlIGNodW5rIGVuZHMgd2l0aCBhIGNoYXJhY3RlciB0aGF0IG11c3QgYmUgY2FycmllZCBvdmVyLiBXZSBjYW5ub3RcbiAgICAgICAgICAgIC8vIGtub3cgaG93IHRvIGhhbmRsZSBpdCB1bnRpbCB3ZSBnZXQgdGhlIG5leHQgY2h1bmsgb3IgdGhlIGVuZCBvZiB0aGVcbiAgICAgICAgICAgIC8vIHN0cmVhbS4gU28gc2F2ZSBpdCBmb3IgbGF0ZXIuXG4gICAgICAgICAgICB0aGlzLmNhcnJpZWRGcm9tUHJldmlvdXMgPSBjaHVua1tsaW1pdCAtIDFdO1xuICAgICAgICAgICAgbGltaXQtLTtcbiAgICAgICAgICAgIGNodW5rID0gY2h1bmsuc2xpY2UoMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdGVUYWJsZSB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5jaHVuayA9IGNodW5rO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB3aGlsZSAodGhpcy5pIDwgbGltaXQpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBzdGF0ZVRhYmxlW3RoaXMuc3RhdGVdLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaHVua1Bvc2l0aW9uICs9IGxpbWl0O1xuICAgICAgICByZXR1cm4gZW5kID8gdGhpcy5lbmQoKSA6IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBjdXJyZW50IHN0cmVhbS4gUGVyZm9ybSBmaW5hbCB3ZWxsLWZvcm1lZG5lc3MgY2hlY2tzIGFuZCByZXNldFxuICAgICAqIHRoZSBwYXJzZXIgdHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgdGhpc1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZShudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc2luZ2xlIGNvZGUgcG9pbnQgb3V0IG9mIHRoZSBjdXJyZW50IGNodW5rLiBUaGlzIHVwZGF0ZXMgdGhlIGN1cnJlbnRcbiAgICAgKiBwb3NpdGlvbiBpZiB3ZSBkbyBwb3NpdGlvbiB0cmFja2luZy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGhlIGFsZ29yaXRobSB0byB1c2UgZm9yIFhNTCAxLjAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgY2hhcmFjdGVyIHJlYWQuXG4gICAgICovXG4gICAgZ2V0Q29kZTEwKCkge1xuICAgICAgICBjb25zdCB7IGNodW5rLCBpIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLnByZXZJID0gaTtcbiAgICAgICAgLy8gWWVzLCB3ZSBkbyB0aGlzIGluc3RlYWQgb2YgZG9pbmcgdGhpcy5pKysuIERvaW5nIGl0IHRoaXMgd2F5LCB3ZSBkbyBub3RcbiAgICAgICAgLy8gcmVhZCB0aGlzLmkgYWdhaW4sIHdoaWNoIGlzIGEgYml0IGZhc3Rlci5cbiAgICAgICAgdGhpcy5pID0gaSArIDE7XG4gICAgICAgIGlmIChpID49IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIEVPQztcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2luZyBjaGFyQ29kZUF0IGFuZCBoYW5kbGluZyB0aGUgc3Vycm9nYXRlcyBvdXJzZWx2ZXMgaXMgZmFzdGVyXG4gICAgICAgIC8vIHRoYW4gdXNpbmcgY29kZVBvaW50QXQuXG4gICAgICAgIGNvbnN0IGNvZGUgPSBjaHVuay5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB0aGlzLmNvbHVtbisrO1xuICAgICAgICBpZiAoY29kZSA8IDB4RDgwMCkge1xuICAgICAgICAgICAgaWYgKGNvZGUgPj0gU1BBQ0UgfHwgY29kZSA9PT0gVEFCKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIE5MOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXROZXdMaW5lID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5MO1xuICAgICAgICAgICAgICAgIGNhc2UgQ1I6XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG1heSBnZXQgTmFOIGlmIHdlIHJlYWQgcGFzdCB0aGUgZW5kIG9mIHRoZSBjaHVuaywgd2hpY2ggaXMgZmluZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaSArIDEpID09PSBOTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSBcXHJcXG4gc2VxdWVuY2UgaXMgY29udmVydGVkIHRvIFxcbiBzbyB3ZSBoYXZlIHRvIHNraXAgb3ZlciB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgY2hhcmFjdGVyLiBXZSBhbHJlYWR5IGtub3cgaXQgaGFzIGEgc2l6ZSBvZiAxIHNvICsrIGlzIGZpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmkgPSBpICsgMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGEgXFxyIGlzIGp1c3QgY29udmVydGVkIHRvIFxcbiwgc28gd2UgZG9uJ3QgaGF2ZSB0byBza2lwXG4gICAgICAgICAgICAgICAgICAgIC8vIGFoZWFkLlxuICAgICAgICAgICAgICAgICAgICAvLyBJbiBlaXRoZXIgY2FzZSwgXFxyIGJlY29tZXMgXFxuLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXROZXdMaW5lID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5MX0xJS0U7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHRoZW4gY29kZSA8IFNQQUNFIGFuZCBpdCBpcyBub3QgTkwgQ1Igb3IgVEFCLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJkaXNhbGxvd2VkIGNoYXJhY3Rlci5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID4gMHhEQkZGKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBpc0NoYXIxMCB0aGF0IHRha2VzIGludG8gYWNjb3VudFxuICAgICAgICAgICAgLy8gdGhhdCBpbiB0aGlzIGNvbnRleHQgY29kZSA+IDB4REJGRiBhbmQgY29kZSA8PSAweEZGRkYuIFNvIGl0IGRvZXMgbm90XG4gICAgICAgICAgICAvLyB0ZXN0IGNhc2VzIHRoYXQgZG9uJ3QgbmVlZCB0ZXN0aW5nLlxuICAgICAgICAgICAgaWYgKCEoY29kZSA+PSAweEUwMDAgJiYgY29kZSA8PSAweEZGRkQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmluYWwgPSAweDEwMDAwICsgKChjb2RlIC0gMHhEODAwKSAqIDB4NDAwKSArXG4gICAgICAgICAgICAoY2h1bmsuY2hhckNvZGVBdChpICsgMSkgLSAweERDMDApO1xuICAgICAgICB0aGlzLmkgPSBpICsgMjtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgaXNDaGFyMTAgdGhhdCB0YWtlcyBpbnRvIGFjY291bnQgdGhhdCBpblxuICAgICAgICAvLyB0aGlzIGNvbnRleHQgbmVjZXNzYXJpbHkgZmluYWwgPj0gMHgxMDAwMC5cbiAgICAgICAgaWYgKGZpbmFsID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcImRpc2FsbG93ZWQgY2hhcmFjdGVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmluYWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHNpbmdsZSBjb2RlIHBvaW50IG91dCBvZiB0aGUgY3VycmVudCBjaHVuay4gVGhpcyB1cGRhdGVzIHRoZSBjdXJyZW50XG4gICAgICogcG9zaXRpb24gaWYgd2UgZG8gcG9zaXRpb24gdHJhY2tpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRoZSBhbGdvcml0aG0gdG8gdXNlIGZvciBYTUwgMS4xLlxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIGNoYXJhY3RlciByZWFkLlxuICAgICAqL1xuICAgIGdldENvZGUxMSgpIHtcbiAgICAgICAgY29uc3QgeyBjaHVuaywgaSB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5wcmV2SSA9IGk7XG4gICAgICAgIC8vIFllcywgd2UgZG8gdGhpcyBpbnN0ZWFkIG9mIGRvaW5nIHRoaXMuaSsrLiBEb2luZyBpdCB0aGlzIHdheSwgd2UgZG8gbm90XG4gICAgICAgIC8vIHJlYWQgdGhpcy5pIGFnYWluLCB3aGljaCBpcyBhIGJpdCBmYXN0ZXIuXG4gICAgICAgIHRoaXMuaSA9IGkgKyAxO1xuICAgICAgICBpZiAoaSA+PSBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBFT0M7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNpbmcgY2hhckNvZGVBdCBhbmQgaGFuZGxpbmcgdGhlIHN1cnJvZ2F0ZXMgb3Vyc2VsdmVzIGlzIGZhc3RlclxuICAgICAgICAvLyB0aGFuIHVzaW5nIGNvZGVQb2ludEF0LlxuICAgICAgICBjb25zdCBjb2RlID0gY2h1bmsuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdGhpcy5jb2x1bW4rKztcbiAgICAgICAgaWYgKGNvZGUgPCAweEQ4MDApIHtcbiAgICAgICAgICAgIGlmICgoY29kZSA+IDB4MUYgJiYgY29kZSA8IDB4N0YpIHx8IChjb2RlID4gMHg5RiAmJiBjb2RlICE9PSBMUykgfHxcbiAgICAgICAgICAgICAgICBjb2RlID09PSBUQUIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgTkw6IC8vIDB4QVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXROZXdMaW5lID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5MO1xuICAgICAgICAgICAgICAgIGNhc2UgQ1I6IHsgLy8gMHhEXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG1heSBnZXQgTmFOIGlmIHdlIHJlYWQgcGFzdCB0aGUgZW5kIG9mIHRoZSBjaHVuaywgd2hpY2ggaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IGNodW5rLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gTkwgfHwgbmV4dCA9PT0gTkVMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIENSIE5MIG9yIENSIE5FTCBzZXF1ZW5jZSBpcyBjb252ZXJ0ZWQgdG8gTkwgc28gd2UgaGF2ZSB0byBza2lwXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvdmVyIHRoZSBuZXh0IGNoYXJhY3Rlci4gV2UgYWxyZWFkeSBrbm93IGl0IGhhcyBhIHNpemUgb2YgMS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaSA9IGkgKyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgYSBDUiBpcyBqdXN0IGNvbnZlcnRlZCB0byBOTCwgbm8gc2tpcC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogeWVzLCBmYWxsIHRocm91Z2ggKi9cbiAgICAgICAgICAgICAgICBjYXNlIE5FTDogLy8gMHg4NVxuICAgICAgICAgICAgICAgIGNhc2UgTFM6IC8vIE94MjAyOFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXROZXdMaW5lID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5MX0xJS0U7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+IDB4REJGRikge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgaXNDaGFyQW5kTm90UmVzdHJpY3RlZCB0aGF0IHRha2VzIGludG9cbiAgICAgICAgICAgIC8vIGFjY291bnQgdGhhdCBpbiB0aGlzIGNvbnRleHQgY29kZSA+IDB4REJGRiBhbmQgY29kZSA8PSAweEZGRkYuIFNvIGl0XG4gICAgICAgICAgICAvLyBkb2VzIG5vdCB0ZXN0IGNhc2VzIHRoYXQgZG9uJ3QgbmVlZCB0ZXN0aW5nLlxuICAgICAgICAgICAgaWYgKCEoY29kZSA+PSAweEUwMDAgJiYgY29kZSA8PSAweEZGRkQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmluYWwgPSAweDEwMDAwICsgKChjb2RlIC0gMHhEODAwKSAqIDB4NDAwKSArXG4gICAgICAgICAgICAoY2h1bmsuY2hhckNvZGVBdChpICsgMSkgLSAweERDMDApO1xuICAgICAgICB0aGlzLmkgPSBpICsgMjtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgaXNDaGFyQW5kTm90UmVzdHJpY3RlZCB0aGF0IHRha2VzIGludG9cbiAgICAgICAgLy8gYWNjb3VudCB0aGF0IGluIHRoaXMgY29udGV4dCBuZWNlc3NhcmlseSBmaW5hbCA+PSAweDEwMDAwLlxuICAgICAgICBpZiAoZmluYWwgPiAweDEwRkZGRikge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5hbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlrZSBgYGdldENvZGVgYCBidXQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG5vcm1hbGl6ZWQgc28gdGhhdCBgYE5MYGAgaXNcbiAgICAgKiByZXR1cm5lZCBmb3IgYGBOTF9MSUtFYGAuXG4gICAgICovXG4gICAgZ2V0Q29kZU5vcm0oKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGUoKTtcbiAgICAgICAgcmV0dXJuIGMgPT09IE5MX0xJS0UgPyBOTCA6IGM7XG4gICAgfVxuICAgIHVuZ2V0KCkge1xuICAgICAgICB0aGlzLmkgPSB0aGlzLnByZXZJO1xuICAgICAgICB0aGlzLmNvbHVtbi0tO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYXB0dXJlIGNoYXJhY3RlcnMgaW50byBhIGJ1ZmZlciB1bnRpbCBlbmNvdW50ZXJpbmcgb25lIG9mIGEgc2V0IG9mXG4gICAgICogY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFycyBBbiBhcnJheSBvZiBjb2RlcG9pbnRzLiBFbmNvdW50ZXJpbmcgYSBjaGFyYWN0ZXIgaW4gdGhlIGFycmF5XG4gICAgICogZW5kcyB0aGUgY2FwdHVyZS4gKGBgY2hhcnNgYCBtYXkgc2FmZWx5IGNvbnRhaW4gYGBOTGBgLilcbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIGNoYXJhY3RlciBjb2RlIHRoYXQgbWFkZSB0aGUgY2FwdHVyZSBlbmQsIG9yIGBgRU9DYGAgaWYgd2UgaGl0XG4gICAgICogdGhlIGVuZCBvZiB0aGUgY2h1bmsuIFRoZSByZXR1cm4gdmFsdWUgY2Fubm90IGJlIE5MX0xJS0U6IE5MIGlzIHJldHVybmVkXG4gICAgICogaW5zdGVhZC5cbiAgICAgKi9cbiAgICBjYXB0dXJlVG8oY2hhcnMpIHtcbiAgICAgICAgbGV0IHsgaTogc3RhcnQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgY2h1bmsgfSA9IHRoaXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzTkxMaWtlID0gYyA9PT0gTkxfTElLRTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsID0gaXNOTExpa2UgPyBOTCA6IGM7XG4gICAgICAgICAgICBpZiAoZmluYWwgPT09IEVPQyB8fCBjaGFycy5pbmNsdWRlcyhmaW5hbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaW5hbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc05MTGlrZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCArPSBgJHtjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSl9XFxuYDtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYXB0dXJlIGNoYXJhY3RlcnMgaW50byBhIGJ1ZmZlciB1bnRpbCBlbmNvdW50ZXJpbmcgYSBjaGFyYWN0ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhciBUaGUgY29kZXBvaW50IHRoYXQgZW5kcyB0aGUgY2FwdHVyZS4gKipOT1RFIGBgY2hhcmBgIE1BWSBOT1RcbiAgICAgKiBDT05UQUlOIGBgTkxgYC4qKiBQYXNzaW5nIGBgTkxgYCB3aWxsIHJlc3VsdCBpbiBidWdneSBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYGB0cnVlYGAgaWYgd2UgcmFuIGludG8gdGhlIGNoYXJhY3Rlci4gT3RoZXJ3aXNlLCB3ZSByYW4gaW50byB0aGVcbiAgICAgKiBlbmQgb2YgdGhlIGN1cnJlbnQgY2h1bmsuXG4gICAgICovXG4gICAgY2FwdHVyZVRvQ2hhcihjaGFyKSB7XG4gICAgICAgIGxldCB7IGk6IHN0YXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGNodW5rIH0gPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBsZXQgYyA9IHRoaXMuZ2V0Q29kZSgpO1xuICAgICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBOTF9MSUtFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gYCR7Y2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pO1xuICAgICAgICAgICAgICAgICAgICBjID0gTkw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRU9DOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSBjaGFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYXB0dXJlIGNoYXJhY3RlcnMgdGhhdCBzYXRpc2Z5IGBgaXNOYW1lQ2hhcmBgIGludG8gdGhlIGBgbmFtZWBgIGZpZWxkIG9mXG4gICAgICogdGhpcyBwYXJzZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBjaGFyYWN0ZXIgY29kZSB0aGF0IG1hZGUgdGhlIHRlc3QgZmFpbCwgb3IgYGBFT0NgYCBpZiB3ZSBoaXRcbiAgICAgKiB0aGUgZW5kIG9mIHRoZSBjaHVuay4gVGhlIHJldHVybiB2YWx1ZSBjYW5ub3QgYmUgTkxfTElLRTogTkwgaXMgcmV0dXJuZWRcbiAgICAgKiBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGNhcHR1cmVOYW1lQ2hhcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgY2h1bmssIGk6IHN0YXJ0IH0gPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlKCk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gRU9DKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lICs9IGNodW5rLnNsaWNlKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRU9DO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTkwgaXMgbm90IGEgbmFtZSBjaGFyIHNvIHdlIGRvbid0IGhhdmUgdG8gdGVzdCBzcGVjaWZpY2FsbHkgZm9yIGl0LlxuICAgICAgICAgICAgaWYgKCFpc05hbWVDaGFyKGMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA9PT0gTkxfTElLRSA/IE5MIDogYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTa2lwIHdoaXRlIHNwYWNlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIGNoYXJhY3RlciB0aGF0IGVuZGVkIHRoZSBza2lwLCBvciBgYEVPQ2BgIGlmIHdlIGhpdFxuICAgICAqIHRoZSBlbmQgb2YgdGhlIGNodW5rLiBUaGUgcmV0dXJuIHZhbHVlIGNhbm5vdCBiZSBOTF9MSUtFOiBOTCBpcyByZXR1cm5lZFxuICAgICAqIGluc3RlYWQuXG4gICAgICovXG4gICAgc2tpcFNwYWNlcygpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgICAgIGlmIChjID09PSBFT0MgfHwgIWlzUyhjKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNldFhNTFZlcnNpb24odmVyc2lvbikge1xuICAgICAgICB0aGlzLmN1cnJlbnRYTUxWZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgLyogIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZCAqL1xuICAgICAgICBpZiAodmVyc2lvbiA9PT0gXCIxLjBcIikge1xuICAgICAgICAgICAgdGhpcy5pc0NoYXIgPSBpc0NoYXIxMDtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29kZSA9IHRoaXMuZ2V0Q29kZTEwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0NoYXIgPSBpc0NoYXIxMTtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29kZSA9IHRoaXMuZ2V0Q29kZTExO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kICovXG4gICAgfVxuICAgIC8vIFNUQVRFIEVOR0lORSBNRVRIT0RTXG4gICAgLy8gVGhpcyBuZWVkcyB0byBiZSBhIHN0YXRlIHNlcGFyYXRlIGZyb20gU19CRUdJTl9XSElURVNQQUNFIGJlY2F1c2Ugd2Ugd2FudFxuICAgIC8vIHRvIGJlIHN1cmUgbmV2ZXIgdG8gY29tZSBiYWNrIHRvIHRoaXMgc3RhdGUgbGF0ZXIuXG4gICAgc0JlZ2luKCkge1xuICAgICAgICAvLyBXZSBhcmUgZXNzZW50aWFsbHkgcGVla2luZyBhdCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBjaHVuay4gU2luY2VcbiAgICAgICAgLy8gU19CRUdJTiBjYW4gYmUgaW4gZWZmZWN0IG9ubHkgd2hlbiB3ZSBzdGFydCB3b3JraW5nIG9uIHRoZSBmaXJzdCBjaHVuayxcbiAgICAgICAgLy8gdGhlIGluZGV4IGF0IHdoaWNoIHdlIG11c3QgbG9vayBpcyBuZWNlc3NhcmlseSAwLiBOb3RlIGFsc28gdGhhdCB0aGVcbiAgICAgICAgLy8gZm9sbG93aW5nIHRlc3QgZG9lcyBub3QgZGVwZW5kIG9uIGRlY29kaW5nIHN1cnJvZ2F0ZXMuXG4gICAgICAgIC8vIElmIHRoZSBpbml0aWFsIGNoYXJhY3RlciBpcyAweEZFRkYsIGlnbm9yZSBpdC5cbiAgICAgICAgaWYgKHRoaXMuY2h1bmsuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgICAgICAgICB0aGlzLmkrKztcbiAgICAgICAgICAgIHRoaXMuY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQkVHSU5fV0hJVEVTUEFDRTtcbiAgICB9XG4gICAgc0JlZ2luV2hpdGVzcGFjZSgpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBrbm93IHdoZXRoZXIgd2UndmUgZW5jb3VudGVyZWQgc3BhY2VzIG9yIG5vdCBiZWNhdXNlIGFzIHNvb25cbiAgICAgICAgLy8gYXMgd2UgcnVuIGludG8gYSBzcGFjZSwgYW4gWE1MIGRlY2xhcmF0aW9uIGlzIG5vIGxvbmdlciBwb3NzaWJsZS4gUmF0aGVyXG4gICAgICAgIC8vIHRoYW4gc2xvdyBkb3duIHNraXBTcGFjZXMgZXZlbiBpbiBwbGFjZXMgd2hlcmUgd2UgZG9uJ3QgY2FyZSB3aGV0aGVyIGl0XG4gICAgICAgIC8vIHNraXBwZWQgYW55dGhpbmcgb3Igbm90LCB3ZSBjaGVjayB3aGV0aGVyIHByZXZJIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxuICAgICAgICAvLyBpIGZyb20gYmVmb3JlIHdlIHNraXAgc3BhY2VzLlxuICAgICAgICBjb25zdCBpQmVmb3JlID0gdGhpcy5pO1xuICAgICAgICBjb25zdCBjID0gdGhpcy5za2lwU3BhY2VzKCk7XG4gICAgICAgIGlmICh0aGlzLnByZXZJICE9PSBpQmVmb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnhtbERlY2xQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSBMRVNTOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fV0FLQTtcbiAgICAgICAgICAgICAgICAvLyBXZSBjb3VsZCBuYWl2ZWx5IGNhbGwgY2xvc2VUZXh0IGJ1dCBpbiB0aGlzIHN0YXRlLCBpdCBpcyBub3Qgbm9ybWFsXG4gICAgICAgICAgICAgICAgLy8gdG8gaGF2ZSB0ZXh0IGJlIGZpbGxlZCB3aXRoIGFueSBkYXRhLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vLWVtcHR5IHRleHQgYXQgc3RhcnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMudW5nZXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUO1xuICAgICAgICAgICAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0RvY3R5cGUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY2FwdHVyZVRvKERPQ1RZUEVfVEVSTUlOQVRPUik7XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSBHUkVBVEVSOiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMuZG9jdHlwZUhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMudGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdHlwZSA9IHRydWU7IC8vIGp1c3QgcmVtZW1iZXIgdGhhdCB3ZSBzYXcgaXQuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVPQzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpO1xuICAgICAgICAgICAgICAgIGlmIChjID09PSBPUEVOX0JSQUNLRVQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0RPQ1RZUEVfUVVPVEU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucSA9IGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNEb2N0eXBlUXVvdGUoKSB7XG4gICAgICAgIGNvbnN0IHEgPSB0aGlzLnE7XG4gICAgICAgIGlmICh0aGlzLmNhcHR1cmVUb0NoYXIocSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChxKTtcbiAgICAgICAgICAgIHRoaXMucSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19ET0NUWVBFO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNEVEQoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmNhcHR1cmVUbyhEVERfVEVSTUlOQVRPUik7XG4gICAgICAgIGlmIChjID09PSBFT0MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XG4gICAgICAgIGlmIChjID09PSBDTE9TRV9CUkFDS0VUKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19ET0NUWVBFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IExFU1MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURF9PUEVOX1dBS0E7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX1FVT1RFRDtcbiAgICAgICAgICAgIHRoaXMucSA9IGM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0RURFF1b3RlZCgpIHtcbiAgICAgICAgY29uc3QgcSA9IHRoaXMucTtcbiAgICAgICAgaWYgKHRoaXMuY2FwdHVyZVRvQ2hhcihxKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KHEpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREO1xuICAgICAgICAgICAgdGhpcy5xID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzRFRET3Blbldha2EoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGVOb3JtKCk7XG4gICAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIEJBTkc6XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX09QRU5fV0FLQV9CQU5HO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbldha2FCYW5nID0gXCJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUVVFU1RJT046XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX1BJO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19EVEQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0RURE9wZW5XYWthQmFuZygpIHtcbiAgICAgICAgY29uc3QgY2hhciA9IFN0cmluZy5mcm9tQ29kZVBvaW50KHRoaXMuZ2V0Q29kZU5vcm0oKSk7XG4gICAgICAgIGNvbnN0IG93YiA9IHRoaXMub3Blbldha2FCYW5nICs9IGNoYXI7XG4gICAgICAgIHRoaXMudGV4dCArPSBjaGFyO1xuICAgICAgICBpZiAob3diICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IG93YiA9PT0gXCItLVwiID8gU19EVERfQ09NTUVOVCA6IFNfRFREO1xuICAgICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNEVERDb21tZW50KCkge1xuICAgICAgICBpZiAodGhpcy5jYXB0dXJlVG9DaGFyKE1JTlVTKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ICs9IFwiLVwiO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX0NPTU1FTlRfRU5ESU5HO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNEVERDb21tZW50RW5kaW5nKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICB0aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBjID09PSBNSU5VUyA/IFNfRFREX0NPTU1FTlRfRU5ERUQgOiBTX0RURF9DT01NRU5UO1xuICAgIH1cbiAgICBzRFREQ29tbWVudEVuZGVkKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICB0aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XG4gICAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19EVEQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJtYWxmb3JtZWQgY29tbWVudC5cIik7XG4gICAgICAgICAgICAvLyA8IS0tIGJsYWggLS0gYmxvbyAtLT4gd2lsbCBiZSByZWNvcmRlZCBhc1xuICAgICAgICAgICAgLy8gYSBjb21tZW50IG9mIFwiIGJsYWggLS0gYmxvbyBcIlxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX0NPTU1FTlQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0RURFBJKCkge1xuICAgICAgICBpZiAodGhpcy5jYXB0dXJlVG9DaGFyKFFVRVNUSU9OKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ICs9IFwiP1wiO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX1BJX0VORElORztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzRFREUElFbmRpbmcoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGVOb3JtKCk7XG4gICAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTtcbiAgICAgICAgaWYgKGMgPT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzVGV4dCgpIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgZGlkIHRyeSBhIHZlcnNpb24gb2Ygc2F4ZXMgd2hlcmUgdGhlIFNfVEVYVCBzdGF0ZSB3YXMgc3BsaXQgaW4gdHdvXG4gICAgICAgIC8vIHN0YXRlczogb25lIGZvciB0ZXh0IGluc2lkZSB0aGUgcm9vdCBlbGVtZW50LCBhbmQgb25lIGZvciB0ZXh0XG4gICAgICAgIC8vIG91dHNpZGUuIFRoaXMgd2FzIGF2b2lkaW5nIGhhdmluZyB0byB0ZXN0IHRoaXMudGFncy5sZW5ndGggdG8gZGVjaWRlXG4gICAgICAgIC8vIHdoYXQgaW1wbGVtZW50YXRpb24gdG8gYWN0dWFsbHkgdXNlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBQZWZvcm1hbmNlIHRlc3Rpbmcgb24gZ2lnYWJ5dGUtc2l6ZSBmaWxlcyBkaWQgbm90IHNob3cgYW55IGFkdmFudGFnZSB0b1xuICAgICAgICAvLyB1c2luZyB0aGUgdHdvIHN0YXRlcyBzb2x1dGlvbiBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IG9uZS4gQ29udmVyc2VseSwgaXRcbiAgICAgICAgLy8gbWFkZSB0aGUgY29kZSBhIGJpdCBtb3JlIGNvbXBsaWNhdGVkIGVsc2V3aGVyZS4gRm9yIGluc3RhbmNlLCBhIGNvbW1lbnRcbiAgICAgICAgLy8gY2FuIGFwcGVhciBiZWZvcmUgdGhlIHJvb3QgZWxlbWVudCBzbyB3aGVuIGEgY29tbWVudCBlbmRlZCBpdCB3YXNcbiAgICAgICAgLy8gbmVjZXNzYXJ5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHJldHVybiB0byB0aGUgU19URVhUIHN0YXRlIG9yIHRvIHRoZVxuICAgICAgICAvLyBuZXcgdGV4dC1vdXRzaWRlLXJvb3Qgc3RhdGUuXG4gICAgICAgIC8vXG4gICAgICAgIGlmICh0aGlzLnRhZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVRleHRJblJvb3QoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVGV4dE91dHNpZGVSb290KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0VudGl0eSgpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBlc3NlbnRpYWxseSBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgY2FwdHVyZVRvQ2hhcihTRU1JQ09MT04uLi4pXG4gICAgICAgIGxldCB7IGk6IHN0YXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGNodW5rIH0gPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBsb29wOiBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldENvZGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgTkxfTElLRTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdHkgKz0gYCR7Y2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNFTUlDT0xPTjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVudGl0eVJldHVyblN0YXRlIH0gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0eSArIGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGVudGl0eVJldHVyblN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyc2VkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5ID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJlbXB0eSBlbnRpdHkgbmFtZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBcIiY7XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlRW50aXR5KGVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0eSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudGl0eVJldHVyblN0YXRlICE9PSBTX1RFWFQgfHwgdGhpcy50ZXh0SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gcGFyc2VkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5ICs9IGNodW5rLnNsaWNlKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc09wZW5XYWthKCkge1xuICAgICAgICAvLyBSZW1pbmRlcjogYSBzdGF0ZSBoYW5kbGVyIGlzIGNhbGxlZCB3aXRoIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXJcbiAgICAgICAgLy8gYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGNodW5rLiBTbyB0aGUgZmlyc3QgY2FsbCB0byBnZXQgY29kZSBpbnNpZGUgb2ZcbiAgICAgICAgLy8gYSBzdGF0ZSBoYW5kbGVyIGNhbm5vdCByZXR1cm4gYGBFT0NgYC4gVGhhdCdzIHdoeSB3ZSBkb24ndCB0ZXN0XG4gICAgICAgIC8vIGZvciBpdC5cbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZSgpO1xuICAgICAgICAvLyBlaXRoZXIgYSAvLCA/LCAhLCBvciB0ZXh0IGlzIGNvbWluZyBuZXh0LlxuICAgICAgICBpZiAoaXNOYW1lU3RhcnRDaGFyKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19PUEVOX1RBRztcbiAgICAgICAgICAgIHRoaXMudW5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEZPUldBUkRfU0xBU0g6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0NMT1NFX1RBRztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCQU5HOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19PUEVOX1dBS0FfQkFORztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnhtbERlY2xQb3NzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFFVRVNUSU9OOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19QSV9GSVJTVF9DSEFSO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiB0YWcgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfVEVYVDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzT3Blbldha2FCYW5nKCkge1xuICAgICAgICB0aGlzLm9wZW5XYWthQmFuZyArPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLmdldENvZGVOb3JtKCkpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3Blbldha2FCYW5nKSB7XG4gICAgICAgICAgICBjYXNlIFwiW0NEQVRBW1wiOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zYXdSb290ICYmICF0aGlzLnJlcG9ydGVkVGV4dEJlZm9yZVJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwidGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkUm9vdCAmJiAhdGhpcy5yZXBvcnRlZFRleHRBZnRlclJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwidGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRlZFRleHRBZnRlclJvb3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5XYWthQmFuZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLS1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DT01NRU5UO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbldha2FCYW5nID0gXCJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJET0NUWVBFXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRE9DVFlQRTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N0eXBlIHx8IHRoaXMuc2F3Um9vdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJpbmFwcHJvcHJpYXRlbHkgbG9jYXRlZCBkb2N0eXBlIGRlY2xhcmF0aW9uLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyA3IGhhcHBlbnMgdG8gYmUgdGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCBjYW4gcG9zc2libHlcbiAgICAgICAgICAgICAgICAvLyBtYXRjaCBvbmUgb2YgdGhlIGNhc2VzIGFib3ZlLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZW5XYWthQmFuZy5sZW5ndGggPj0gNykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJpbmNvcnJlY3Qgc3ludGF4LlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0NvbW1lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhcHR1cmVUb0NoYXIoTUlOVVMpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DT01NRU5UX0VORElORztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzQ29tbWVudEVuZGluZygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICBpZiAoYyA9PT0gTUlOVVMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0NPTU1FTlRfRU5ERUQ7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAoX2EgPSB0aGlzLmNvbW1lbnRIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0aGlzLnRleHQpO1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBgLSR7U3RyaW5nLmZyb21Db2RlUG9pbnQoYyl9YDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0NPTU1FTlQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0NvbW1lbnRFbmRlZCgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgaWYgKGMgIT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcIm1hbGZvcm1lZCBjb21tZW50LlwiKTtcbiAgICAgICAgICAgIC8vIDwhLS0gYmxhaCAtLSBibG9vIC0tPiB3aWxsIGJlIHJlY29yZGVkIGFzXG4gICAgICAgICAgICAvLyBhIGNvbW1lbnQgb2YgXCIgYmxhaCAtLSBibG9vIFwiXG4gICAgICAgICAgICB0aGlzLnRleHQgKz0gYC0tJHtTdHJpbmcuZnJvbUNvZGVQb2ludChjKX1gO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ09NTUVOVDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0NEYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5jYXB0dXJlVG9DaGFyKENMT1NFX0JSQUNLRVQpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DREFUQV9FTkRJTkc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0NEYXRhRW5kaW5nKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICBpZiAoYyA9PT0gQ0xPU0VfQlJBQ0tFVCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ0RBVEFfRU5ESU5HXzI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHQgKz0gYF0ke1N0cmluZy5mcm9tQ29kZVBvaW50KGMpfWA7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DREFUQTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzQ0RhdGFFbmRpbmcyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGVOb3JtKCk7XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSBHUkVBVEVSOiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMuY2RhdGFIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfVEVYVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgQ0xPU0VfQlJBQ0tFVDpcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gXCJdXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMudGV4dCArPSBgXV0ke1N0cmluZy5mcm9tQ29kZVBvaW50KGMpfWA7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ0RBVEE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0aGlzIHNlcGFyYXRlIHN0YXRlIHRvIGNoZWNrIHRoZSBmaXJzdCBjaGFyYWN0ZXIgZm8gdGhlIHBpIHRhcmdldFxuICAgIC8vIHdpdGggdGhpcy5uYW1lU3RhcnRDaGVjayB3aGljaCBhbGxvd3MgbGVzcyBjaGFyYWN0ZXJzIHRoYW4gdGhpcy5uYW1lQ2hlY2suXG4gICAgc1BJRmlyc3RDaGFyKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICAvLyBUaGlzIGlzIGZpcnN0IGJlY2F1c2UgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIGZpbGUgaXMgd2VsbC1mb3JtZWQgdGhpcyBpc1xuICAgICAgICAvLyB0aGUgYnJhbmNoIHRha2VuLiBXZSBvcHRpbWl6ZSBmb3Igd2VsbC1mb3JtZWRuZXNzLlxuICAgICAgICBpZiAodGhpcy5uYW1lU3RhcnRDaGVjayhjKSkge1xuICAgICAgICAgICAgdGhpcy5waVRhcmdldCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1BJX1JFU1Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUVVFU1RJT04gfHwgaXNTKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJwcm9jZXNzaW5nIGluc3RydWN0aW9uIHdpdGhvdXQgYSB0YXJnZXQuXCIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGMgPT09IFFVRVNUSU9OID8gU19QSV9FTkRJTkcgOiBTX1BJX0JPRFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5hbWUuXCIpO1xuICAgICAgICAgICAgdGhpcy5waVRhcmdldCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1BJX1JFU1Q7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc1BJUmVzdCgpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSBjaGFyYWN0ZXJzIGludG8gYSBwaVRhcmdldCB3aGlsZSBgYHRoaXMubmFtZUNoZWNrYGAgcnVuIG9uIHRoZVxuICAgICAgICAvLyBjaGFyYWN0ZXIgcmVhZCByZXR1cm5zIHRydWUuXG4gICAgICAgIGNvbnN0IHsgY2h1bmssIGk6IHN0YXJ0IH0gPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICAgICAgaWYgKGMgPT09IEVPQykge1xuICAgICAgICAgICAgICAgIHRoaXMucGlUYXJnZXQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5MIGNhbm5vdCBzYXRpc2Z5IHRoaXMubmFtZUNoZWNrIHNvIHdlIGRvbid0IGhhdmUgdG8gdGVzdCBzcGVjaWZpY2FsbHlcbiAgICAgICAgICAgIC8vIGZvciBpdC5cbiAgICAgICAgICAgIGlmICghdGhpcy5uYW1lQ2hlY2soYykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpVGFyZ2V0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1F1ZXN0aW9uID0gYyA9PT0gUVVFU1RJT047XG4gICAgICAgICAgICAgICAgaWYgKGlzUXVlc3Rpb24gfHwgaXNTKGMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBpVGFyZ2V0ID09PSBcInhtbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMueG1sRGVjbFBvc3NpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiYW4gWE1MIGRlY2xhcmF0aW9uIG11c3QgYmUgYXQgdGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gaXNRdWVzdGlvbiA/IFNfWE1MX0RFQ0xfRU5ESU5HIDogU19YTUxfREVDTF9OQU1FX1NUQVJUO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGlzUXVlc3Rpb24gPyBTX1BJX0VORElORyA6IFNfUElfQk9EWTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBuYW1lLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waVRhcmdldCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc1BJQm9keSgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGVOb3JtKCk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gUVVFU1RJT04pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19QSV9FTkRJTkc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNTKGMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHF1ZXN0aW9uIG1hcmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUxcbiAgICAgICAgLy8gZGVjbGFyYXRpb24gbmFtZS92YWx1ZSBwYWlycy5cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jYXB0dXJlVG9DaGFyKFFVRVNUSU9OKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfUElfRU5ESU5HO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNQSUVuZGluZygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICBpZiAoYyA9PT0gR1JFQVRFUikge1xuICAgICAgICAgICAgY29uc3QgeyBwaVRhcmdldCB9ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChwaVRhcmdldC50b0xvd2VyQ2FzZSgpID09PSBcInhtbFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwidGhlIFhNTCBkZWNsYXJhdGlvbiBtdXN0IGFwcGVhciBhdCB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIChfYSA9IHRoaXMucGlIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBwaVRhcmdldCxcbiAgICAgICAgICAgICAgICBib2R5OiB0aGlzLnRleHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGlUYXJnZXQgPSB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfVEVYVDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBRVUVTVElPTikge1xuICAgICAgICAgICAgLy8gV2UgcmFuIGludG8gPz8gYXMgcGFydCBvZiBhIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24uIFdlIGluaXRpYWxseSB0b29rXG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgPyBhcyBhIHNpZ24gdGhhdCB0aGUgUEkgd2FzIGVuZGluZywgYnV0IGl0IGlzIG5vdC4gU28gd2UgaGF2ZVxuICAgICAgICAgICAgLy8gdG8gYWRkIGl0IHRvIHRoZSBib2R5IGJ1dCB3ZSB0YWtlIHRoZSBuZXcgPyBhcyBhIHNpZ24gdGhhdCB0aGUgUEkgaXNcbiAgICAgICAgICAgIC8vIGVuZGluZy5cbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBcIj9cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBgPyR7U3RyaW5nLmZyb21Db2RlUG9pbnQoYyl9YDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1BJX0JPRFk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTtcbiAgICB9XG4gICAgc1hNTERlY2xOYW1lU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLnNraXBTcGFjZXMoKTtcbiAgICAgICAgLy8gVGhlIHF1ZXN0aW9uIG1hcmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUxcbiAgICAgICAgLy8gZGVjbGFyYXRpb24gbmFtZS92YWx1ZSBwYWlycy5cbiAgICAgICAgaWYgKGMgPT09IFFVRVNUSU9OKSB7XG4gICAgICAgICAgICAvLyBJdCBpcyB2YWxpZCB0byBnbyB0byBTX1hNTF9ERUNMX0VORElORyBmcm9tIHRoaXMgc3RhdGUuXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9FTkRJTkc7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgIT09IEVPQykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfTkFNRTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNYTUxEZWNsTmFtZSgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY2FwdHVyZVRvKFhNTF9ERUNMX05BTUVfVEVSTUlOQVRPUik7XG4gICAgICAgIC8vIFRoZSBxdWVzdGlvbiBtYXJrIGNoYXJhY3RlciBpcyBub3QgdmFsaWQgaW5zaWRlIGFueSBvZiB0aGUgWE1MXG4gICAgICAgIC8vIGRlY2xhcmF0aW9uIG5hbWUvdmFsdWUgcGFpcnMuXG4gICAgICAgIGlmIChjID09PSBRVUVTVElPTikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfRU5ESU5HO1xuICAgICAgICAgICAgdGhpcy5uYW1lICs9IHRoaXMudGV4dDtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJYTUwgZGVjbGFyYXRpb24gaXMgaW5jb21wbGV0ZS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoaXNTKGMpIHx8IGMgPT09IEVRVUFMKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSArPSB0aGlzLnRleHQ7XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIGlmICghdGhpcy54bWxEZWNsRXhwZWN0cy5pbmNsdWRlcyh0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMubmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbChcImRpZCBub3QgZXhwZWN0IGFueSBtb3JlIG5hbWUvdmFsdWUgcGFpcnMuXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbChgZXhwZWN0ZWQgdGhlIG5hbWUgJHt0aGlzLnhtbERlY2xFeHBlY3RzWzBdfS5gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKGBleHBlY3RlZCBvbmUgb2YgJHt0aGlzLnhtbERlY2xFeHBlY3RzLmpvaW4oXCIsIFwiKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gYyA9PT0gRVFVQUwgPyBTX1hNTF9ERUNMX1ZBTFVFX1NUQVJUIDogU19YTUxfREVDTF9FUTtcbiAgICB9XG4gICAgc1hNTERlY2xFcSgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgLy8gVGhlIHF1ZXN0aW9uIG1hcmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUxcbiAgICAgICAgLy8gZGVjbGFyYXRpb24gbmFtZS92YWx1ZSBwYWlycy5cbiAgICAgICAgaWYgKGMgPT09IFFVRVNUSU9OKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9FTkRJTkc7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJYTUwgZGVjbGFyYXRpb24gaXMgaW5jb21wbGV0ZS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUyhjKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjICE9PSBFUVVBTCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwidmFsdWUgcmVxdWlyZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTX1hNTF9ERUNMX1ZBTFVFX1NUQVJUO1xuICAgIH1cbiAgICBzWE1MRGVjbFZhbHVlU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENvZGVOb3JtKCk7XG4gICAgICAgIC8vIFRoZSBxdWVzdGlvbiBtYXJrIGNoYXJhY3RlciBpcyBub3QgdmFsaWQgaW5zaWRlIGFueSBvZiB0aGUgWE1MXG4gICAgICAgIC8vIGRlY2xhcmF0aW9uIG5hbWUvdmFsdWUgcGFpcnMuXG4gICAgICAgIGlmIChjID09PSBRVUVTVElPTikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfRU5ESU5HO1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiWE1MIGRlY2xhcmF0aW9uIGlzIGluY29tcGxldGUuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1MoYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcInZhbHVlIG11c3QgYmUgcXVvdGVkLlwiKTtcbiAgICAgICAgICAgIHRoaXMucSA9IFNQQUNFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xID0gYztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9WQUxVRTtcbiAgICB9XG4gICAgc1hNTERlY2xWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY2FwdHVyZVRvKFt0aGlzLnEsIFFVRVNUSU9OXSk7XG4gICAgICAgIC8vIFRoZSBxdWVzdGlvbiBtYXJrIGNoYXJhY3RlciBpcyBub3QgdmFsaWQgaW5zaWRlIGFueSBvZiB0aGUgWE1MXG4gICAgICAgIC8vIGRlY2xhcmF0aW9uIG5hbWUvdmFsdWUgcGFpcnMuXG4gICAgICAgIGlmIChjID09PSBRVUVTVElPTikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfRU5ESU5HO1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcIlhNTCBkZWNsYXJhdGlvbiBpcyBpbmNvbXBsZXRlLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gRU9DKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnRleHQ7XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHN3aXRjaCAodGhpcy5uYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwidmVyc2lvblwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy54bWxEZWNsRXhwZWN0cyA9IFtcImVuY29kaW5nXCIsIFwic3RhbmRhbG9uZVwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy54bWxEZWNsLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHRlc3Qgc3BlY2lmaWVkIGJ5IFhNTCAxLjAgYnV0IGl0IGlzIGZpbmUgZm9yIFhNTCAxLjEuXG4gICAgICAgICAgICAgICAgaWYgKCEvXjFcXC5bMC05XSskLy50ZXN0KHZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbChcInZlcnNpb24gbnVtYmVyIG11c3QgbWF0Y2ggL14xXFxcXC5bMC05XSskLy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdoZW4gZm9yY2VYTUxWZXJzaW9uIGlzIHNldCwgdGhlIFhNTCBkZWNsYXJhdGlvbiBpcyBpZ25vcmVkLlxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLm9wdC5mb3JjZVhNTFZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRYTUxWZXJzaW9uKHZlcnNpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJlbmNvZGluZ1wiOlxuICAgICAgICAgICAgICAgIGlmICghL15bQS1aYS16XVtBLVphLXowLTkuXy1dKiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbChcImVuY29kaW5nIHZhbHVlIG11c3QgbWF0Y2ggXFxcbi9eW0EtWmEtejAtOV1bQS1aYS16MC05Ll8tXSokLy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMueG1sRGVjbEV4cGVjdHMgPSBbXCJzdGFuZGFsb25lXCJdO1xuICAgICAgICAgICAgICAgIHRoaXMueG1sRGVjbC5lbmNvZGluZyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0YW5kYWxvbmVcIjpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IFwieWVzXCIgJiYgdmFsdWUgIT09IFwibm9cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJzdGFuZGFsb25lIHZhbHVlIG11c3QgbWF0Y2ggXFxcInllc1xcXCIgb3IgXFxcIm5vXFxcIi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMueG1sRGVjbEV4cGVjdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnhtbERlY2wuc3RhbmRhbG9uZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcmFpc2UgYW4gZXJyb3IgaGVyZSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IHJhaXNlZCBvbmVcbiAgICAgICAgICAgIC8vIHdoZW4gY2hlY2tpbmcgd2hhdCBuYW1lIHdhcyBleHBlY3RlZC5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9TRVBBUkFUT1I7XG4gICAgfVxuICAgIHNYTUxEZWNsU2VwYXJhdG9yKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5nZXRDb2RlTm9ybSgpO1xuICAgICAgICAvLyBUaGUgcXVlc3Rpb24gbWFyayBjaGFyYWN0ZXIgaXMgbm90IHZhbGlkIGluc2lkZSBhbnkgb2YgdGhlIFhNTFxuICAgICAgICAvLyBkZWNsYXJhdGlvbiBuYW1lL3ZhbHVlIHBhaXJzLlxuICAgICAgICBpZiAoYyA9PT0gUVVFU1RJT04pIHtcbiAgICAgICAgICAgIC8vIEl0IGlzIHZhbGlkIHRvIGdvIHRvIFNfWE1MX0RFQ0xfRU5ESU5HIGZyb20gdGhpcyBzdGF0ZS5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1hNTF9ERUNMX0VORElORztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUyhjKSkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwid2hpdGVzcGFjZSByZXF1aXJlZC5cIik7XG4gICAgICAgICAgICB0aGlzLnVuZ2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfTkFNRV9TVEFSVDtcbiAgICB9XG4gICAgc1hNTERlY2xFbmRpbmcoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgaWYgKGMgPT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBpVGFyZ2V0ICE9PSBcInhtbFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwicHJvY2Vzc2luZyBpbnN0cnVjdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGJlZm9yZSByb290LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubmFtZSAhPT0gXCJ2ZXJzaW9uXCIgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnhtbERlY2xFeHBlY3RzLmluY2x1ZGVzKFwidmVyc2lvblwiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmFpbChcIlhNTCBkZWNsYXJhdGlvbiBtdXN0IGNvbnRhaW4gYSB2ZXJzaW9uLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIChfYSA9IHRoaXMueG1sZGVjbEhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMueG1sRGVjbCk7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5waVRhcmdldCA9IHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgZ290IGhlcmUgYmVjYXVzZSB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIHdhcyBhID8sIGJ1dCB0aGUgcXVlc3Rpb25cbiAgICAgICAgICAgIC8vIG1hcmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUwgZGVjbGFyYXRpb25cbiAgICAgICAgICAgIC8vIG5hbWUvdmFsdWUgcGFpcnMuXG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJUaGUgY2hhcmFjdGVyID8gaXMgZGlzYWxsb3dlZCBhbnl3aGVyZSBpbiBYTUwgZGVjbGFyYXRpb25zLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhtbERlY2xQb3NzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBzT3BlblRhZygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jYXB0dXJlTmFtZUNoYXJzKCk7XG4gICAgICAgIGlmIChjID09PSBFT0MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWcgPSB0aGlzLnRhZyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLnhtbG5zT3B0KSB7XG4gICAgICAgICAgICB0aGlzLnRvcE5TID0gdGFnLm5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgIChfYSA9IHRoaXMub3BlblRhZ1N0YXJ0SGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgdGFnKTtcbiAgICAgICAgdGhpcy5zYXdSb290ID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmZyYWdtZW50T3B0ICYmIHRoaXMuY2xvc2VkUm9vdCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiZG9jdW1lbnRzIG1heSBjb250YWluIG9ubHkgb25lIHJvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSBHUkVBVEVSOlxuICAgICAgICAgICAgICAgIHRoaXMub3BlblRhZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGT1JXQVJEX1NMQVNIOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fVEFHX1NMQVNIO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoIWlzUyhjKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiB0YWcgbmFtZS5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzT3BlblRhZ1NsYXNoKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRDb2RlKCkgPT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgIHRoaXMub3BlblNlbGZDbG9zaW5nVGFnKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJmb3J3YXJkLXNsYXNoIGluIG9wZW5pbmcgdGFnIG5vdCBmb2xsb3dlZCBieSA+LlwiKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzQXR0cmliKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5za2lwU3BhY2VzKCk7XG4gICAgICAgIGlmIChjID09PSBFT0MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYW1lU3RhcnRDaGFyKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnVuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUJfTkFNRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBHUkVBVEVSKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5UYWcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBGT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19PUEVOX1RBR19TTEFTSDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIGF0dHJpYnV0ZSBuYW1lLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzQXR0cmliTmFtZSgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY2FwdHVyZU5hbWVDaGFycygpO1xuICAgICAgICBpZiAoYyA9PT0gRVFVQUwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1MoYykpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9OQU1FX1NBV19XSElURTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBHUkVBVEVSKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJhdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZS5cIik7XG4gICAgICAgICAgICB0aGlzLnB1c2hBdHRyaWIodGhpcy5uYW1lLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMub3BlblRhZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IEVPQykge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gYXR0cmlidXRlIG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNBdHRyaWJOYW1lU2F3V2hpdGUoKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLnNraXBTcGFjZXMoKTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIEVPQzpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIEVRVUFMOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9WQUxVRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiYXR0cmlidXRlIHdpdGhvdXQgdmFsdWUuXCIpO1xuICAgICAgICAgICAgICAgIC8vIFNob3VsZCB3ZSBkbyB0aGlzPz8/XG4gICAgICAgICAgICAgICAgLy8gdGhpcy50YWcuYXR0cmlidXRlc1t0aGlzLm5hbWVdID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuVGFnKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzTmFtZVN0YXJ0Q2hhcihjKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9OQU1FO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gYXR0cmlidXRlIG5hbWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNBdHRyaWJWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHRoaXMucSA9IGM7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUJfVkFMVUVfUVVPVEVEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc1MoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbChcInVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cIik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUJfVkFMVUVfVU5RVU9URUQ7XG4gICAgICAgICAgICB0aGlzLnVuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0F0dHJpYlZhbHVlUXVvdGVkKCkge1xuICAgICAgICAvLyBXZSBkZWxpYmVyYXRlbHkgZG8gbm90IHVzZSBjYXB0dXJlVG8gaGVyZS4gVGhlIHNwZWNpYWxpemVkIGNvZGUgd2UgdXNlXG4gICAgICAgIC8vIGhlcmUgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2FwdHVyZVRvLlxuICAgICAgICBjb25zdCB7IHEsIGNodW5rIH0gPSB0aGlzO1xuICAgICAgICBsZXQgeyBpOiBzdGFydCB9ID0gdGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldENvZGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgcTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoQXR0cmliKHRoaXMubmFtZSwgdGhpcy50ZXh0ICsgY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQVRUUklCX1ZBTFVFX0NMT1NFRDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgQU1QOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19FTlRJVFk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5UmV0dXJuU3RhdGUgPSBTX0FUVFJJQl9WQUxVRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlIE5MOlxuICAgICAgICAgICAgICAgIGNhc2UgTkxfTElLRTpcbiAgICAgICAgICAgICAgICBjYXNlIFRBQjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGAke2NodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKX0gYDtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTEVTUzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNBdHRyaWJWYWx1ZUNsb3NlZCgpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTtcbiAgICAgICAgaWYgKGlzUyhjKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQVRUUklCO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IEdSRUFURVIpIHtcbiAgICAgICAgICAgIHRoaXMub3BlblRhZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IEZPUldBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fVEFHX1NMQVNIO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTmFtZVN0YXJ0Q2hhcihjKSkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwibm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXMuXCIpO1xuICAgICAgICAgICAgdGhpcy51bmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQVRUUklCX05BTUU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiBhdHRyaWJ1dGUgbmFtZS5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0F0dHJpYlZhbHVlVW5xdW90ZWQoKSB7XG4gICAgICAgIC8vIFdlIGRvbid0IGRvIGFueXRoaW5nIHJlZ2FyZGluZyBFT0wgb3Igc3BhY2UgaGFuZGxpbmcgZm9yIHVucXVvdGVkXG4gICAgICAgIC8vIGF0dHJpYnV0ZXMuIFdlIGFscmVhZHkgaGF2ZSBmYWlsZWQgYnkgdGhlIHRpbWUgd2UgZ2V0IGhlcmUsIGFuZCB0aGVcbiAgICAgICAgLy8gY29udHJhY3QgdGhhdCBzYXhlcyB1cGhvbGRzIHN0YXRlcyB0aGF0IHVwb24gZmFpbHVyZSwgaXQgaXMgbm90IHNhZmUgdG9cbiAgICAgICAgLy8gcmVseSBvbiB0aGUgZGF0YSBwYXNzZWQgdG8gZXZlbnQgaGFuZGxlcnMgKG90aGVyIHRoYW5cbiAgICAgICAgLy8gYGBvbmVycm9yYGApLiBQYXNzaW5nIFwiYmFkXCIgZGF0YSBpcyBub3QgYSBwcm9ibGVtLlxuICAgICAgICBjb25zdCBjID0gdGhpcy5jYXB0dXJlVG8oQVRUUklCX1ZBTFVFX1VOUVVPVEVEX1RFUk1JTkFUT1IpO1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgQU1QOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTtcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eVJldHVyblN0YXRlID0gU19BVFRSSUJfVkFMVUVfVU5RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExFU1M6XG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHQuaW5jbHVkZXMoXCJdXT5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwidGhlIHN0cmluZyBcXFwiXV0+XFxcIiBpcyBkaXNhbGxvd2VkIGluIGNoYXIgZGF0YS5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHVzaEF0dHJpYih0aGlzLm5hbWUsIHRoaXMudGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gR1JFQVRFUikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5UYWcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc0Nsb3NlVGFnKCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jYXB0dXJlTmFtZUNoYXJzKCk7XG4gICAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlVGFnKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU19DTE9TRV9UQUdfU0FXX1dISVRFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IEVPQykge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gY2xvc2luZyB0YWcuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNDbG9zZVRhZ1Nhd1doaXRlKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc2tpcFNwYWNlcygpKSB7XG4gICAgICAgICAgICBjYXNlIEdSRUFURVI6XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVRhZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZmFpbChcImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIGNsb3NpbmcgdGFnLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBFTkQgT0YgU1RBVEUgRU5HSU5FIE1FVEhPRFNcbiAgICBoYW5kbGVUZXh0SW5Sb290KCkge1xuICAgICAgICAvLyBUaGlzIGlzIGVzc2VudGlhbGx5IGEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBjYXB0dXJlVG8gd2hpY2ggaXMgb3B0aW1pemVkXG4gICAgICAgIC8vIGZvciBwZXJmb3JtaW5nIHRoZSBdXT4gY2hlY2suIEEgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIGNvZGUsIGNoZWNrZWRcbiAgICAgICAgLy8gYGB0aGlzLnRleHRgYCBmb3IgdGhlIHByZXNlbmNlIG9mIF1dPi4gSXQgc2ltcGxpZmllZCB0aGUgY29kZSBidXQgd2FzXG4gICAgICAgIC8vIHZlcnkgY29zdGx5IHdoZW4gY2hhcmFjdGVyIGRhdGEgY29udGFpbmVkIGEgbG90IG9mIGVudGl0aWVzIHRvIGJlIHBhcnNlZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU2luY2Ugd2UgYXJlIHVzaW5nIGEgc3BlY2lhbGl6ZWQgbG9vcCwgd2UgYWxzbyBrZWVwIHRyYWNrIG9mIHRoZSBwcmVzZW5jZVxuICAgICAgICAvLyBvZiBdXT4gaW4gdGV4dCBkYXRhLiBUaGUgc2VxdWVuY2UgXV0+IGlzIGZvcmJpZGRlbiB0byBhcHBlYXIgYXMtaXMuXG4gICAgICAgIC8vXG4gICAgICAgIGxldCB7IGk6IHN0YXJ0LCBmb3JiaWRkZW5TdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjaHVuaywgdGV4dEhhbmRsZXI6IGhhbmRsZXIgfSA9IHRoaXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIHNjYW5Mb29wOiBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldENvZGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgTEVTUzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU19PUEVOX1dBS0E7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdGV4dCB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsaWNlID0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcih0ZXh0ICsgc2xpY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzbGljZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKHNsaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgICAgICBicmVhayBzY2FuTG9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBBTVA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlSZXR1cm5TdGF0ZSA9IFNfVEVYVDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgICAgICBicmVhayBzY2FuTG9vcDtcbiAgICAgICAgICAgICAgICBjYXNlIENMT1NFX0JSQUNLRVQ6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9yYmlkZGVuU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRk9SQklEREVOX1NUQVJUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmJpZGRlblN0YXRlID0gRk9SQklEREVOX0JSQUNLRVQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZPUkJJRERFTl9CUkFDS0VUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmJpZGRlblN0YXRlID0gRk9SQklEREVOX0JSQUNLRVRfQlJBQ0tFVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRk9SQklEREVOX0JSQUNLRVRfQlJBQ0tFVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW1wb3NzaWJsZSBzdGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdSRUFURVI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JiaWRkZW5TdGF0ZSA9PT0gRk9SQklEREVOX0JSQUNLRVRfQlJBQ0tFVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKFwidGhlIHN0cmluZyBcXFwiXV0+XFxcIiBpcyBkaXNhbGxvd2VkIGluIGNoYXIgZGF0YS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yYmlkZGVuU3RhdGUgPSBGT1JCSURERU5fU1RBUlQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTkxfTElLRTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGAke2NodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKX1cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pO1xuICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFT0M6XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgICAgICBicmVhayBzY2FuTG9vcDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvcmJpZGRlblN0YXRlID0gZm9yYmlkZGVuU3RhdGU7XG4gICAgfVxuICAgIGhhbmRsZVRleHRPdXRzaWRlUm9vdCgpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBlc3NlbnRpYWxseSBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgY2FwdHVyZVRvIHdoaWNoIGlzIG9wdGltaXplZFxuICAgICAgICAvLyBmb3IgYSBzcGVjaWFsaXplZCB0YXNrLiBXZSBrZWVwIHRyYWNrIG9mIHRoZSBwcmVzZW5jZSBvZiBub24tc3BhY2VcbiAgICAgICAgLy8gY2hhcmFjdGVycyBpbiB0aGUgdGV4dCBzaW5jZSB0aGVzZSBhcmUgZXJyb3JzIHdoZW4gYXBwZWFyaW5nIG91dHNpZGUgdGhlXG4gICAgICAgIC8vIGRvY3VtZW50IHJvb3QgZWxlbWVudC5cbiAgICAgICAgbGV0IHsgaTogc3RhcnQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgY2h1bmssIHRleHRIYW5kbGVyOiBoYW5kbGVyIH0gPSB0aGlzO1xuICAgICAgICBsZXQgbm9uU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscywgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgb3V0Um9vdExvb3A6IFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5nZXRDb2RlKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIExFU1M6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfT1BFTl9XQUtBO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHRleHQgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbGljZSA9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIodGV4dCArIHNsaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2xpY2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihzbGljZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgICAgICBicmVhayBvdXRSb290TG9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBBTVA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlSZXR1cm5TdGF0ZSA9IFNfVEVYVDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub25TcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0Um9vdExvb3A7XG4gICAgICAgICAgICAgICAgY2FzZSBOTF9MSUtFOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gYCR7Y2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRU9DOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0Um9vdExvb3A7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1MoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vblNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbm9uU3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB1c2UgdGhlIHJlcG9ydGVkVGV4dEJlZm9yZVJvb3QgYW5kIHJlcG9ydGVkVGV4dEFmdGVyUm9vdCBmbGFnc1xuICAgICAgICAvLyB0byBhdm9pZCByZXBvcnRpbmcgZXJyb3JzIGZvciBldmVyeSBzaW5nbGUgY2hhcmFjdGVyIHRoYXQgaXMgb3V0IG9mXG4gICAgICAgIC8vIHBsYWNlLlxuICAgICAgICBpZiAoIXRoaXMuc2F3Um9vdCAmJiAhdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290KSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJ0ZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuXCIpO1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWRSb290ICYmICF0aGlzLnJlcG9ydGVkVGV4dEFmdGVyUm9vdCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwidGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLlwiKTtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0ZWRUZXh0QWZ0ZXJSb290ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdXNoQXR0cmliTlMobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IHByZWZpeCwgbG9jYWwgfSA9IHRoaXMucW5hbWUobmFtZSk7XG4gICAgICAgIGNvbnN0IGF0dHIgPSB7IG5hbWUsIHByZWZpeCwgbG9jYWwsIHZhbHVlIH07XG4gICAgICAgIHRoaXMuYXR0cmliTGlzdC5wdXNoKGF0dHIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgIChfYSA9IHRoaXMuYXR0cmlidXRlSGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgYXR0cik7XG4gICAgICAgIGlmIChwcmVmaXggPT09IFwieG1sbnNcIikge1xuICAgICAgICAgICAgY29uc3QgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRYTUxWZXJzaW9uID09PSBcIjEuMFwiICYmIHRyaW1tZWQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJpbnZhbGlkIGF0dGVtcHQgdG8gdW5kZWZpbmUgcHJlZml4IGluIFhNTCAxLjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRvcE5TW2xvY2FsXSA9IHRyaW1tZWQ7XG4gICAgICAgICAgICBuc1BhaXJDaGVjayh0aGlzLCBsb2NhbCwgdHJpbW1lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gXCJ4bWxuc1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0cmltbWVkID0gdmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgdGhpcy50b3BOU1tcIlwiXSA9IHRyaW1tZWQ7XG4gICAgICAgICAgICBuc1BhaXJDaGVjayh0aGlzLCBcIlwiLCB0cmltbWVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdXNoQXR0cmliUGxhaW4obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBhdHRyID0geyBuYW1lLCB2YWx1ZSB9O1xuICAgICAgICB0aGlzLmF0dHJpYkxpc3QucHVzaChhdHRyKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICAoX2EgPSB0aGlzLmF0dHJpYnV0ZUhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGF0dHIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmQgcGFyc2luZy4gVGhpcyBwZXJmb3JtcyBmaW5hbCB3ZWxsLWZvcm1lZG5lc3MgY2hlY2tzIGFuZCByZXNldHMgdGhlXG4gICAgICogcGFyc2VyIHRvIGEgY2xlYW4gc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGlzXG4gICAgICovXG4gICAgZW5kKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIXRoaXMuc2F3Um9vdCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwiZG9jdW1lbnQgbXVzdCBjb250YWluIGEgcm9vdCBlbGVtZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRhZ3MgfSA9IHRoaXM7XG4gICAgICAgIHdoaWxlICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRhZ3MucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmZhaWwoYHVuY2xvc2VkIHRhZzogJHt0YWcubmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRoaXMuc3RhdGUgIT09IFNfQkVHSU4pICYmICh0aGlzLnN0YXRlICE9PSBTX1RFWFQpKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJ1bmV4cGVjdGVkIGVuZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB0ZXh0IH0gPSB0aGlzO1xuICAgICAgICBpZiAodGV4dC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIChfYSA9IHRoaXMudGV4dEhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRleHQpO1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgIChfYiA9IHRoaXMuZW5kSGFuZGxlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgYSBuYW1lc3BhY2UgcHJlZml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHByZWZpeCBUaGUgcHJlZml4IHRvIHJlc29sdmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbmFtZXNwYWNlIFVSSSBvciBgYHVuZGVmaW5lZGBgIGlmIHRoZSBwcmVmaXggaXMgbm90IGRlZmluZWQuXG4gICAgICovXG4gICAgcmVzb2x2ZShwcmVmaXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHVyaSA9IHRoaXMudG9wTlNbcHJlZml4XTtcbiAgICAgICAgaWYgKHVyaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdGFncyB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSB0YWdzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgICAgIHVyaSA9IHRhZ3NbaW5kZXhdLm5zW3ByZWZpeF07XG4gICAgICAgICAgICBpZiAodXJpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVyaSA9IHRoaXMubnNbcHJlZml4XTtcbiAgICAgICAgaWYgKHVyaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLm9wdCkucmVzb2x2ZVByZWZpeCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHByZWZpeCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIGEgcW5hbWUgaW50byBpdHMgcHJlZml4IGFuZCBsb2NhbCBuYW1lIHBhcnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdG8gcGFyc2VcbiAgICAgKlxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcW5hbWUobmFtZSkge1xuICAgICAgICAvLyBUaGlzIGlzIGZhc3RlciB0aGFuIHVzaW5nIG5hbWUuc3BsaXQoXCI6XCIpLlxuICAgICAgICBjb25zdCBjb2xvbiA9IG5hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgICAgIGlmIChjb2xvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHByZWZpeDogXCJcIiwgbG9jYWw6IG5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhbCA9IG5hbWUuc2xpY2UoY29sb24gKyAxKTtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gbmFtZS5zbGljZSgwLCBjb2xvbik7XG4gICAgICAgIGlmIChwcmVmaXggPT09IFwiXCIgfHwgbG9jYWwgPT09IFwiXCIgfHwgbG9jYWwuaW5jbHVkZXMoXCI6XCIpKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoYG1hbGZvcm1lZCBuYW1lOiAke25hbWV9LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgbG9jYWwgfTtcbiAgICB9XG4gICAgcHJvY2Vzc0F0dHJpYnNOUygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGF0dHJpYkxpc3QgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudGFnO1xuICAgICAgICB7XG4gICAgICAgICAgICAvLyBhZGQgbmFtZXNwYWNlIGluZm8gdG8gdGFnXG4gICAgICAgICAgICBjb25zdCB7IHByZWZpeCwgbG9jYWwgfSA9IHRoaXMucW5hbWUodGFnLm5hbWUpO1xuICAgICAgICAgICAgdGFnLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgICAgIHRhZy5sb2NhbCA9IGxvY2FsO1xuICAgICAgICAgICAgY29uc3QgdXJpID0gdGFnLnVyaSA9IChfYSA9IHRoaXMucmVzb2x2ZShwcmVmaXgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICAgICAgaWYgKHByZWZpeCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGlmIChwcmVmaXggPT09IFwieG1sbnNcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwoXCJ0YWdzIG1heSBub3QgaGF2ZSBcXFwieG1sbnNcXFwiIGFzIHByZWZpeC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cmkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKGB1bmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICR7SlNPTi5zdHJpbmdpZnkocHJlZml4KX0uYCk7XG4gICAgICAgICAgICAgICAgICAgIHRhZy51cmkgPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYXR0cmlidXRlcyB9ID0gdGFnO1xuICAgICAgICBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICAgICAgICAvLyBOb3RlOiBkbyBub3QgYXBwbHkgZGVmYXVsdCBucyB0byBhdHRyaWJ1dGVzOlxuICAgICAgICAvLyAgIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwtbmFtZXMvI2RlZmF1bHRpbmdcbiAgICAgICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJpYkxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgcHJlZml4LCBsb2NhbCB9ID0gYXR0cjtcbiAgICAgICAgICAgIGxldCB1cmk7XG4gICAgICAgICAgICBsZXQgZXFuYW1lO1xuICAgICAgICAgICAgaWYgKHByZWZpeCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHVyaSA9IG5hbWUgPT09IFwieG1sbnNcIiA/IFhNTE5TX05BTUVTUEFDRSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgZXFuYW1lID0gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVyaSA9IHRoaXMucmVzb2x2ZShwcmVmaXgpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYW55IGF0dHJpYnV0ZXMgd2l0aCBhbiB1bmRlZmluZWQgbmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgIC8vIHRoZW4gZmFpbCBvbiB0aGVtIG5vdy5cbiAgICAgICAgICAgICAgICBpZiAodXJpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKGB1bmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICR7SlNPTi5zdHJpbmdpZnkocHJlZml4KX0uYCk7XG4gICAgICAgICAgICAgICAgICAgIHVyaSA9IHByZWZpeDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXFuYW1lID0gYHske3VyaX19JHtsb2NhbH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKGVxbmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZhaWwoYGR1cGxpY2F0ZSBhdHRyaWJ1dGU6ICR7ZXFuYW1lfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW4uYWRkKGVxbmFtZSk7XG4gICAgICAgICAgICBhdHRyLnVyaSA9IHVyaTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gPSBhdHRyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmliTGlzdCA9IFtdO1xuICAgIH1cbiAgICBwcm9jZXNzQXR0cmlic1BsYWluKCkge1xuICAgICAgICBjb25zdCB7IGF0dHJpYkxpc3QgfSA9IHRoaXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy50YWcuYXR0cmlidXRlcztcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUsIHZhbHVlIH0gb2YgYXR0cmliTGlzdCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmFpbChgZHVwbGljYXRlIGF0dHJpYnV0ZTogJHtuYW1lfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYkxpc3QgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGEgY29tcGxldGUgb3BlbiB0YWcuIFRoaXMgcGFyc2VyIGNvZGUgY2FsbHMgdGhpcyBvbmNlIGl0IGhhcyBzZWVuXG4gICAgICogdGhlIHdob2xlIHRhZy4gVGhpcyBtZXRob2QgY2hlY2tzIGZvciB3ZWxsLWZvcm1lbmVzcyBhbmQgdGhlbiBlbWl0c1xuICAgICAqIGBgb25vcGVudGFnYGAuXG4gICAgICovXG4gICAgb3BlblRhZygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnByb2Nlc3NBdHRyaWJzKCk7XG4gICAgICAgIGNvbnN0IHsgdGFncyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdGFnID0gdGhpcy50YWc7XG4gICAgICAgIHRhZy5pc1NlbGZDbG9zaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIFRoZXJlIGNhbm5vdCBiZSBhbnkgcGVuZGluZyB0ZXh0IGhlcmUgZHVlIHRvIHRoZSBvbm9wZW50YWdzdGFydCB0aGF0IHdhc1xuICAgICAgICAvLyBuZWNlc3NhcmlseSBlbWl0dGVkIGJlZm9yZSB3ZSBnZXQgaGVyZS4gU28gd2UgZG8gbm90IGNoZWNrIHRleHQuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgKF9hID0gdGhpcy5vcGVuVGFnSGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgdGFnKTtcbiAgICAgICAgdGFncy5wdXNoKHRhZyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhIGNvbXBsZXRlIHNlbGYtY2xvc2luZyB0YWcuIFRoaXMgcGFyc2VyIGNvZGUgY2FsbHMgdGhpcyBvbmNlIGl0IGhhc1xuICAgICAqIHNlZW4gdGhlIHdob2xlIHRhZy4gVGhpcyBtZXRob2QgY2hlY2tzIGZvciB3ZWxsLWZvcm1lbmVzcyBhbmQgdGhlbiBlbWl0c1xuICAgICAqIGBgb25vcGVudGFnYGAgYW5kIGBgb25jbG9zZXRhZ2BgLlxuICAgICAqL1xuICAgIG9wZW5TZWxmQ2xvc2luZ1RhZygpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMucHJvY2Vzc0F0dHJpYnMoKTtcbiAgICAgICAgY29uc3QgeyB0YWdzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWcgPSB0aGlzLnRhZztcbiAgICAgICAgdGFnLmlzU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgICAgICAvLyBUaGVyZSBjYW5ub3QgYmUgYW55IHBlbmRpbmcgdGV4dCBoZXJlIGR1ZSB0byB0aGUgb25vcGVudGFnc3RhcnQgdGhhdCB3YXNcbiAgICAgICAgLy8gbmVjZXNzYXJpbHkgZW1pdHRlZCBiZWZvcmUgd2UgZ2V0IGhlcmUuIFNvIHdlIGRvIG5vdCBjaGVjayB0ZXh0LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgIChfYSA9IHRoaXMub3BlblRhZ0hhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRhZyk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgKF9iID0gdGhpcy5jbG9zZVRhZ0hhbmRsZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHRoaXMsIHRhZyk7XG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMudGFnID0gKF9jID0gdGFnc1t0YWdzLmxlbmd0aCAtIDFdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBudWxsO1xuICAgICAgICBpZiAodG9wID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZFJvb3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhIGNvbXBsZXRlIGNsb3NlIHRhZy4gVGhpcyBwYXJzZXIgY29kZSBjYWxscyB0aGlzIG9uY2UgaXQgaGFzIHNlZW5cbiAgICAgKiB0aGUgd2hvbGUgdGFnLiBUaGlzIG1ldGhvZCBjaGVja3MgZm9yIHdlbGwtZm9ybWVuZXNzIGFuZCB0aGVuIGVtaXRzXG4gICAgICogYGBvbmNsb3NldGFnYGAuXG4gICAgICovXG4gICAgY2xvc2VUYWcoKSB7XG4gICAgICAgIGNvbnN0IHsgdGFncywgbmFtZSB9ID0gdGhpcztcbiAgICAgICAgLy8gT3VyIHN0YXRlIGFmdGVyIHRoaXMgd2lsbCBiZSBTX1RFWFQsIG5vIG1hdHRlciB3aGF0LCBhbmQgd2UgY2FuIGNsZWFyXG4gICAgICAgIC8vIHRhZ05hbWUgbm93LlxuICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICBpZiAobmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy5mYWlsKFwid2VpcmQgZW1wdHkgY2xvc2UgdGFnLlwiKTtcbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBcIjwvPlwiO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNsb3NlVGFnSGFuZGxlcjtcbiAgICAgICAgbGV0IGwgPSB0YWdzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGwtLSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudGFnID0gdGFncy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMudG9wTlMgPSB0YWcubnM7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgICAgICBoYW5kbGVyID09PSBudWxsIHx8IGhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXIodGFnKTtcbiAgICAgICAgICAgIGlmICh0YWcubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mYWlsKFwidW5leHBlY3RlZCBjbG9zZSB0YWcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZFJvb3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGwgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoYHVubWF0Y2hlZCBjbG9zaW5nIHRhZzogJHtuYW1lfS5gKTtcbiAgICAgICAgICAgIHRoaXMudGV4dCArPSBgPC8ke25hbWV9PmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYW4gZW50aXR5LiBNYWtlcyBhbnkgbmVjZXNzYXJ5IHdlbGwtZm9ybWVkbmVzcyBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW50aXR5IFRoZSBlbnRpdHkgdG8gcmVzb2x2ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZW50aXR5LlxuICAgICAqL1xuICAgIHBhcnNlRW50aXR5KGVudGl0eSkge1xuICAgICAgICAvLyBzdGFydHNXaXRoIHdvdWxkIGJlIHNpZ25pZmljYW50bHkgc2xvd2VyIGZvciB0aGlzIHRlc3QuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXN0cmluZy1zdGFydHMtZW5kcy13aXRoXG4gICAgICAgIGlmIChlbnRpdHlbMF0gIT09IFwiI1wiKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkID0gdGhpcy5FTlRJVElFU1tlbnRpdHldO1xuICAgICAgICAgICAgaWYgKGRlZmluZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mYWlsKHRoaXMuaXNOYW1lKGVudGl0eSkgPyBcInVuZGVmaW5lZCBlbnRpdHkuXCIgOlxuICAgICAgICAgICAgICAgIFwiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gZW50aXR5IG5hbWUuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGAmJHtlbnRpdHl9O2A7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG51bSA9IE5hTjtcbiAgICAgICAgaWYgKGVudGl0eVsxXSA9PT0gXCJ4XCIgJiYgL14jeFswLTlhLWZdKyQvaS50ZXN0KGVudGl0eSkpIHtcbiAgICAgICAgICAgIG51bSA9IHBhcnNlSW50KGVudGl0eS5zbGljZSgyKSwgMTYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKC9eI1swLTldKyQvLnRlc3QoZW50aXR5KSkge1xuICAgICAgICAgICAgbnVtID0gcGFyc2VJbnQoZW50aXR5LnNsaWNlKDEpLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoYXJhY3RlciByZWZlcmVuY2UgaXMgcmVxdWlyZWQgdG8gbWF0Y2ggdGhlIENIQVIgcHJvZHVjdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLmlzQ2hhcihudW0pKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWwoXCJtYWxmb3JtZWQgY2hhcmFjdGVyIGVudGl0eS5cIik7XG4gICAgICAgICAgICByZXR1cm4gYCYke2VudGl0eX07YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQobnVtKTtcbiAgICB9XG59XG5leHBvcnRzLlNheGVzUGFyc2VyID0gU2F4ZXNQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYXhlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlZDUiLCJyZXF1aXJlIiwiZWQyIiwiTlNlZDMiLCJpc1MiLCJpc0NoYXIxMCIsImlzQ2hhciIsImlzTmFtZVN0YXJ0Q2hhciIsImlzTmFtZUNoYXIiLCJTX0xJU1QiLCJOQU1FX1JFIiwiaXNDaGFyMTEiLCJpc05DTmFtZVN0YXJ0Q2hhciIsImlzTkNOYW1lQ2hhciIsIk5DX05BTUVfUkUiLCJYTUxfTkFNRVNQQUNFIiwiWE1MTlNfTkFNRVNQQUNFIiwicm9vdE5TIiwiX19wcm90b19fIiwieG1sIiwieG1sbnMiLCJYTUxfRU5USVRJRVMiLCJhbXAiLCJndCIsImx0IiwicXVvdCIsImFwb3MiLCJFT0MiLCJOTF9MSUtFIiwiU19CRUdJTiIsIlNfQkVHSU5fV0hJVEVTUEFDRSIsIlNfRE9DVFlQRSIsIlNfRE9DVFlQRV9RVU9URSIsIlNfRFREIiwiU19EVERfUVVPVEVEIiwiU19EVERfT1BFTl9XQUtBIiwiU19EVERfT1BFTl9XQUtBX0JBTkciLCJTX0RURF9DT01NRU5UIiwiU19EVERfQ09NTUVOVF9FTkRJTkciLCJTX0RURF9DT01NRU5UX0VOREVEIiwiU19EVERfUEkiLCJTX0RURF9QSV9FTkRJTkciLCJTX1RFWFQiLCJTX0VOVElUWSIsIlNfT1BFTl9XQUtBIiwiU19PUEVOX1dBS0FfQkFORyIsIlNfQ09NTUVOVCIsIlNfQ09NTUVOVF9FTkRJTkciLCJTX0NPTU1FTlRfRU5ERUQiLCJTX0NEQVRBIiwiU19DREFUQV9FTkRJTkciLCJTX0NEQVRBX0VORElOR18yIiwiU19QSV9GSVJTVF9DSEFSIiwiU19QSV9SRVNUIiwiU19QSV9CT0RZIiwiU19QSV9FTkRJTkciLCJTX1hNTF9ERUNMX05BTUVfU1RBUlQiLCJTX1hNTF9ERUNMX05BTUUiLCJTX1hNTF9ERUNMX0VRIiwiU19YTUxfREVDTF9WQUxVRV9TVEFSVCIsIlNfWE1MX0RFQ0xfVkFMVUUiLCJTX1hNTF9ERUNMX1NFUEFSQVRPUiIsIlNfWE1MX0RFQ0xfRU5ESU5HIiwiU19PUEVOX1RBRyIsIlNfT1BFTl9UQUdfU0xBU0giLCJTX0FUVFJJQiIsIlNfQVRUUklCX05BTUUiLCJTX0FUVFJJQl9OQU1FX1NBV19XSElURSIsIlNfQVRUUklCX1ZBTFVFIiwiU19BVFRSSUJfVkFMVUVfUVVPVEVEIiwiU19BVFRSSUJfVkFMVUVfQ0xPU0VEIiwiU19BVFRSSUJfVkFMVUVfVU5RVU9URUQiLCJTX0NMT1NFX1RBRyIsIlNfQ0xPU0VfVEFHX1NBV19XSElURSIsIlRBQiIsIk5MIiwiQ1IiLCJTUEFDRSIsIkJBTkciLCJEUVVPVEUiLCJBTVAiLCJTUVVPVEUiLCJNSU5VUyIsIkZPUldBUkRfU0xBU0giLCJTRU1JQ09MT04iLCJMRVNTIiwiRVFVQUwiLCJHUkVBVEVSIiwiUVVFU1RJT04iLCJPUEVOX0JSQUNLRVQiLCJDTE9TRV9CUkFDS0VUIiwiTkVMIiwiTFMiLCJpc1F1b3RlIiwiYyIsIlFVT1RFUyIsIkRPQ1RZUEVfVEVSTUlOQVRPUiIsIkRURF9URVJNSU5BVE9SIiwiWE1MX0RFQ0xfTkFNRV9URVJNSU5BVE9SIiwiQVRUUklCX1ZBTFVFX1VOUVVPVEVEX1RFUk1JTkFUT1IiLCJuc1BhaXJDaGVjayIsInBhcnNlciIsInByZWZpeCIsInVyaSIsImZhaWwiLCJuc01hcHBpbmdDaGVjayIsIm1hcHBpbmciLCJsb2NhbCIsImtleXMiLCJpc05DTmFtZSIsIm5hbWUiLCJ0ZXN0IiwiaXNOYW1lIiwiRk9SQklEREVOX1NUQVJUIiwiRk9SQklEREVOX0JSQUNLRVQiLCJGT1JCSURERU5fQlJBQ0tFVF9CUkFDS0VUIiwiRVZFTlRTIiwiRVZFTlRfTkFNRV9UT19IQU5ETEVSX05BTUUiLCJ4bWxkZWNsIiwidGV4dCIsInByb2Nlc3NpbmdpbnN0cnVjdGlvbiIsImRvY3R5cGUiLCJjb21tZW50Iiwib3BlbnRhZ3N0YXJ0IiwiYXR0cmlidXRlIiwib3BlbnRhZyIsImNsb3NldGFnIiwiY2RhdGEiLCJlcnJvciIsImVuZCIsInJlYWR5IiwiU2F4ZXNQYXJzZXIiLCJjb25zdHJ1Y3RvciIsIm9wdCIsImZyYWdtZW50T3B0IiwiZnJhZ21lbnQiLCJ4bWxuc09wdCIsInRyYWNrUG9zaXRpb24iLCJwb3NpdGlvbiIsImZpbGVOYW1lIiwibmFtZVN0YXJ0Q2hlY2siLCJuYW1lQ2hlY2siLCJwcm9jZXNzQXR0cmlicyIsInByb2Nlc3NBdHRyaWJzTlMiLCJwdXNoQXR0cmliIiwicHVzaEF0dHJpYk5TIiwibnMiLCJhc3NpZ24iLCJhZGRpdGlvbmFsIiwiYWRkaXRpb25hbE5hbWVzcGFjZXMiLCJwcm9jZXNzQXR0cmlic1BsYWluIiwicHVzaEF0dHJpYlBsYWluIiwic3RhdGVUYWJsZSIsInNCZWdpbiIsInNCZWdpbldoaXRlc3BhY2UiLCJzRG9jdHlwZSIsInNEb2N0eXBlUXVvdGUiLCJzRFREIiwic0RURFF1b3RlZCIsInNEVERPcGVuV2FrYSIsInNEVERPcGVuV2FrYUJhbmciLCJzRFREQ29tbWVudCIsInNEVERDb21tZW50RW5kaW5nIiwic0RURENvbW1lbnRFbmRlZCIsInNEVERQSSIsInNEVERQSUVuZGluZyIsInNUZXh0Iiwic0VudGl0eSIsInNPcGVuV2FrYSIsInNPcGVuV2FrYUJhbmciLCJzQ29tbWVudCIsInNDb21tZW50RW5kaW5nIiwic0NvbW1lbnRFbmRlZCIsInNDRGF0YSIsInNDRGF0YUVuZGluZyIsInNDRGF0YUVuZGluZzIiLCJzUElGaXJzdENoYXIiLCJzUElSZXN0Iiwic1BJQm9keSIsInNQSUVuZGluZyIsInNYTUxEZWNsTmFtZVN0YXJ0Iiwic1hNTERlY2xOYW1lIiwic1hNTERlY2xFcSIsInNYTUxEZWNsVmFsdWVTdGFydCIsInNYTUxEZWNsVmFsdWUiLCJzWE1MRGVjbFNlcGFyYXRvciIsInNYTUxEZWNsRW5kaW5nIiwic09wZW5UYWciLCJzT3BlblRhZ1NsYXNoIiwic0F0dHJpYiIsInNBdHRyaWJOYW1lIiwic0F0dHJpYk5hbWVTYXdXaGl0ZSIsInNBdHRyaWJWYWx1ZSIsInNBdHRyaWJWYWx1ZVF1b3RlZCIsInNBdHRyaWJWYWx1ZUNsb3NlZCIsInNBdHRyaWJWYWx1ZVVucXVvdGVkIiwic0Nsb3NlVGFnIiwic0Nsb3NlVGFnU2F3V2hpdGUiLCJfaW5pdCIsImNsb3NlZCIsIl9jbG9zZWQiLCJfYSIsIm9wZW5XYWthQmFuZyIsInBpVGFyZ2V0IiwiZW50aXR5IiwicSIsInRhZ3MiLCJ0YWciLCJ0b3BOUyIsImNodW5rIiwiY2h1bmtQb3NpdGlvbiIsImkiLCJwcmV2SSIsImNhcnJpZWRGcm9tUHJldmlvdXMiLCJ1bmRlZmluZWQiLCJmb3JiaWRkZW5TdGF0ZSIsImF0dHJpYkxpc3QiLCJzdGF0ZSIsInJlcG9ydGVkVGV4dEJlZm9yZVJvb3QiLCJyZXBvcnRlZFRleHRBZnRlclJvb3QiLCJjbG9zZWRSb290Iiwic2F3Um9vdCIsInhtbERlY2xQb3NzaWJsZSIsInhtbERlY2xFeHBlY3RzIiwiZW50aXR5UmV0dXJuU3RhdGUiLCJkZWZhdWx0WE1MVmVyc2lvbiIsImZvcmNlWE1MVmVyc2lvbiIsIkVycm9yIiwic2V0WE1MVmVyc2lvbiIsInBvc2l0aW9uQXROZXdMaW5lIiwieG1sRGVjbCIsInZlcnNpb24iLCJlbmNvZGluZyIsInN0YW5kYWxvbmUiLCJsaW5lIiwiY29sdW1uIiwiRU5USVRJRVMiLCJjcmVhdGUiLCJyZWFkeUhhbmRsZXIiLCJjYWxsIiwiY29sdW1uSW5kZXgiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJtYWtlRXJyb3IiLCJtZXNzYWdlIiwibXNnIiwibGVuZ3RoIiwiZXJyIiwiZXJyb3JIYW5kbGVyIiwid3JpdGUiLCJ0b1N0cmluZyIsImxpbWl0IiwibGFzdENvZGUiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJjbG9zZSIsImdldENvZGUxMCIsImNvZGUiLCJmaW5hbCIsImdldENvZGUxMSIsIm5leHQiLCJnZXRDb2RlTm9ybSIsImdldENvZGUiLCJ1bmdldCIsImNhcHR1cmVUbyIsImNoYXJzIiwic3RhcnQiLCJpc05MTGlrZSIsImluY2x1ZGVzIiwiY2FwdHVyZVRvQ2hhciIsImNoYXIiLCJjYXB0dXJlTmFtZUNoYXJzIiwic2tpcFNwYWNlcyIsImN1cnJlbnRYTUxWZXJzaW9uIiwiaUJlZm9yZSIsImRvY3R5cGVIYW5kbGVyIiwiU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsIm93YiIsImhhbmRsZVRleHRJblJvb3QiLCJoYW5kbGVUZXh0T3V0c2lkZVJvb3QiLCJsb29wIiwicGFyc2VkIiwicGFyc2VFbnRpdHkiLCJ0ZXh0SGFuZGxlciIsImNvbW1lbnRIYW5kbGVyIiwiY2RhdGFIYW5kbGVyIiwiaXNRdWVzdGlvbiIsInRvTG93ZXJDYXNlIiwicGlIYW5kbGVyIiwidGFyZ2V0IiwiYm9keSIsImpvaW4iLCJ4bWxkZWNsSGFuZGxlciIsImF0dHJpYnV0ZXMiLCJvcGVuVGFnU3RhcnRIYW5kbGVyIiwib3BlblRhZyIsIm9wZW5TZWxmQ2xvc2luZ1RhZyIsImNsb3NlVGFnIiwic2Nhbkxvb3AiLCJub25TcGFjZSIsIm91dFJvb3RMb29wIiwicW5hbWUiLCJhdHRyIiwicHVzaCIsImF0dHJpYnV0ZUhhbmRsZXIiLCJ0cmltbWVkIiwidHJpbSIsIl9iIiwicG9wIiwiZW5kSGFuZGxlciIsInJlc29sdmUiLCJpbmRleCIsInJlc29sdmVQcmVmaXgiLCJjb2xvbiIsImluZGV4T2YiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VlbiIsIlNldCIsImVxbmFtZSIsImhhcyIsImFkZCIsImlzU2VsZkNsb3NpbmciLCJvcGVuVGFnSGFuZGxlciIsIl9jIiwiY2xvc2VUYWdIYW5kbGVyIiwidG9wIiwibCIsImRlZmluZWQiLCJudW0iLCJOYU4iLCJwYXJzZUludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/saxes/saxes.js\n");

/***/ })

};
;