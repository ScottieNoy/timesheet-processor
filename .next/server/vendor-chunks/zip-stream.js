/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zip-stream";
exports.ids = ["vendor-chunks/zip-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/zip-stream/index.js":
/*!******************************************!*\
  !*** ./node_modules/zip-stream/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */ var inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar ZipArchiveOutputStream = (__webpack_require__(/*! compress-commons */ \"(rsc)/./node_modules/compress-commons/lib/compress-commons.js\").ZipArchiveOutputStream);\nvar ZipArchiveEntry = (__webpack_require__(/*! compress-commons */ \"(rsc)/./node_modules/compress-commons/lib/compress-commons.js\").ZipArchiveEntry);\nvar util = __webpack_require__(/*! archiver-utils */ \"(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */ var ZipStream = module.exports = function(options) {\n    if (!(this instanceof ZipStream)) {\n        return new ZipStream(options);\n    }\n    options = this.options = options || {};\n    options.zlib = options.zlib || {};\n    ZipArchiveOutputStream.call(this, options);\n    if (typeof options.level === \"number\" && options.level >= 0) {\n        options.zlib.level = options.level;\n        delete options.level;\n    }\n    if (!options.forceZip64 && typeof options.zlib.level === \"number\" && options.zlib.level === 0) {\n        options.store = true;\n    }\n    options.namePrependSlash = options.namePrependSlash || false;\n    if (options.comment && options.comment.length > 0) {\n        this.setComment(options.comment);\n    }\n};\ninherits(ZipStream, ZipArchiveOutputStream);\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */ ZipStream.prototype._normalizeFileData = function(data) {\n    data = util.defaults(data, {\n        type: \"file\",\n        name: null,\n        namePrependSlash: this.options.namePrependSlash,\n        linkname: null,\n        date: null,\n        mode: null,\n        store: this.options.store,\n        comment: \"\"\n    });\n    var isDir = data.type === \"directory\";\n    var isSymlink = data.type === \"symlink\";\n    if (data.name) {\n        data.name = util.sanitizePath(data.name);\n        if (!isSymlink && data.name.slice(-1) === \"/\") {\n            isDir = true;\n            data.type = \"directory\";\n        } else if (isDir) {\n            data.name += \"/\";\n        }\n    }\n    if (isDir || isSymlink) {\n        data.store = true;\n    }\n    data.date = util.dateify(data.date);\n    return data;\n};\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */ ZipStream.prototype.entry = function(source, data, callback) {\n    if (typeof callback !== \"function\") {\n        callback = this._emitErrorCallback.bind(this);\n    }\n    data = this._normalizeFileData(data);\n    if (data.type !== \"file\" && data.type !== \"directory\" && data.type !== \"symlink\") {\n        callback(new Error(data.type + \" entries not currently supported\"));\n        return;\n    }\n    if (typeof data.name !== \"string\" || data.name.length === 0) {\n        callback(new Error(\"entry name must be a non-empty string value\"));\n        return;\n    }\n    if (data.type === \"symlink\" && typeof data.linkname !== \"string\") {\n        callback(new Error(\"entry linkname must be a non-empty string value when type equals symlink\"));\n        return;\n    }\n    var entry = new ZipArchiveEntry(data.name);\n    entry.setTime(data.date, this.options.forceLocalTime);\n    if (data.namePrependSlash) {\n        entry.setName(data.name, true);\n    }\n    if (data.store) {\n        entry.setMethod(0);\n    }\n    if (data.comment.length > 0) {\n        entry.setComment(data.comment);\n    }\n    if (data.type === \"symlink\" && typeof data.mode !== \"number\") {\n        data.mode = 40960; // 0120000\n    }\n    if (typeof data.mode === \"number\") {\n        if (data.type === \"symlink\") {\n            data.mode |= 40960;\n        }\n        entry.setUnixMode(data.mode);\n    }\n    if (data.type === \"symlink\" && typeof data.linkname === \"string\") {\n        source = Buffer.from(data.linkname);\n    }\n    return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */ ZipStream.prototype.finalize = function() {\n    this.finish();\n}; /**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */  /**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/file.js":
/*!*********************************************************************!*\
  !*** ./node_modules/zip-stream/node_modules/archiver-utils/file.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * archiver-utils\n *\n * Copyright (c) 2012-2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-archiver/blob/master/LICENSE-MIT\n */ var fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar flatten = __webpack_require__(/*! lodash.flatten */ \"(rsc)/./node_modules/lodash.flatten/index.js\");\nvar difference = __webpack_require__(/*! lodash.difference */ \"(rsc)/./node_modules/lodash.difference/index.js\");\nvar union = __webpack_require__(/*! lodash.union */ \"(rsc)/./node_modules/lodash.union/index.js\");\nvar isPlainObject = __webpack_require__(/*! lodash.isplainobject */ \"(rsc)/./node_modules/lodash.isplainobject/index.js\");\nvar glob = __webpack_require__(/*! glob */ \"(rsc)/./node_modules/zip-stream/node_modules/glob/glob.js\");\nvar file = module.exports = {};\nvar pathSeparatorRe = /[\\/\\\\]/g;\n// Process specified wildcard glob patterns or filenames against a\n// callback, excluding and uniquing files in the result set.\nvar processPatterns = function(patterns, fn) {\n    // Filepaths to return.\n    var result = [];\n    // Iterate over flattened patterns array.\n    flatten(patterns).forEach(function(pattern) {\n        // If the first character is ! it should be omitted\n        var exclusion = pattern.indexOf(\"!\") === 0;\n        // If the pattern is an exclusion, remove the !\n        if (exclusion) {\n            pattern = pattern.slice(1);\n        }\n        // Find all matching files for this pattern.\n        var matches = fn(pattern);\n        if (exclusion) {\n            // If an exclusion, remove matching files.\n            result = difference(result, matches);\n        } else {\n            // Otherwise add matching files.\n            result = union(result, matches);\n        }\n    });\n    return result;\n};\n// True if the file path exists.\nfile.exists = function() {\n    var filepath = path.join.apply(path, arguments);\n    return fs.existsSync(filepath);\n};\n// Return an array of all file paths that match the given wildcard patterns.\nfile.expand = function(...args) {\n    // If the first argument is an options object, save those options to pass\n    // into the File.prototype.glob.sync method.\n    var options = isPlainObject(args[0]) ? args.shift() : {};\n    // Use the first argument if it's an Array, otherwise convert the arguments\n    // object to an array and use that.\n    var patterns = Array.isArray(args[0]) ? args[0] : args;\n    // Return empty set if there are no patterns or filepaths.\n    if (patterns.length === 0) {\n        return [];\n    }\n    // Return all matching filepaths.\n    var matches = processPatterns(patterns, function(pattern) {\n        // Find all matching files for this pattern.\n        return glob.sync(pattern, options);\n    });\n    // Filter result set?\n    if (options.filter) {\n        matches = matches.filter(function(filepath) {\n            filepath = path.join(options.cwd || \"\", filepath);\n            try {\n                if (typeof options.filter === \"function\") {\n                    return options.filter(filepath);\n                } else {\n                    // If the file is of the right type and exists, this should work.\n                    return fs.statSync(filepath)[options.filter]();\n                }\n            } catch (e) {\n                // Otherwise, it's probably not the right type.\n                return false;\n            }\n        });\n    }\n    return matches;\n};\n// Build a multi task \"files\" object dynamically.\nfile.expandMapping = function(patterns, destBase, options) {\n    options = Object.assign({\n        rename: function(destBase, destPath) {\n            return path.join(destBase || \"\", destPath);\n        }\n    }, options);\n    var files = [];\n    var fileByDest = {};\n    // Find all files matching pattern, using passed-in options.\n    file.expand(options, patterns).forEach(function(src) {\n        var destPath = src;\n        // Flatten?\n        if (options.flatten) {\n            destPath = path.basename(destPath);\n        }\n        // Change the extension?\n        if (options.ext) {\n            destPath = destPath.replace(/(\\.[^\\/]*)?$/, options.ext);\n        }\n        // Generate destination filename.\n        var dest = options.rename(destBase, destPath, options);\n        // Prepend cwd to src path if necessary.\n        if (options.cwd) {\n            src = path.join(options.cwd, src);\n        }\n        // Normalize filepaths to be unix-style.\n        dest = dest.replace(pathSeparatorRe, \"/\");\n        src = src.replace(pathSeparatorRe, \"/\");\n        // Map correct src path to dest path.\n        if (fileByDest[dest]) {\n            // If dest already exists, push this src onto that dest's src array.\n            fileByDest[dest].src.push(src);\n        } else {\n            // Otherwise create a new src-dest file mapping object.\n            files.push({\n                src: [\n                    src\n                ],\n                dest: dest\n            });\n            // And store a reference for later use.\n            fileByDest[dest] = files[files.length - 1];\n        }\n    });\n    return files;\n};\n// reusing bits of grunt's multi-task source normalization\nfile.normalizeFilesArray = function(data) {\n    var files = [];\n    data.forEach(function(obj) {\n        var prop;\n        if (\"src\" in obj || \"dest\" in obj) {\n            files.push(obj);\n        }\n    });\n    if (files.length === 0) {\n        return [];\n    }\n    files = _(files).chain().forEach(function(obj) {\n        if (!(\"src\" in obj) || !obj.src) {\n            return;\n        }\n        // Normalize .src properties to flattened array.\n        if (Array.isArray(obj.src)) {\n            obj.src = flatten(obj.src);\n        } else {\n            obj.src = [\n                obj.src\n            ];\n        }\n    }).map(function(obj) {\n        // Build options object, removing unwanted properties.\n        var expandOptions = Object.assign({}, obj);\n        delete expandOptions.src;\n        delete expandOptions.dest;\n        // Expand file mappings.\n        if (obj.expand) {\n            return file.expandMapping(obj.src, obj.dest, expandOptions).map(function(mapObj) {\n                // Copy obj properties to result.\n                var result = Object.assign({}, obj);\n                // Make a clone of the orig obj available.\n                result.orig = Object.assign({}, obj);\n                // Set .src and .dest, processing both as templates.\n                result.src = mapObj.src;\n                result.dest = mapObj.dest;\n                // Remove unwanted properties.\n                [\n                    \"expand\",\n                    \"cwd\",\n                    \"flatten\",\n                    \"rename\",\n                    \"ext\"\n                ].forEach(function(prop) {\n                    delete result[prop];\n                });\n                return result;\n            });\n        }\n        // Copy obj properties to result, adding an .orig property.\n        var result = Object.assign({}, obj);\n        // Make a clone of the orig obj available.\n        result.orig = Object.assign({}, obj);\n        if (\"src\" in result) {\n            // Expose an expand-on-demand getter method as .src.\n            Object.defineProperty(result, \"src\", {\n                enumerable: true,\n                get: function fn() {\n                    var src;\n                    if (!(\"result\" in fn)) {\n                        src = obj.src;\n                        // If src is an array, flatten it. Otherwise, make it into an array.\n                        src = Array.isArray(src) ? flatten(src) : [\n                            src\n                        ];\n                        // Expand src files, memoizing result.\n                        fn.result = file.expand(expandOptions, src);\n                    }\n                    return fn.result;\n                }\n            });\n        }\n        if (\"dest\" in result) {\n            result.dest = obj.dest;\n        }\n        return result;\n    }).flatten().value();\n    return files;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zip-stream/node_modules/archiver-utils/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * archiver-utils\n *\n * Copyright (c) 2015 Chris Talkington.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/archiver-utils/blob/master/LICENSE\n */ var fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar lazystream = __webpack_require__(/*! lazystream */ \"(rsc)/./node_modules/lazystream/lib/lazystream.js\");\nvar normalizePath = __webpack_require__(/*! normalize-path */ \"(rsc)/./node_modules/normalize-path/index.js\");\nvar defaults = __webpack_require__(/*! lodash.defaults */ \"(rsc)/./node_modules/lodash.defaults/index.js\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar PassThrough = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").PassThrough);\nvar utils = module.exports = {};\nutils.file = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/file.js\");\nutils.collectStream = function(source, callback) {\n    var collection = [];\n    var size = 0;\n    source.on(\"error\", callback);\n    source.on(\"data\", function(chunk) {\n        collection.push(chunk);\n        size += chunk.length;\n    });\n    source.on(\"end\", function() {\n        var buf = Buffer.alloc(size);\n        var offset = 0;\n        collection.forEach(function(data) {\n            data.copy(buf, offset);\n            offset += data.length;\n        });\n        callback(null, buf);\n    });\n};\nutils.dateify = function(dateish) {\n    dateish = dateish || new Date();\n    if (dateish instanceof Date) {\n        dateish = dateish;\n    } else if (typeof dateish === \"string\") {\n        dateish = new Date(dateish);\n    } else {\n        dateish = new Date();\n    }\n    return dateish;\n};\n// this is slightly different from lodash version\nutils.defaults = function(object, source, guard) {\n    var args = arguments;\n    args[0] = args[0] || {};\n    return defaults(...args);\n};\nutils.isStream = function(source) {\n    return source instanceof Stream;\n};\nutils.lazyReadStream = function(filepath) {\n    return new lazystream.Readable(function() {\n        return fs.createReadStream(filepath);\n    });\n};\nutils.normalizeInputSource = function(source) {\n    if (source === null) {\n        return Buffer.alloc(0);\n    } else if (typeof source === \"string\") {\n        return Buffer.from(source);\n    } else if (utils.isStream(source)) {\n        // Always pipe through a PassThrough stream to guarantee pausing the stream if it's already flowing,\n        // since it will only be processed in a (distant) future iteration of the event loop, and will lose\n        // data if already flowing now.\n        return source.pipe(new PassThrough());\n    }\n    return source;\n};\nutils.sanitizePath = function(filepath) {\n    return normalizePath(filepath, false).replace(/^\\w+:/, \"\").replace(/^(\\.\\.\\/|\\/)+/, \"\");\n};\nutils.trailingSlashIt = function(str) {\n    return str.slice(-1) !== \"/\" ? str + \"/\" : str;\n};\nutils.unixifyPath = function(filepath) {\n    return normalizePath(filepath, false).replace(/^\\w+:/, \"\");\n};\nutils.walkdir = function(dirpath, base, callback) {\n    var results = [];\n    if (typeof base === \"function\") {\n        callback = base;\n        base = dirpath;\n    }\n    fs.readdir(dirpath, function(err, list) {\n        var i = 0;\n        var file;\n        var filepath;\n        if (err) {\n            return callback(err);\n        }\n        (function next() {\n            file = list[i++];\n            if (!file) {\n                return callback(null, results);\n            }\n            filepath = path.join(dirpath, file);\n            fs.stat(filepath, function(err, stats) {\n                results.push({\n                    path: filepath,\n                    relative: path.relative(base, filepath).replace(/\\\\/g, \"/\"),\n                    stats: stats\n                });\n                if (stats && stats.isDirectory()) {\n                    utils.walkdir(filepath, base, function(err, res) {\n                        res.forEach(function(dirEntry) {\n                            results.push(dirEntry);\n                        });\n                        next();\n                    });\n                } else {\n                    next();\n                }\n            });\n        })();\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/node_modules/archiver-utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/zip-stream/node_modules/glob/common.js":
/*!*************************************************************!*\
  !*** ./node_modules/zip-stream/node_modules/glob/common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.setopts = setopts;\nexports.ownProp = ownProp;\nexports.makeAbs = makeAbs;\nexports.finish = finish;\nexports.mark = mark;\nexports.isIgnored = isIgnored;\nexports.childrenIgnored = childrenIgnored;\nfunction ownProp(obj, field) {\n    return Object.prototype.hasOwnProperty.call(obj, field);\n}\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar minimatch = __webpack_require__(/*! minimatch */ \"(rsc)/./node_modules/minimatch/minimatch.js\");\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(rsc)/./node_modules/path-is-absolute/index.js\");\nvar Minimatch = minimatch.Minimatch;\nfunction alphasort(a, b) {\n    return a.localeCompare(b, \"en\");\n}\nfunction setupIgnores(self, options) {\n    self.ignore = options.ignore || [];\n    if (!Array.isArray(self.ignore)) self.ignore = [\n        self.ignore\n    ];\n    if (self.ignore.length) {\n        self.ignore = self.ignore.map(ignoreMap);\n    }\n}\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap(pattern) {\n    var gmatcher = null;\n    if (pattern.slice(-3) === \"/**\") {\n        var gpattern = pattern.replace(/(\\/\\*\\*)+$/, \"\");\n        gmatcher = new Minimatch(gpattern, {\n            dot: true\n        });\n    }\n    return {\n        matcher: new Minimatch(pattern, {\n            dot: true\n        }),\n        gmatcher: gmatcher\n    };\n}\nfunction setopts(self, pattern, options) {\n    if (!options) options = {};\n    // base-matching: just use globstar for that.\n    if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n        if (options.noglobstar) {\n            throw new Error(\"base matching requires globstar\");\n        }\n        pattern = \"**/\" + pattern;\n    }\n    self.silent = !!options.silent;\n    self.pattern = pattern;\n    self.strict = options.strict !== false;\n    self.realpath = !!options.realpath;\n    self.realpathCache = options.realpathCache || Object.create(null);\n    self.follow = !!options.follow;\n    self.dot = !!options.dot;\n    self.mark = !!options.mark;\n    self.nodir = !!options.nodir;\n    if (self.nodir) self.mark = true;\n    self.sync = !!options.sync;\n    self.nounique = !!options.nounique;\n    self.nonull = !!options.nonull;\n    self.nosort = !!options.nosort;\n    self.nocase = !!options.nocase;\n    self.stat = !!options.stat;\n    self.noprocess = !!options.noprocess;\n    self.absolute = !!options.absolute;\n    self.fs = options.fs || fs;\n    self.maxLength = options.maxLength || Infinity;\n    self.cache = options.cache || Object.create(null);\n    self.statCache = options.statCache || Object.create(null);\n    self.symlinks = options.symlinks || Object.create(null);\n    setupIgnores(self, options);\n    self.changedCwd = false;\n    var cwd = process.cwd();\n    if (!ownProp(options, \"cwd\")) self.cwd = cwd;\n    else {\n        self.cwd = path.resolve(options.cwd);\n        self.changedCwd = self.cwd !== cwd;\n    }\n    self.root = options.root || path.resolve(self.cwd, \"/\");\n    self.root = path.resolve(self.root);\n    if (process.platform === \"win32\") self.root = self.root.replace(/\\\\/g, \"/\");\n    // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n    // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n    self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);\n    if (process.platform === \"win32\") self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\");\n    self.nomount = !!options.nomount;\n    // disable comments and negation in Minimatch.\n    // Note that they are not supported in Glob itself anyway.\n    options.nonegate = true;\n    options.nocomment = true;\n    // always treat \\ in patterns as escapes, not path separators\n    options.allowWindowsEscape = false;\n    self.minimatch = new Minimatch(pattern, options);\n    self.options = self.minimatch.options;\n}\nfunction finish(self) {\n    var nou = self.nounique;\n    var all = nou ? [] : Object.create(null);\n    for(var i = 0, l = self.matches.length; i < l; i++){\n        var matches = self.matches[i];\n        if (!matches || Object.keys(matches).length === 0) {\n            if (self.nonull) {\n                // do like the shell, and spit out the literal glob\n                var literal = self.minimatch.globSet[i];\n                if (nou) all.push(literal);\n                else all[literal] = true;\n            }\n        } else {\n            // had matches\n            var m = Object.keys(matches);\n            if (nou) all.push.apply(all, m);\n            else m.forEach(function(m) {\n                all[m] = true;\n            });\n        }\n    }\n    if (!nou) all = Object.keys(all);\n    if (!self.nosort) all = all.sort(alphasort);\n    // at *some* point we statted all of these\n    if (self.mark) {\n        for(var i = 0; i < all.length; i++){\n            all[i] = self._mark(all[i]);\n        }\n        if (self.nodir) {\n            all = all.filter(function(e) {\n                var notDir = !/\\/$/.test(e);\n                var c = self.cache[e] || self.cache[makeAbs(self, e)];\n                if (notDir && c) notDir = c !== \"DIR\" && !Array.isArray(c);\n                return notDir;\n            });\n        }\n    }\n    if (self.ignore.length) all = all.filter(function(m) {\n        return !isIgnored(self, m);\n    });\n    self.found = all;\n}\nfunction mark(self, p) {\n    var abs = makeAbs(self, p);\n    var c = self.cache[abs];\n    var m = p;\n    if (c) {\n        var isDir = c === \"DIR\" || Array.isArray(c);\n        var slash = p.slice(-1) === \"/\";\n        if (isDir && !slash) m += \"/\";\n        else if (!isDir && slash) m = m.slice(0, -1);\n        if (m !== p) {\n            var mabs = makeAbs(self, m);\n            self.statCache[mabs] = self.statCache[abs];\n            self.cache[mabs] = self.cache[abs];\n        }\n    }\n    return m;\n}\n// lotta situps...\nfunction makeAbs(self, f) {\n    var abs = f;\n    if (f.charAt(0) === \"/\") {\n        abs = path.join(self.root, f);\n    } else if (isAbsolute(f) || f === \"\") {\n        abs = f;\n    } else if (self.changedCwd) {\n        abs = path.resolve(self.cwd, f);\n    } else {\n        abs = path.resolve(f);\n    }\n    if (process.platform === \"win32\") abs = abs.replace(/\\\\/g, \"/\");\n    return abs;\n}\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored(self, path) {\n    if (!self.ignore.length) return false;\n    return self.ignore.some(function(item) {\n        return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path));\n    });\n}\nfunction childrenIgnored(self, path) {\n    if (!self.ignore.length) return false;\n    return self.ignore.some(function(item) {\n        return !!(item.gmatcher && item.gmatcher.match(path));\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/node_modules/glob/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/zip-stream/node_modules/glob/glob.js":
/*!***********************************************************!*\
  !*** ./node_modules/zip-stream/node_modules/glob/glob.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\nmodule.exports = glob;\nvar rp = __webpack_require__(/*! fs.realpath */ \"(rsc)/./node_modules/fs.realpath/index.js\");\nvar minimatch = __webpack_require__(/*! minimatch */ \"(rsc)/./node_modules/minimatch/minimatch.js\");\nvar Minimatch = minimatch.Minimatch;\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar EE = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar path = __webpack_require__(/*! path */ \"path\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(rsc)/./node_modules/path-is-absolute/index.js\");\nvar globSync = __webpack_require__(/*! ./sync.js */ \"(rsc)/./node_modules/zip-stream/node_modules/glob/sync.js\");\nvar common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/zip-stream/node_modules/glob/common.js\");\nvar setopts = common.setopts;\nvar ownProp = common.ownProp;\nvar inflight = __webpack_require__(/*! inflight */ \"(rsc)/./node_modules/inflight/inflight.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar childrenIgnored = common.childrenIgnored;\nvar isIgnored = common.isIgnored;\nvar once = __webpack_require__(/*! once */ \"(rsc)/./node_modules/once/once.js\");\nfunction glob(pattern, options, cb) {\n    if (typeof options === \"function\") cb = options, options = {};\n    if (!options) options = {};\n    if (options.sync) {\n        if (cb) throw new TypeError(\"callback provided to sync glob\");\n        return globSync(pattern, options);\n    }\n    return new Glob(pattern, options, cb);\n}\nglob.sync = globSync;\nvar GlobSync = glob.GlobSync = globSync.GlobSync;\n// old api surface\nglob.glob = glob;\nfunction extend(origin, add) {\n    if (add === null || typeof add !== \"object\") {\n        return origin;\n    }\n    var keys = Object.keys(add);\n    var i = keys.length;\n    while(i--){\n        origin[keys[i]] = add[keys[i]];\n    }\n    return origin;\n}\nglob.hasMagic = function(pattern, options_) {\n    var options = extend({}, options_);\n    options.noprocess = true;\n    var g = new Glob(pattern, options);\n    var set = g.minimatch.set;\n    if (!pattern) return false;\n    if (set.length > 1) return true;\n    for(var j = 0; j < set[0].length; j++){\n        if (typeof set[0][j] !== \"string\") return true;\n    }\n    return false;\n};\nglob.Glob = Glob;\ninherits(Glob, EE);\nfunction Glob(pattern, options, cb) {\n    if (typeof options === \"function\") {\n        cb = options;\n        options = null;\n    }\n    if (options && options.sync) {\n        if (cb) throw new TypeError(\"callback provided to sync glob\");\n        return new GlobSync(pattern, options);\n    }\n    if (!(this instanceof Glob)) return new Glob(pattern, options, cb);\n    setopts(this, pattern, options);\n    this._didRealPath = false;\n    // process each pattern in the minimatch set\n    var n = this.minimatch.set.length;\n    // The matches are stored as {<filename>: true,...} so that\n    // duplicates are automagically pruned.\n    // Later, we do an Object.keys() on these.\n    // Keep them as a list so we can fill in when nonull is set.\n    this.matches = new Array(n);\n    if (typeof cb === \"function\") {\n        cb = once(cb);\n        this.on(\"error\", cb);\n        this.on(\"end\", function(matches) {\n            cb(null, matches);\n        });\n    }\n    var self = this;\n    this._processing = 0;\n    this._emitQueue = [];\n    this._processQueue = [];\n    this.paused = false;\n    if (this.noprocess) return this;\n    if (n === 0) return done();\n    var sync = true;\n    for(var i = 0; i < n; i++){\n        this._process(this.minimatch.set[i], i, false, done);\n    }\n    sync = false;\n    function done() {\n        --self._processing;\n        if (self._processing <= 0) {\n            if (sync) {\n                process.nextTick(function() {\n                    self._finish();\n                });\n            } else {\n                self._finish();\n            }\n        }\n    }\n}\nGlob.prototype._finish = function() {\n    assert(this instanceof Glob);\n    if (this.aborted) return;\n    if (this.realpath && !this._didRealpath) return this._realpath();\n    common.finish(this);\n    this.emit(\"end\", this.found);\n};\nGlob.prototype._realpath = function() {\n    if (this._didRealpath) return;\n    this._didRealpath = true;\n    var n = this.matches.length;\n    if (n === 0) return this._finish();\n    var self = this;\n    for(var i = 0; i < this.matches.length; i++)this._realpathSet(i, next);\n    function next() {\n        if (--n === 0) self._finish();\n    }\n};\nGlob.prototype._realpathSet = function(index, cb) {\n    var matchset = this.matches[index];\n    if (!matchset) return cb();\n    var found = Object.keys(matchset);\n    var self = this;\n    var n = found.length;\n    if (n === 0) return cb();\n    var set = this.matches[index] = Object.create(null);\n    found.forEach(function(p, i) {\n        // If there's a problem with the stat, then it means that\n        // one or more of the links in the realpath couldn't be\n        // resolved.  just return the abs value in that case.\n        p = self._makeAbs(p);\n        rp.realpath(p, self.realpathCache, function(er, real) {\n            if (!er) set[real] = true;\n            else if (er.syscall === \"stat\") set[p] = true;\n            else self.emit(\"error\", er) // srsly wtf right here\n            ;\n            if (--n === 0) {\n                self.matches[index] = set;\n                cb();\n            }\n        });\n    });\n};\nGlob.prototype._mark = function(p) {\n    return common.mark(this, p);\n};\nGlob.prototype._makeAbs = function(f) {\n    return common.makeAbs(this, f);\n};\nGlob.prototype.abort = function() {\n    this.aborted = true;\n    this.emit(\"abort\");\n};\nGlob.prototype.pause = function() {\n    if (!this.paused) {\n        this.paused = true;\n        this.emit(\"pause\");\n    }\n};\nGlob.prototype.resume = function() {\n    if (this.paused) {\n        this.emit(\"resume\");\n        this.paused = false;\n        if (this._emitQueue.length) {\n            var eq = this._emitQueue.slice(0);\n            this._emitQueue.length = 0;\n            for(var i = 0; i < eq.length; i++){\n                var e = eq[i];\n                this._emitMatch(e[0], e[1]);\n            }\n        }\n        if (this._processQueue.length) {\n            var pq = this._processQueue.slice(0);\n            this._processQueue.length = 0;\n            for(var i = 0; i < pq.length; i++){\n                var p = pq[i];\n                this._processing--;\n                this._process(p[0], p[1], p[2], p[3]);\n            }\n        }\n    }\n};\nGlob.prototype._process = function(pattern, index, inGlobStar, cb) {\n    assert(this instanceof Glob);\n    assert(typeof cb === \"function\");\n    if (this.aborted) return;\n    this._processing++;\n    if (this.paused) {\n        this._processQueue.push([\n            pattern,\n            index,\n            inGlobStar,\n            cb\n        ]);\n        return;\n    }\n    //console.error('PROCESS %d', this._processing, pattern)\n    // Get the first [n] parts of pattern that are all strings.\n    var n = 0;\n    while(typeof pattern[n] === \"string\"){\n        n++;\n    }\n    // now n is the index of the first one that is *not* a string.\n    // see if there's anything else\n    var prefix;\n    switch(n){\n        // if not, then this is rather simple\n        case pattern.length:\n            this._processSimple(pattern.join(\"/\"), index, cb);\n            return;\n        case 0:\n            // pattern *starts* with some non-trivial item.\n            // going to readdir(cwd), but not include the prefix in matches.\n            prefix = null;\n            break;\n        default:\n            // pattern has some string bits in the front.\n            // whatever it starts with, whether that's 'absolute' like /foo/bar,\n            // or 'relative' like '../baz'\n            prefix = pattern.slice(0, n).join(\"/\");\n            break;\n    }\n    var remain = pattern.slice(n);\n    // get the list of entries.\n    var read;\n    if (prefix === null) read = \".\";\n    else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {\n        return typeof p === \"string\" ? p : \"[*]\";\n    }).join(\"/\"))) {\n        if (!prefix || !isAbsolute(prefix)) prefix = \"/\" + prefix;\n        read = prefix;\n    } else read = prefix;\n    var abs = this._makeAbs(read);\n    //if ignored, skip _processing\n    if (childrenIgnored(this, read)) return cb();\n    var isGlobStar = remain[0] === minimatch.GLOBSTAR;\n    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);\n    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);\n};\nGlob.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {\n    var self = this;\n    this._readdir(abs, inGlobStar, function(er, entries) {\n        return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);\n    });\n};\nGlob.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n    // if the abs isn't a dir, then nothing can match!\n    if (!entries) return cb();\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    var pn = remain[0];\n    var negate = !!this.minimatch.negate;\n    var rawGlob = pn._glob;\n    var dotOk = this.dot || rawGlob.charAt(0) === \".\";\n    var matchedEntries = [];\n    for(var i = 0; i < entries.length; i++){\n        var e = entries[i];\n        if (e.charAt(0) !== \".\" || dotOk) {\n            var m;\n            if (negate && !prefix) {\n                m = !e.match(pn);\n            } else {\n                m = e.match(pn);\n            }\n            if (m) matchedEntries.push(e);\n        }\n    }\n    //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n    var len = matchedEntries.length;\n    // If there are no matched entries, then nothing matches.\n    if (len === 0) return cb();\n    // if this is the last remaining pattern bit, then no need for\n    // an additional stat *unless* the user has specified mark or\n    // stat explicitly.  We know they exist, since readdir returned\n    // them.\n    if (remain.length === 1 && !this.mark && !this.stat) {\n        if (!this.matches[index]) this.matches[index] = Object.create(null);\n        for(var i = 0; i < len; i++){\n            var e = matchedEntries[i];\n            if (prefix) {\n                if (prefix !== \"/\") e = prefix + \"/\" + e;\n                else e = prefix + e;\n            }\n            if (e.charAt(0) === \"/\" && !this.nomount) {\n                e = path.join(this.root, e);\n            }\n            this._emitMatch(index, e);\n        }\n        // This was the last one, and no stats were needed\n        return cb();\n    }\n    // now test all matched entries as stand-ins for that part\n    // of the pattern.\n    remain.shift();\n    for(var i = 0; i < len; i++){\n        var e = matchedEntries[i];\n        var newPattern;\n        if (prefix) {\n            if (prefix !== \"/\") e = prefix + \"/\" + e;\n            else e = prefix + e;\n        }\n        this._process([\n            e\n        ].concat(remain), index, inGlobStar, cb);\n    }\n    cb();\n};\nGlob.prototype._emitMatch = function(index, e) {\n    if (this.aborted) return;\n    if (isIgnored(this, e)) return;\n    if (this.paused) {\n        this._emitQueue.push([\n            index,\n            e\n        ]);\n        return;\n    }\n    var abs = isAbsolute(e) ? e : this._makeAbs(e);\n    if (this.mark) e = this._mark(e);\n    if (this.absolute) e = abs;\n    if (this.matches[index][e]) return;\n    if (this.nodir) {\n        var c = this.cache[abs];\n        if (c === \"DIR\" || Array.isArray(c)) return;\n    }\n    this.matches[index][e] = true;\n    var st = this.statCache[abs];\n    if (st) this.emit(\"stat\", e, st);\n    this.emit(\"match\", e);\n};\nGlob.prototype._readdirInGlobStar = function(abs, cb) {\n    if (this.aborted) return;\n    // follow all symlinked directories forever\n    // just proceed as if this is a non-globstar situation\n    if (this.follow) return this._readdir(abs, false, cb);\n    var lstatkey = \"lstat\\x00\" + abs;\n    var self = this;\n    var lstatcb = inflight(lstatkey, lstatcb_);\n    if (lstatcb) self.fs.lstat(abs, lstatcb);\n    function lstatcb_(er, lstat) {\n        if (er && er.code === \"ENOENT\") return cb();\n        var isSym = lstat && lstat.isSymbolicLink();\n        self.symlinks[abs] = isSym;\n        // If it's not a symlink or a dir, then it's definitely a regular file.\n        // don't bother doing a readdir in that case.\n        if (!isSym && lstat && !lstat.isDirectory()) {\n            self.cache[abs] = \"FILE\";\n            cb();\n        } else self._readdir(abs, false, cb);\n    }\n};\nGlob.prototype._readdir = function(abs, inGlobStar, cb) {\n    if (this.aborted) return;\n    cb = inflight(\"readdir\\x00\" + abs + \"\\x00\" + inGlobStar, cb);\n    if (!cb) return;\n    //console.error('RD %j %j', +inGlobStar, abs)\n    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs, cb);\n    if (ownProp(this.cache, abs)) {\n        var c = this.cache[abs];\n        if (!c || c === \"FILE\") return cb();\n        if (Array.isArray(c)) return cb(null, c);\n    }\n    var self = this;\n    self.fs.readdir(abs, readdirCb(this, abs, cb));\n};\nfunction readdirCb(self, abs, cb) {\n    return function(er, entries) {\n        if (er) self._readdirError(abs, er, cb);\n        else self._readdirEntries(abs, entries, cb);\n    };\n}\nGlob.prototype._readdirEntries = function(abs, entries, cb) {\n    if (this.aborted) return;\n    // if we haven't asked to stat everything, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.\n    if (!this.mark && !this.stat) {\n        for(var i = 0; i < entries.length; i++){\n            var e = entries[i];\n            if (abs === \"/\") e = abs + e;\n            else e = abs + \"/\" + e;\n            this.cache[e] = true;\n        }\n    }\n    this.cache[abs] = entries;\n    return cb(null, entries);\n};\nGlob.prototype._readdirError = function(f, er, cb) {\n    if (this.aborted) return;\n    // handle errors, and cache the information\n    switch(er.code){\n        case \"ENOTSUP\":\n        case \"ENOTDIR\":\n            var abs = this._makeAbs(f);\n            this.cache[abs] = \"FILE\";\n            if (abs === this.cwdAbs) {\n                var error = new Error(er.code + \" invalid cwd \" + this.cwd);\n                error.path = this.cwd;\n                error.code = er.code;\n                this.emit(\"error\", error);\n                this.abort();\n            }\n            break;\n        case \"ENOENT\":\n        case \"ELOOP\":\n        case \"ENAMETOOLONG\":\n        case \"UNKNOWN\":\n            this.cache[this._makeAbs(f)] = false;\n            break;\n        default:\n            this.cache[this._makeAbs(f)] = false;\n            if (this.strict) {\n                this.emit(\"error\", er);\n                // If the error is handled, then we abort\n                // if not, we threw out of here\n                this.abort();\n            }\n            if (!this.silent) console.error(\"glob error\", er);\n            break;\n    }\n    return cb();\n};\nGlob.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {\n    var self = this;\n    this._readdir(abs, inGlobStar, function(er, entries) {\n        self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);\n    });\n};\nGlob.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n    //console.error('pgs2', prefix, remain[0], entries)\n    // no entries means not a dir, so it can never have matches\n    // foo.txt/** doesn't match foo.txt\n    if (!entries) return cb();\n    // test without the globstar, and with every child both below\n    // and replacing the globstar.\n    var remainWithoutGlobStar = remain.slice(1);\n    var gspref = prefix ? [\n        prefix\n    ] : [];\n    var noGlobStar = gspref.concat(remainWithoutGlobStar);\n    // the noGlobStar pattern exits the inGlobStar state\n    this._process(noGlobStar, index, false, cb);\n    var isSym = this.symlinks[abs];\n    var len = entries.length;\n    // If it's a symlink, and we're in a globstar, then stop\n    if (isSym && inGlobStar) return cb();\n    for(var i = 0; i < len; i++){\n        var e = entries[i];\n        if (e.charAt(0) === \".\" && !this.dot) continue;\n        // these two cases enter the inGlobStar state\n        var instead = gspref.concat(entries[i], remainWithoutGlobStar);\n        this._process(instead, index, true, cb);\n        var below = gspref.concat(entries[i], remain);\n        this._process(below, index, true, cb);\n    }\n    cb();\n};\nGlob.prototype._processSimple = function(prefix, index, cb) {\n    // XXX review this.  Shouldn't it be doing the mounting etc\n    // before doing stat?  kinda weird?\n    var self = this;\n    this._stat(prefix, function(er, exists) {\n        self._processSimple2(prefix, index, er, exists, cb);\n    });\n};\nGlob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {\n    //console.error('ps2', prefix, exists)\n    if (!this.matches[index]) this.matches[index] = Object.create(null);\n    // If it doesn't exist, then just mark the lack of results\n    if (!exists) return cb();\n    if (prefix && isAbsolute(prefix) && !this.nomount) {\n        var trail = /[\\/\\\\]$/.test(prefix);\n        if (prefix.charAt(0) === \"/\") {\n            prefix = path.join(this.root, prefix);\n        } else {\n            prefix = path.resolve(this.root, prefix);\n            if (trail) prefix += \"/\";\n        }\n    }\n    if (process.platform === \"win32\") prefix = prefix.replace(/\\\\/g, \"/\");\n    // Mark this as a match\n    this._emitMatch(index, prefix);\n    cb();\n};\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function(f, cb) {\n    var abs = this._makeAbs(f);\n    var needDir = f.slice(-1) === \"/\";\n    if (f.length > this.maxLength) return cb();\n    if (!this.stat && ownProp(this.cache, abs)) {\n        var c = this.cache[abs];\n        if (Array.isArray(c)) c = \"DIR\";\n        // It exists, but maybe not how we need it\n        if (!needDir || c === \"DIR\") return cb(null, c);\n        if (needDir && c === \"FILE\") return cb();\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n    }\n    var exists;\n    var stat = this.statCache[abs];\n    if (stat !== undefined) {\n        if (stat === false) return cb(null, stat);\n        else {\n            var type = stat.isDirectory() ? \"DIR\" : \"FILE\";\n            if (needDir && type === \"FILE\") return cb();\n            else return cb(null, type, stat);\n        }\n    }\n    var self = this;\n    var statcb = inflight(\"stat\\x00\" + abs, lstatcb_);\n    if (statcb) self.fs.lstat(abs, statcb);\n    function lstatcb_(er, lstat) {\n        if (lstat && lstat.isSymbolicLink()) {\n            // If it's a symlink, then treat it as the target, unless\n            // the target does not exist, then treat it as a file.\n            return self.fs.stat(abs, function(er, stat) {\n                if (er) self._stat2(f, abs, null, lstat, cb);\n                else self._stat2(f, abs, er, stat, cb);\n            });\n        } else {\n            self._stat2(f, abs, er, lstat, cb);\n        }\n    }\n};\nGlob.prototype._stat2 = function(f, abs, er, stat, cb) {\n    if (er && (er.code === \"ENOENT\" || er.code === \"ENOTDIR\")) {\n        this.statCache[abs] = false;\n        return cb();\n    }\n    var needDir = f.slice(-1) === \"/\";\n    this.statCache[abs] = stat;\n    if (abs.slice(-1) === \"/\" && stat && !stat.isDirectory()) return cb(null, false, stat);\n    var c = true;\n    if (stat) c = stat.isDirectory() ? \"DIR\" : \"FILE\";\n    this.cache[abs] = this.cache[abs] || c;\n    if (needDir && c === \"FILE\") return cb();\n    return cb(null, c, stat);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/node_modules/glob/glob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/zip-stream/node_modules/glob/sync.js":
/*!***********************************************************!*\
  !*** ./node_modules/zip-stream/node_modules/glob/sync.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = globSync;\nglobSync.GlobSync = GlobSync;\nvar rp = __webpack_require__(/*! fs.realpath */ \"(rsc)/./node_modules/fs.realpath/index.js\");\nvar minimatch = __webpack_require__(/*! minimatch */ \"(rsc)/./node_modules/minimatch/minimatch.js\");\nvar Minimatch = minimatch.Minimatch;\nvar Glob = (__webpack_require__(/*! ./glob.js */ \"(rsc)/./node_modules/zip-stream/node_modules/glob/glob.js\").Glob);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(rsc)/./node_modules/path-is-absolute/index.js\");\nvar common = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/zip-stream/node_modules/glob/common.js\");\nvar setopts = common.setopts;\nvar ownProp = common.ownProp;\nvar childrenIgnored = common.childrenIgnored;\nvar isIgnored = common.isIgnored;\nfunction globSync(pattern, options) {\n    if (typeof options === \"function\" || arguments.length === 3) throw new TypeError(\"callback provided to sync glob\\n\" + \"See: https://github.com/isaacs/node-glob/issues/167\");\n    return new GlobSync(pattern, options).found;\n}\nfunction GlobSync(pattern, options) {\n    if (!pattern) throw new Error(\"must provide pattern\");\n    if (typeof options === \"function\" || arguments.length === 3) throw new TypeError(\"callback provided to sync glob\\n\" + \"See: https://github.com/isaacs/node-glob/issues/167\");\n    if (!(this instanceof GlobSync)) return new GlobSync(pattern, options);\n    setopts(this, pattern, options);\n    if (this.noprocess) return this;\n    var n = this.minimatch.set.length;\n    this.matches = new Array(n);\n    for(var i = 0; i < n; i++){\n        this._process(this.minimatch.set[i], i, false);\n    }\n    this._finish();\n}\nGlobSync.prototype._finish = function() {\n    assert.ok(this instanceof GlobSync);\n    if (this.realpath) {\n        var self = this;\n        this.matches.forEach(function(matchset, index) {\n            var set = self.matches[index] = Object.create(null);\n            for(var p in matchset){\n                try {\n                    p = self._makeAbs(p);\n                    var real = rp.realpathSync(p, self.realpathCache);\n                    set[real] = true;\n                } catch (er) {\n                    if (er.syscall === \"stat\") set[self._makeAbs(p)] = true;\n                    else throw er;\n                }\n            }\n        });\n    }\n    common.finish(this);\n};\nGlobSync.prototype._process = function(pattern, index, inGlobStar) {\n    assert.ok(this instanceof GlobSync);\n    // Get the first [n] parts of pattern that are all strings.\n    var n = 0;\n    while(typeof pattern[n] === \"string\"){\n        n++;\n    }\n    // now n is the index of the first one that is *not* a string.\n    // See if there's anything else\n    var prefix;\n    switch(n){\n        // if not, then this is rather simple\n        case pattern.length:\n            this._processSimple(pattern.join(\"/\"), index);\n            return;\n        case 0:\n            // pattern *starts* with some non-trivial item.\n            // going to readdir(cwd), but not include the prefix in matches.\n            prefix = null;\n            break;\n        default:\n            // pattern has some string bits in the front.\n            // whatever it starts with, whether that's 'absolute' like /foo/bar,\n            // or 'relative' like '../baz'\n            prefix = pattern.slice(0, n).join(\"/\");\n            break;\n    }\n    var remain = pattern.slice(n);\n    // get the list of entries.\n    var read;\n    if (prefix === null) read = \".\";\n    else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {\n        return typeof p === \"string\" ? p : \"[*]\";\n    }).join(\"/\"))) {\n        if (!prefix || !isAbsolute(prefix)) prefix = \"/\" + prefix;\n        read = prefix;\n    } else read = prefix;\n    var abs = this._makeAbs(read);\n    //if ignored, skip processing\n    if (childrenIgnored(this, read)) return;\n    var isGlobStar = remain[0] === minimatch.GLOBSTAR;\n    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);\n    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);\n};\nGlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {\n    var entries = this._readdir(abs, inGlobStar);\n    // if the abs isn't a dir, then nothing can match!\n    if (!entries) return;\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    var pn = remain[0];\n    var negate = !!this.minimatch.negate;\n    var rawGlob = pn._glob;\n    var dotOk = this.dot || rawGlob.charAt(0) === \".\";\n    var matchedEntries = [];\n    for(var i = 0; i < entries.length; i++){\n        var e = entries[i];\n        if (e.charAt(0) !== \".\" || dotOk) {\n            var m;\n            if (negate && !prefix) {\n                m = !e.match(pn);\n            } else {\n                m = e.match(pn);\n            }\n            if (m) matchedEntries.push(e);\n        }\n    }\n    var len = matchedEntries.length;\n    // If there are no matched entries, then nothing matches.\n    if (len === 0) return;\n    // if this is the last remaining pattern bit, then no need for\n    // an additional stat *unless* the user has specified mark or\n    // stat explicitly.  We know they exist, since readdir returned\n    // them.\n    if (remain.length === 1 && !this.mark && !this.stat) {\n        if (!this.matches[index]) this.matches[index] = Object.create(null);\n        for(var i = 0; i < len; i++){\n            var e = matchedEntries[i];\n            if (prefix) {\n                if (prefix.slice(-1) !== \"/\") e = prefix + \"/\" + e;\n                else e = prefix + e;\n            }\n            if (e.charAt(0) === \"/\" && !this.nomount) {\n                e = path.join(this.root, e);\n            }\n            this._emitMatch(index, e);\n        }\n        // This was the last one, and no stats were needed\n        return;\n    }\n    // now test all matched entries as stand-ins for that part\n    // of the pattern.\n    remain.shift();\n    for(var i = 0; i < len; i++){\n        var e = matchedEntries[i];\n        var newPattern;\n        if (prefix) newPattern = [\n            prefix,\n            e\n        ];\n        else newPattern = [\n            e\n        ];\n        this._process(newPattern.concat(remain), index, inGlobStar);\n    }\n};\nGlobSync.prototype._emitMatch = function(index, e) {\n    if (isIgnored(this, e)) return;\n    var abs = this._makeAbs(e);\n    if (this.mark) e = this._mark(e);\n    if (this.absolute) {\n        e = abs;\n    }\n    if (this.matches[index][e]) return;\n    if (this.nodir) {\n        var c = this.cache[abs];\n        if (c === \"DIR\" || Array.isArray(c)) return;\n    }\n    this.matches[index][e] = true;\n    if (this.stat) this._stat(e);\n};\nGlobSync.prototype._readdirInGlobStar = function(abs) {\n    // follow all symlinked directories forever\n    // just proceed as if this is a non-globstar situation\n    if (this.follow) return this._readdir(abs, false);\n    var entries;\n    var lstat;\n    var stat;\n    try {\n        lstat = this.fs.lstatSync(abs);\n    } catch (er) {\n        if (er.code === \"ENOENT\") {\n            // lstat failed, doesn't exist\n            return null;\n        }\n    }\n    var isSym = lstat && lstat.isSymbolicLink();\n    this.symlinks[abs] = isSym;\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) this.cache[abs] = \"FILE\";\n    else entries = this._readdir(abs, false);\n    return entries;\n};\nGlobSync.prototype._readdir = function(abs, inGlobStar) {\n    var entries;\n    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs);\n    if (ownProp(this.cache, abs)) {\n        var c = this.cache[abs];\n        if (!c || c === \"FILE\") return null;\n        if (Array.isArray(c)) return c;\n    }\n    try {\n        return this._readdirEntries(abs, this.fs.readdirSync(abs));\n    } catch (er) {\n        this._readdirError(abs, er);\n        return null;\n    }\n};\nGlobSync.prototype._readdirEntries = function(abs, entries) {\n    // if we haven't asked to stat everything, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.\n    if (!this.mark && !this.stat) {\n        for(var i = 0; i < entries.length; i++){\n            var e = entries[i];\n            if (abs === \"/\") e = abs + e;\n            else e = abs + \"/\" + e;\n            this.cache[e] = true;\n        }\n    }\n    this.cache[abs] = entries;\n    // mark and cache dir-ness\n    return entries;\n};\nGlobSync.prototype._readdirError = function(f, er) {\n    // handle errors, and cache the information\n    switch(er.code){\n        case \"ENOTSUP\":\n        case \"ENOTDIR\":\n            var abs = this._makeAbs(f);\n            this.cache[abs] = \"FILE\";\n            if (abs === this.cwdAbs) {\n                var error = new Error(er.code + \" invalid cwd \" + this.cwd);\n                error.path = this.cwd;\n                error.code = er.code;\n                throw error;\n            }\n            break;\n        case \"ENOENT\":\n        case \"ELOOP\":\n        case \"ENAMETOOLONG\":\n        case \"UNKNOWN\":\n            this.cache[this._makeAbs(f)] = false;\n            break;\n        default:\n            this.cache[this._makeAbs(f)] = false;\n            if (this.strict) throw er;\n            if (!this.silent) console.error(\"glob error\", er);\n            break;\n    }\n};\nGlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {\n    var entries = this._readdir(abs, inGlobStar);\n    // no entries means not a dir, so it can never have matches\n    // foo.txt/** doesn't match foo.txt\n    if (!entries) return;\n    // test without the globstar, and with every child both below\n    // and replacing the globstar.\n    var remainWithoutGlobStar = remain.slice(1);\n    var gspref = prefix ? [\n        prefix\n    ] : [];\n    var noGlobStar = gspref.concat(remainWithoutGlobStar);\n    // the noGlobStar pattern exits the inGlobStar state\n    this._process(noGlobStar, index, false);\n    var len = entries.length;\n    var isSym = this.symlinks[abs];\n    // If it's a symlink, and we're in a globstar, then stop\n    if (isSym && inGlobStar) return;\n    for(var i = 0; i < len; i++){\n        var e = entries[i];\n        if (e.charAt(0) === \".\" && !this.dot) continue;\n        // these two cases enter the inGlobStar state\n        var instead = gspref.concat(entries[i], remainWithoutGlobStar);\n        this._process(instead, index, true);\n        var below = gspref.concat(entries[i], remain);\n        this._process(below, index, true);\n    }\n};\nGlobSync.prototype._processSimple = function(prefix, index) {\n    // XXX review this.  Shouldn't it be doing the mounting etc\n    // before doing stat?  kinda weird?\n    var exists = this._stat(prefix);\n    if (!this.matches[index]) this.matches[index] = Object.create(null);\n    // If it doesn't exist, then just mark the lack of results\n    if (!exists) return;\n    if (prefix && isAbsolute(prefix) && !this.nomount) {\n        var trail = /[\\/\\\\]$/.test(prefix);\n        if (prefix.charAt(0) === \"/\") {\n            prefix = path.join(this.root, prefix);\n        } else {\n            prefix = path.resolve(this.root, prefix);\n            if (trail) prefix += \"/\";\n        }\n    }\n    if (process.platform === \"win32\") prefix = prefix.replace(/\\\\/g, \"/\");\n    // Mark this as a match\n    this._emitMatch(index, prefix);\n};\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function(f) {\n    var abs = this._makeAbs(f);\n    var needDir = f.slice(-1) === \"/\";\n    if (f.length > this.maxLength) return false;\n    if (!this.stat && ownProp(this.cache, abs)) {\n        var c = this.cache[abs];\n        if (Array.isArray(c)) c = \"DIR\";\n        // It exists, but maybe not how we need it\n        if (!needDir || c === \"DIR\") return c;\n        if (needDir && c === \"FILE\") return false;\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n    }\n    var exists;\n    var stat = this.statCache[abs];\n    if (!stat) {\n        var lstat;\n        try {\n            lstat = this.fs.lstatSync(abs);\n        } catch (er) {\n            if (er && (er.code === \"ENOENT\" || er.code === \"ENOTDIR\")) {\n                this.statCache[abs] = false;\n                return false;\n            }\n        }\n        if (lstat && lstat.isSymbolicLink()) {\n            try {\n                stat = this.fs.statSync(abs);\n            } catch (er) {\n                stat = lstat;\n            }\n        } else {\n            stat = lstat;\n        }\n    }\n    this.statCache[abs] = stat;\n    var c = true;\n    if (stat) c = stat.isDirectory() ? \"DIR\" : \"FILE\";\n    this.cache[abs] = this.cache[abs] || c;\n    if (needDir && c === \"FILE\") return false;\n    return c;\n};\nGlobSync.prototype._mark = function(p) {\n    return common.mark(this, p);\n};\nGlobSync.prototype._makeAbs = function(f) {\n    return common.makeAbs(this, f);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/node_modules/glob/sync.js\n");

/***/ })

};
;